// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medication.proto

package dmd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Units_PrescribingType int32

const (
	Units_UNDEFINED     Units_PrescribingType = 0
	Units_DOSE_BASED    Units_PrescribingType = 1
	Units_PRODUCT_BASED Units_PrescribingType = 2
)

var Units_PrescribingType_name = map[int32]string{
	0: "UNDEFINED",
	1: "DOSE_BASED",
	2: "PRODUCT_BASED",
}

var Units_PrescribingType_value = map[string]int32{
	"UNDEFINED":     0,
	"DOSE_BASED":    1,
	"PRODUCT_BASED": 2,
}

func (x Units_PrescribingType) String() string {
	return proto.EnumName(Units_PrescribingType_name, int32(x))
}

func (Units_PrescribingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7395f04f7c314ba8, []int{1, 0}
}

type ParsedMedication struct {
	DrugName             string     `protobuf:"bytes,1,opt,name=drug_name,json=drugName,proto3" json:"drug_name,omitempty"`
	ConceptId            int64      `protobuf:"varint,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	MappedDrugName       string     `protobuf:"bytes,3,opt,name=mapped_drug_name,json=mappedDrugName,proto3" json:"mapped_drug_name,omitempty"`
	Dose                 float64    `protobuf:"fixed64,4,opt,name=dose,proto3" json:"dose,omitempty"`
	Units                *Units     `protobuf:"bytes,5,opt,name=units,proto3" json:"units,omitempty"`
	Frequency            *Frequency `protobuf:"bytes,6,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Route                *Route     `protobuf:"bytes,7,opt,name=route,proto3" json:"route,omitempty"`
	AsRequired           bool       `protobuf:"varint,8,opt,name=as_required,json=asRequired,proto3" json:"as_required,omitempty"`
	Notes                string     `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	String_              string     `protobuf:"bytes,10,opt,name=string,proto3" json:"string,omitempty"`
	EquivalentDose       float64    `protobuf:"fixed64,11,opt,name=equivalent_dose,json=equivalentDose,proto3" json:"equivalent_dose,omitempty"`
	DailyEquivalentDose  float64    `protobuf:"fixed64,12,opt,name=daily_equivalent_dose,json=dailyEquivalentDose,proto3" json:"daily_equivalent_dose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ParsedMedication) Reset()         { *m = ParsedMedication{} }
func (m *ParsedMedication) String() string { return proto.CompactTextString(m) }
func (*ParsedMedication) ProtoMessage()    {}
func (*ParsedMedication) Descriptor() ([]byte, []int) {
	return fileDescriptor_7395f04f7c314ba8, []int{0}
}

func (m *ParsedMedication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParsedMedication.Unmarshal(m, b)
}
func (m *ParsedMedication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParsedMedication.Marshal(b, m, deterministic)
}
func (m *ParsedMedication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParsedMedication.Merge(m, src)
}
func (m *ParsedMedication) XXX_Size() int {
	return xxx_messageInfo_ParsedMedication.Size(m)
}
func (m *ParsedMedication) XXX_DiscardUnknown() {
	xxx_messageInfo_ParsedMedication.DiscardUnknown(m)
}

var xxx_messageInfo_ParsedMedication proto.InternalMessageInfo

func (m *ParsedMedication) GetDrugName() string {
	if m != nil {
		return m.DrugName
	}
	return ""
}

func (m *ParsedMedication) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *ParsedMedication) GetMappedDrugName() string {
	if m != nil {
		return m.MappedDrugName
	}
	return ""
}

func (m *ParsedMedication) GetDose() float64 {
	if m != nil {
		return m.Dose
	}
	return 0
}

func (m *ParsedMedication) GetUnits() *Units {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *ParsedMedication) GetFrequency() *Frequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

func (m *ParsedMedication) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *ParsedMedication) GetAsRequired() bool {
	if m != nil {
		return m.AsRequired
	}
	return false
}

func (m *ParsedMedication) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *ParsedMedication) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *ParsedMedication) GetEquivalentDose() float64 {
	if m != nil {
		return m.EquivalentDose
	}
	return 0
}

func (m *ParsedMedication) GetDailyEquivalentDose() float64 {
	if m != nil {
		return m.DailyEquivalentDose
	}
	return 0
}

type Units struct {
	ConceptId            int64                 `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	PrescribingType      Units_PrescribingType `protobuf:"varint,2,opt,name=prescribing_type,json=prescribingType,proto3,enum=dmd.Units_PrescribingType" json:"prescribing_type,omitempty"`
	Abbreviations        []string              `protobuf:"bytes,3,rep,name=abbreviations,proto3" json:"abbreviations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Units) Reset()         { *m = Units{} }
func (m *Units) String() string { return proto.CompactTextString(m) }
func (*Units) ProtoMessage()    {}
func (*Units) Descriptor() ([]byte, []int) {
	return fileDescriptor_7395f04f7c314ba8, []int{1}
}

func (m *Units) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Units.Unmarshal(m, b)
}
func (m *Units) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Units.Marshal(b, m, deterministic)
}
func (m *Units) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Units.Merge(m, src)
}
func (m *Units) XXX_Size() int {
	return xxx_messageInfo_Units.Size(m)
}
func (m *Units) XXX_DiscardUnknown() {
	xxx_messageInfo_Units.DiscardUnknown(m)
}

var xxx_messageInfo_Units proto.InternalMessageInfo

func (m *Units) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *Units) GetPrescribingType() Units_PrescribingType {
	if m != nil {
		return m.PrescribingType
	}
	return Units_UNDEFINED
}

func (m *Units) GetAbbreviations() []string {
	if m != nil {
		return m.Abbreviations
	}
	return nil
}

type Frequency struct {
	ConceptId            int64    `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Frequency) Reset()         { *m = Frequency{} }
func (m *Frequency) String() string { return proto.CompactTextString(m) }
func (*Frequency) ProtoMessage()    {}
func (*Frequency) Descriptor() ([]byte, []int) {
	return fileDescriptor_7395f04f7c314ba8, []int{2}
}

func (m *Frequency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Frequency.Unmarshal(m, b)
}
func (m *Frequency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Frequency.Marshal(b, m, deterministic)
}
func (m *Frequency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frequency.Merge(m, src)
}
func (m *Frequency) XXX_Size() int {
	return xxx_messageInfo_Frequency.Size(m)
}
func (m *Frequency) XXX_DiscardUnknown() {
	xxx_messageInfo_Frequency.DiscardUnknown(m)
}

var xxx_messageInfo_Frequency proto.InternalMessageInfo

func (m *Frequency) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *Frequency) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Route struct {
	ConceptId            int64    `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	Abbreviation         string   `protobuf:"bytes,2,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_7395f04f7c314ba8, []int{3}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *Route) GetAbbreviation() string {
	if m != nil {
		return m.Abbreviation
	}
	return ""
}

type Prescription struct {
	VirtualTherapeuticMoietyId int64    `protobuf:"varint,1,opt,name=virtual_therapeutic_moiety_id,json=virtualTherapeuticMoietyId,proto3" json:"virtual_therapeutic_moiety_id,omitempty"`
	TradeFamilyId              int64    `protobuf:"varint,2,opt,name=trade_family_id,json=tradeFamilyId,proto3" json:"trade_family_id,omitempty"`
	VirtualMedicinalProductId  int64    `protobuf:"varint,3,opt,name=virtual_medicinal_product_id,json=virtualMedicinalProductId,proto3" json:"virtual_medicinal_product_id,omitempty"`
	ActualMedicinalProductId   int64    `protobuf:"varint,4,opt,name=actual_medicinal_product_id,json=actualMedicinalProductId,proto3" json:"actual_medicinal_product_id,omitempty"`
	Route                      int64    `protobuf:"varint,5,opt,name=route,proto3" json:"route,omitempty"`
	Site                       int64    `protobuf:"varint,6,opt,name=site,proto3" json:"site,omitempty"`
	Form                       int64    `protobuf:"varint,7,opt,name=form,proto3" json:"form,omitempty"`
	Dose                       float64  `protobuf:"fixed64,8,opt,name=dose,proto3" json:"dose,omitempty"`
	DoseUnits                  int64    `protobuf:"varint,9,opt,name=dose_units,json=doseUnits,proto3" json:"dose_units,omitempty"`
	Frequency                  int64    `protobuf:"varint,10,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Prescription) Reset()         { *m = Prescription{} }
func (m *Prescription) String() string { return proto.CompactTextString(m) }
func (*Prescription) ProtoMessage()    {}
func (*Prescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_7395f04f7c314ba8, []int{4}
}

func (m *Prescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Prescription.Unmarshal(m, b)
}
func (m *Prescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Prescription.Marshal(b, m, deterministic)
}
func (m *Prescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prescription.Merge(m, src)
}
func (m *Prescription) XXX_Size() int {
	return xxx_messageInfo_Prescription.Size(m)
}
func (m *Prescription) XXX_DiscardUnknown() {
	xxx_messageInfo_Prescription.DiscardUnknown(m)
}

var xxx_messageInfo_Prescription proto.InternalMessageInfo

func (m *Prescription) GetVirtualTherapeuticMoietyId() int64 {
	if m != nil {
		return m.VirtualTherapeuticMoietyId
	}
	return 0
}

func (m *Prescription) GetTradeFamilyId() int64 {
	if m != nil {
		return m.TradeFamilyId
	}
	return 0
}

func (m *Prescription) GetVirtualMedicinalProductId() int64 {
	if m != nil {
		return m.VirtualMedicinalProductId
	}
	return 0
}

func (m *Prescription) GetActualMedicinalProductId() int64 {
	if m != nil {
		return m.ActualMedicinalProductId
	}
	return 0
}

func (m *Prescription) GetRoute() int64 {
	if m != nil {
		return m.Route
	}
	return 0
}

func (m *Prescription) GetSite() int64 {
	if m != nil {
		return m.Site
	}
	return 0
}

func (m *Prescription) GetForm() int64 {
	if m != nil {
		return m.Form
	}
	return 0
}

func (m *Prescription) GetDose() float64 {
	if m != nil {
		return m.Dose
	}
	return 0
}

func (m *Prescription) GetDoseUnits() int64 {
	if m != nil {
		return m.DoseUnits
	}
	return 0
}

func (m *Prescription) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func init() {
	proto.RegisterEnum("dmd.Units_PrescribingType", Units_PrescribingType_name, Units_PrescribingType_value)
	proto.RegisterType((*ParsedMedication)(nil), "dmd.ParsedMedication")
	proto.RegisterType((*Units)(nil), "dmd.Units")
	proto.RegisterType((*Frequency)(nil), "dmd.Frequency")
	proto.RegisterType((*Route)(nil), "dmd.Route")
	proto.RegisterType((*Prescription)(nil), "dmd.Prescription")
}

func init() { proto.RegisterFile("medication.proto", fileDescriptor_7395f04f7c314ba8) }

var fileDescriptor_7395f04f7c314ba8 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcb, 0x6e, 0xdb, 0x3a,
	0x10, 0x86, 0x8f, 0x22, 0x2b, 0xc7, 0x9a, 0xc4, 0x97, 0xc3, 0x93, 0x16, 0x6a, 0x2e, 0xa8, 0x20,
	0x14, 0xad, 0x16, 0x85, 0x17, 0xe9, 0xba, 0x68, 0x93, 0xc8, 0x01, 0x5c, 0x20, 0x89, 0xc1, 0x24,
	0x9b, 0x6e, 0x04, 0x5a, 0x64, 0x52, 0x02, 0xd6, 0xa5, 0x14, 0x15, 0xc0, 0x6f, 0xd0, 0x67, 0xe9,
	0x13, 0xf5, 0x71, 0x0a, 0x8e, 0x64, 0xcb, 0x36, 0x5a, 0x64, 0x25, 0xf2, 0x9b, 0x7f, 0x46, 0x1a,
	0x8e, 0x7e, 0xc2, 0x30, 0x15, 0x5c, 0x26, 0x4c, 0xcb, 0x3c, 0x1b, 0x15, 0x2a, 0xd7, 0x39, 0xb1,
	0x79, 0xca, 0x83, 0x9f, 0x36, 0x0c, 0xa7, 0x4c, 0x95, 0x82, 0x5f, 0xad, 0xe2, 0xe4, 0x08, 0x5c,
	0xae, 0xaa, 0xc7, 0x38, 0x63, 0xa9, 0xf0, 0x2c, 0xdf, 0x0a, 0x5d, 0xda, 0x35, 0xe0, 0x9a, 0xa5,
	0x82, 0x9c, 0x00, 0x24, 0x79, 0x96, 0x88, 0x42, 0xc7, 0x92, 0x7b, 0x3b, 0xbe, 0x15, 0xda, 0xd4,
	0x6d, 0xc8, 0x84, 0x93, 0x10, 0x86, 0x29, 0x2b, 0x0a, 0xc1, 0xe3, 0xb6, 0x84, 0x8d, 0x25, 0xfa,
	0x35, 0x8f, 0x96, 0x85, 0x08, 0x74, 0x78, 0x5e, 0x0a, 0xaf, 0xe3, 0x5b, 0xa1, 0x45, 0x71, 0x4d,
	0x7c, 0x70, 0xaa, 0x4c, 0xea, 0xd2, 0x73, 0x7c, 0x2b, 0xdc, 0x3b, 0x85, 0x11, 0x4f, 0xf9, 0xe8,
	0xde, 0x10, 0x5a, 0x07, 0xc8, 0x7b, 0x70, 0x1f, 0x94, 0xf8, 0x5e, 0x89, 0x2c, 0x59, 0x78, 0xbb,
	0xa8, 0xea, 0xa3, 0xea, 0x72, 0x49, 0x69, 0x2b, 0x30, 0xf5, 0x54, 0x5e, 0x69, 0xe1, 0xfd, 0xbb,
	0x56, 0x8f, 0x1a, 0x42, 0xeb, 0x00, 0x79, 0x0d, 0x7b, 0xac, 0x8c, 0x4d, 0x82, 0x54, 0x82, 0x7b,
	0x5d, 0xdf, 0x0a, 0xbb, 0x14, 0x58, 0x49, 0x1b, 0x42, 0x0e, 0xc0, 0xc9, 0x72, 0x2d, 0x4a, 0xcf,
	0xc5, 0x2e, 0xea, 0x0d, 0x79, 0x09, 0xbb, 0xa5, 0x56, 0x32, 0x7b, 0xf4, 0x00, 0x71, 0xb3, 0x23,
	0xef, 0x60, 0x60, 0x12, 0x9f, 0xd8, 0x5c, 0x64, 0x3a, 0xc6, 0xfe, 0xf6, 0xb0, 0xbf, 0x7e, 0x8b,
	0x23, 0xd3, 0xe9, 0x29, 0xbc, 0xe0, 0x4c, 0xce, 0x17, 0xf1, 0xb6, 0x7c, 0x1f, 0xe5, 0xff, 0x63,
	0x70, 0xbc, 0x91, 0x13, 0xfc, 0xb2, 0xc0, 0xc1, 0xc3, 0xd8, 0x1a, 0x82, 0xb5, 0x3d, 0x84, 0x31,
	0x0c, 0x0b, 0x25, 0xca, 0x44, 0xc9, 0x99, 0xcc, 0x1e, 0x63, 0xbd, 0x28, 0x04, 0x4e, 0xaa, 0x7f,
	0x7a, 0xd8, 0x9e, 0xe8, 0x68, 0xda, 0x4a, 0xee, 0x16, 0x85, 0xa0, 0x83, 0x62, 0x13, 0x90, 0x37,
	0xd0, 0x63, 0xb3, 0x99, 0x12, 0x4f, 0x12, 0xff, 0x8b, 0xd2, 0xb3, 0x7d, 0x3b, 0x74, 0xe9, 0x26,
	0x0c, 0x2e, 0x60, 0xb0, 0x55, 0x89, 0xf4, 0xc0, 0xbd, 0xbf, 0x8e, 0xc6, 0x97, 0x93, 0xeb, 0x71,
	0x34, 0xfc, 0x87, 0xf4, 0x01, 0xa2, 0x9b, 0xdb, 0x71, 0x7c, 0x7e, 0x76, 0x3b, 0x8e, 0x86, 0x16,
	0xf9, 0x0f, 0x7a, 0x53, 0x7a, 0x13, 0xdd, 0x5f, 0xdc, 0x35, 0x68, 0x27, 0xf8, 0x0c, 0xee, 0x6a,
	0x80, 0xcf, 0x75, 0x67, 0x26, 0xc2, 0x52, 0x51, 0x7a, 0x3b, 0xf8, 0x39, 0xf5, 0x26, 0xf8, 0x02,
	0x0e, 0x0e, 0xf6, 0xb9, 0xec, 0x00, 0xf6, 0xd7, 0xbf, 0x1f, 0xcf, 0xc5, 0xa5, 0x1b, 0x2c, 0xf8,
	0x61, 0xc3, 0x7e, 0xd3, 0x53, 0x81, 0x8e, 0x38, 0x83, 0x93, 0x27, 0xa9, 0x74, 0xc5, 0xe6, 0xb1,
	0xfe, 0x26, 0x14, 0x2b, 0x44, 0xa5, 0x65, 0x12, 0xa7, 0xb9, 0x14, 0x7a, 0xd1, 0xbe, 0xe6, 0xb0,
	0x11, 0xdd, 0xb5, 0x9a, 0x2b, 0x94, 0x4c, 0x38, 0x79, 0x0b, 0x03, 0xad, 0x18, 0x17, 0xf1, 0x03,
	0x4b, 0xcd, 0xdc, 0x57, 0xe6, 0xe9, 0x21, 0xbe, 0x44, 0x3a, 0xe1, 0xe4, 0x13, 0x1c, 0x2f, 0x5f,
	0x85, 0x96, 0x95, 0x19, 0x9b, 0xc7, 0x85, 0xca, 0x79, 0x95, 0x60, 0x43, 0x36, 0x26, 0xbd, 0x6a,
	0x34, 0x57, 0x4b, 0xc9, 0xb4, 0x56, 0x4c, 0x38, 0xf9, 0x08, 0x47, 0x2c, 0xf9, 0x7b, 0x7e, 0x07,
	0xf3, 0xbd, 0x5a, 0xf2, 0x87, 0xf4, 0x83, 0xa5, 0x65, 0x1c, 0x14, 0x36, 0x36, 0x21, 0xd0, 0x29,
	0xa5, 0x16, 0xe8, 0x38, 0x9b, 0xe2, 0xda, 0xb0, 0x87, 0x5c, 0xa5, 0xe8, 0x2d, 0x9b, 0xe2, 0x7a,
	0x65, 0xea, 0xee, 0x9a, 0xa9, 0x4f, 0x00, 0xcc, 0x33, 0xae, 0x9d, 0xed, 0xd6, 0x03, 0x31, 0xa4,
	0xfe, 0x97, 0x8f, 0xd7, 0x1d, 0x0d, 0x75, 0x74, 0x05, 0xce, 0x9d, 0xaf, 0xe6, 0x9e, 0x9a, 0xed,
	0xe2, 0x9d, 0xf5, 0xe1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xb6, 0x17, 0xc5, 0xc7, 0x04,
	0x00, 0x00,
}
