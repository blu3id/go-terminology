// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dmd.proto

package dmd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `COMBINATION_PROD_IND`
type VirtualMedicinalProduct_CombinationProduct int32

const (
	VirtualMedicinalProduct_NOT_SET                VirtualMedicinalProduct_CombinationProduct = 0
	VirtualMedicinalProduct_COMBINATION_PRODUCT    VirtualMedicinalProduct_CombinationProduct = 1
	VirtualMedicinalProduct_COMPONENT_ONLY_PRODUCT VirtualMedicinalProduct_CombinationProduct = 2
)

var VirtualMedicinalProduct_CombinationProduct_name = map[int32]string{
	0: "NOT_SET",
	1: "COMBINATION_PRODUCT",
	2: "COMPONENT_ONLY_PRODUCT",
}

var VirtualMedicinalProduct_CombinationProduct_value = map[string]int32{
	"NOT_SET":                0,
	"COMBINATION_PRODUCT":    1,
	"COMPONENT_ONLY_PRODUCT": 2,
}

func (x VirtualMedicinalProduct_CombinationProduct) String() string {
	return proto.EnumName(VirtualMedicinalProduct_CombinationProduct_name, int32(x))
}

func (VirtualMedicinalProduct_CombinationProduct) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 0}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `VIRTUAL_PRODUCT_PRES_STATUS`
type VirtualMedicinalProduct_PrescribingStatus int32

const (
	VirtualMedicinalProduct_STATUS_NOT_SET                               VirtualMedicinalProduct_PrescribingStatus = 0
	VirtualMedicinalProduct_VALID_AS_PRESCRIBABLE_PRODUCT                VirtualMedicinalProduct_PrescribingStatus = 1
	VirtualMedicinalProduct_INVALID_IN_NHS_PRIMARY_CARE                  VirtualMedicinalProduct_PrescribingStatus = 2
	VirtualMedicinalProduct_ONLY_AMP_PRESCRIBABLE                        VirtualMedicinalProduct_PrescribingStatus = 3
	VirtualMedicinalProduct_NEVER_VALID_AS_VMP                           VirtualMedicinalProduct_PrescribingStatus = 4
	VirtualMedicinalProduct_NOT_RECOMMENDED_AS_VMP                       VirtualMedicinalProduct_PrescribingStatus = 5
	VirtualMedicinalProduct_VMP_NOT_RECOMMENDED_BRANDS_NOT_BIOEQUIVALENT VirtualMedicinalProduct_PrescribingStatus = 6
	VirtualMedicinalProduct_VMP_NOT_RECOMMENDED_PATIENT_TRAINING_REQ     VirtualMedicinalProduct_PrescribingStatus = 7
	VirtualMedicinalProduct_VMP_NOT_RECOMMENDED_NO_PUBLISHED_SPEC        VirtualMedicinalProduct_PrescribingStatus = 8
)

var VirtualMedicinalProduct_PrescribingStatus_name = map[int32]string{
	0: "STATUS_NOT_SET",
	1: "VALID_AS_PRESCRIBABLE_PRODUCT",
	2: "INVALID_IN_NHS_PRIMARY_CARE",
	3: "ONLY_AMP_PRESCRIBABLE",
	4: "NEVER_VALID_AS_VMP",
	5: "NOT_RECOMMENDED_AS_VMP",
	6: "VMP_NOT_RECOMMENDED_BRANDS_NOT_BIOEQUIVALENT",
	7: "VMP_NOT_RECOMMENDED_PATIENT_TRAINING_REQ",
	8: "VMP_NOT_RECOMMENDED_NO_PUBLISHED_SPEC",
}

var VirtualMedicinalProduct_PrescribingStatus_value = map[string]int32{
	"STATUS_NOT_SET":                               0,
	"VALID_AS_PRESCRIBABLE_PRODUCT":                1,
	"INVALID_IN_NHS_PRIMARY_CARE":                  2,
	"ONLY_AMP_PRESCRIBABLE":                        3,
	"NEVER_VALID_AS_VMP":                           4,
	"NOT_RECOMMENDED_AS_VMP":                       5,
	"VMP_NOT_RECOMMENDED_BRANDS_NOT_BIOEQUIVALENT": 6,
	"VMP_NOT_RECOMMENDED_PATIENT_TRAINING_REQ":     7,
	"VMP_NOT_RECOMMENDED_NO_PUBLISHED_SPEC":        8,
}

func (x VirtualMedicinalProduct_PrescribingStatus) String() string {
	return proto.EnumName(VirtualMedicinalProduct_PrescribingStatus_name, int32(x))
}

func (VirtualMedicinalProduct_PrescribingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 1}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `VIRTUAL_PRODUCT_NON_AVAIL`
type VirtualMedicinalProduct_NonAvailability int32

const (
	VirtualMedicinalProduct_PRODUCTS_AVAILABLE     VirtualMedicinalProduct_NonAvailability = 0
	VirtualMedicinalProduct_PRODUCTS_NOT_AVAILABLE VirtualMedicinalProduct_NonAvailability = 1
)

var VirtualMedicinalProduct_NonAvailability_name = map[int32]string{
	0: "PRODUCTS_AVAILABLE",
	1: "PRODUCTS_NOT_AVAILABLE",
}

var VirtualMedicinalProduct_NonAvailability_value = map[string]int32{
	"PRODUCTS_AVAILABLE":     0,
	"PRODUCTS_NOT_AVAILABLE": 1,
}

func (x VirtualMedicinalProduct_NonAvailability) String() string {
	return proto.EnumName(VirtualMedicinalProduct_NonAvailability_name, int32(x))
}

func (VirtualMedicinalProduct_NonAvailability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 2}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `DF_INDICATOR`
type VirtualMedicinalProduct_DoseForm int32

const (
	VirtualMedicinalProduct_FORM_NOT_SET   VirtualMedicinalProduct_DoseForm = 0
	VirtualMedicinalProduct_DISCRETE       VirtualMedicinalProduct_DoseForm = 1
	VirtualMedicinalProduct_CONTINUOUS     VirtualMedicinalProduct_DoseForm = 2
	VirtualMedicinalProduct_NOT_APPLICABLE VirtualMedicinalProduct_DoseForm = 3
)

var VirtualMedicinalProduct_DoseForm_name = map[int32]string{
	0: "FORM_NOT_SET",
	1: "DISCRETE",
	2: "CONTINUOUS",
	3: "NOT_APPLICABLE",
}

var VirtualMedicinalProduct_DoseForm_value = map[string]int32{
	"FORM_NOT_SET":   0,
	"DISCRETE":       1,
	"CONTINUOUS":     2,
	"NOT_APPLICABLE": 3,
}

func (x VirtualMedicinalProduct_DoseForm) String() string {
	return proto.EnumName(VirtualMedicinalProduct_DoseForm_name, int32(x))
}

func (VirtualMedicinalProduct_DoseForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 3}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `CONTROL_DRUG_CATEGORY`
type VirtualMedicinalProduct_ControledDrugCategory int32

const (
	VirtualMedicinalProduct_NO_CONTROLLED_DRUG_STATUS                     VirtualMedicinalProduct_ControledDrugCategory = 0
	VirtualMedicinalProduct_SCHEDULE_1_CD_LIC                             VirtualMedicinalProduct_ControledDrugCategory = 1
	VirtualMedicinalProduct_SCHEDULE_2_CD                                 VirtualMedicinalProduct_ControledDrugCategory = 2
	VirtualMedicinalProduct_SCHEDULE_2_CD_EXEMPT_SAFE_CUSTODY             VirtualMedicinalProduct_ControledDrugCategory = 3
	VirtualMedicinalProduct_SCHEDULE_3_CD_NO_REGISTER                     VirtualMedicinalProduct_ControledDrugCategory = 4
	VirtualMedicinalProduct_SCHEDULE_3_CD_NO_REGISTER_EXEMPT_SAFE_CUSTODY VirtualMedicinalProduct_ControledDrugCategory = 5
	VirtualMedicinalProduct_SCHEDULE_3_CD_NO_REGISTER_PHENOBARBITAL       VirtualMedicinalProduct_ControledDrugCategory = 6
	VirtualMedicinalProduct_SCHEDULE_3_CD_NO_REGISTER_TEMAZEPAM           VirtualMedicinalProduct_ControledDrugCategory = 7
	VirtualMedicinalProduct_SCHEDULE_4_CD_ANAB                            VirtualMedicinalProduct_ControledDrugCategory = 8
	VirtualMedicinalProduct_SCHEDULE_4_CD_BENZ                            VirtualMedicinalProduct_ControledDrugCategory = 9
	VirtualMedicinalProduct_SCHEDULE_5_CD_INV                             VirtualMedicinalProduct_ControledDrugCategory = 10
)

var VirtualMedicinalProduct_ControledDrugCategory_name = map[int32]string{
	0:  "NO_CONTROLLED_DRUG_STATUS",
	1:  "SCHEDULE_1_CD_LIC",
	2:  "SCHEDULE_2_CD",
	3:  "SCHEDULE_2_CD_EXEMPT_SAFE_CUSTODY",
	4:  "SCHEDULE_3_CD_NO_REGISTER",
	5:  "SCHEDULE_3_CD_NO_REGISTER_EXEMPT_SAFE_CUSTODY",
	6:  "SCHEDULE_3_CD_NO_REGISTER_PHENOBARBITAL",
	7:  "SCHEDULE_3_CD_NO_REGISTER_TEMAZEPAM",
	8:  "SCHEDULE_4_CD_ANAB",
	9:  "SCHEDULE_4_CD_BENZ",
	10: "SCHEDULE_5_CD_INV",
}

var VirtualMedicinalProduct_ControledDrugCategory_value = map[string]int32{
	"NO_CONTROLLED_DRUG_STATUS":                     0,
	"SCHEDULE_1_CD_LIC":                             1,
	"SCHEDULE_2_CD":                                 2,
	"SCHEDULE_2_CD_EXEMPT_SAFE_CUSTODY":             3,
	"SCHEDULE_3_CD_NO_REGISTER":                     4,
	"SCHEDULE_3_CD_NO_REGISTER_EXEMPT_SAFE_CUSTODY": 5,
	"SCHEDULE_3_CD_NO_REGISTER_PHENOBARBITAL":       6,
	"SCHEDULE_3_CD_NO_REGISTER_TEMAZEPAM":           7,
	"SCHEDULE_4_CD_ANAB":                            8,
	"SCHEDULE_4_CD_BENZ":                            9,
	"SCHEDULE_5_CD_INV":                             10,
}

func (x VirtualMedicinalProduct_ControledDrugCategory) String() string {
	return proto.EnumName(VirtualMedicinalProduct_ControledDrugCategory_name, int32(x))
}

func (VirtualMedicinalProduct_ControledDrugCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 4}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `BASIS_OF_STRNTH`
type VirtualMedicinalProduct_Ingredient_BasisOfStrength int32

const (
	VirtualMedicinalProduct_Ingredient_BASIS_NOT_SET       VirtualMedicinalProduct_Ingredient_BasisOfStrength = 0
	VirtualMedicinalProduct_Ingredient_BASED_ON_INGREDIENT VirtualMedicinalProduct_Ingredient_BasisOfStrength = 1
	VirtualMedicinalProduct_Ingredient_BASED_ON_BASE       VirtualMedicinalProduct_Ingredient_BasisOfStrength = 2
)

var VirtualMedicinalProduct_Ingredient_BasisOfStrength_name = map[int32]string{
	0: "BASIS_NOT_SET",
	1: "BASED_ON_INGREDIENT",
	2: "BASED_ON_BASE",
}

var VirtualMedicinalProduct_Ingredient_BasisOfStrength_value = map[string]int32{
	"BASIS_NOT_SET":       0,
	"BASED_ON_INGREDIENT": 1,
	"BASED_ON_BASE":       2,
}

func (x VirtualMedicinalProduct_Ingredient_BasisOfStrength) String() string {
	return proto.EnumName(VirtualMedicinalProduct_Ingredient_BasisOfStrength_name, int32(x))
}

func (VirtualMedicinalProduct_Ingredient_BasisOfStrength) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 0, 0}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `LICENSING_AUTHORITY`
type ActualMedicinalProduct_LicensingAuthority int32

const (
	ActualMedicinalProduct_NONE                         ActualMedicinalProduct_LicensingAuthority = 0
	ActualMedicinalProduct_MEDICINES_MHRA_EMA           ActualMedicinalProduct_LicensingAuthority = 1
	ActualMedicinalProduct_DEVICES                      ActualMedicinalProduct_LicensingAuthority = 2
	ActualMedicinalProduct_UNKNOWN                      ActualMedicinalProduct_LicensingAuthority = 3
	ActualMedicinalProduct_TRADITIONAL_HERBAL_MEDICINES ActualMedicinalProduct_LicensingAuthority = 4
)

var ActualMedicinalProduct_LicensingAuthority_name = map[int32]string{
	0: "NONE",
	1: "MEDICINES_MHRA_EMA",
	2: "DEVICES",
	3: "UNKNOWN",
	4: "TRADITIONAL_HERBAL_MEDICINES",
}

var ActualMedicinalProduct_LicensingAuthority_value = map[string]int32{
	"NONE":                         0,
	"MEDICINES_MHRA_EMA":           1,
	"DEVICES":                      2,
	"UNKNOWN":                      3,
	"TRADITIONAL_HERBAL_MEDICINES": 4,
}

func (x ActualMedicinalProduct_LicensingAuthority) String() string {
	return proto.EnumName(ActualMedicinalProduct_LicensingAuthority_name, int32(x))
}

func (ActualMedicinalProduct_LicensingAuthority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{2, 0}
}

// Nb These are hard coded values as mostly static but can change and are
// specified in f_lookup2_<release>.xml under `AVAILABILITY_RESTRICTION`
type ActualMedicinalProduct_AvailabilityRestriction int32

const (
	ActualMedicinalProduct_AVAILABILITY_NOT_SET      ActualMedicinalProduct_AvailabilityRestriction = 0
	ActualMedicinalProduct_NO_RESTRICTIONS           ActualMedicinalProduct_AvailabilityRestriction = 1
	ActualMedicinalProduct_RESTRICTED_AVAILABILITY   ActualMedicinalProduct_AvailabilityRestriction = 2
	ActualMedicinalProduct_INDIVIDUAL_PATIENT_SUPPLY ActualMedicinalProduct_AvailabilityRestriction = 3
	ActualMedicinalProduct_IMPORTED                  ActualMedicinalProduct_AvailabilityRestriction = 4
	ActualMedicinalProduct_CLINICAL_TRIAL            ActualMedicinalProduct_AvailabilityRestriction = 5
	ActualMedicinalProduct_SPECIAL                   ActualMedicinalProduct_AvailabilityRestriction = 6
	ActualMedicinalProduct_EXTEMP                    ActualMedicinalProduct_AvailabilityRestriction = 7
	ActualMedicinalProduct_HOSPITAL_ONLY             ActualMedicinalProduct_AvailabilityRestriction = 8
	ActualMedicinalProduct_NOT_AVAILABLE             ActualMedicinalProduct_AvailabilityRestriction = 9
)

var ActualMedicinalProduct_AvailabilityRestriction_name = map[int32]string{
	0: "AVAILABILITY_NOT_SET",
	1: "NO_RESTRICTIONS",
	2: "RESTRICTED_AVAILABILITY",
	3: "INDIVIDUAL_PATIENT_SUPPLY",
	4: "IMPORTED",
	5: "CLINICAL_TRIAL",
	6: "SPECIAL",
	7: "EXTEMP",
	8: "HOSPITAL_ONLY",
	9: "NOT_AVAILABLE",
}

var ActualMedicinalProduct_AvailabilityRestriction_value = map[string]int32{
	"AVAILABILITY_NOT_SET":      0,
	"NO_RESTRICTIONS":           1,
	"RESTRICTED_AVAILABILITY":   2,
	"INDIVIDUAL_PATIENT_SUPPLY": 3,
	"IMPORTED":                  4,
	"CLINICAL_TRIAL":            5,
	"SPECIAL":                   6,
	"EXTEMP":                    7,
	"HOSPITAL_ONLY":             8,
	"NOT_AVAILABLE":             9,
}

func (x ActualMedicinalProduct_AvailabilityRestriction) String() string {
	return proto.EnumName(ActualMedicinalProduct_AvailabilityRestriction_name, int32(x))
}

func (ActualMedicinalProduct_AvailabilityRestriction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{2, 1}
}

// This is an incomplete representation (with additions) of a Virtual
// Therapeutic Moiety as specified in the dm+d not all fields have been
// implemented or mapped as they are currently superfluous to the use case.
type VirtualTherapeuticMoiety struct {
	Id                       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VirtualMedicinalProducts []int64  `protobuf:"varint,3,rep,packed,name=virtual_medicinal_products,json=virtualMedicinalProducts,proto3" json:"virtual_medicinal_products,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *VirtualTherapeuticMoiety) Reset()         { *m = VirtualTherapeuticMoiety{} }
func (m *VirtualTherapeuticMoiety) String() string { return proto.CompactTextString(m) }
func (*VirtualTherapeuticMoiety) ProtoMessage()    {}
func (*VirtualTherapeuticMoiety) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{0}
}

func (m *VirtualTherapeuticMoiety) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualTherapeuticMoiety.Unmarshal(m, b)
}
func (m *VirtualTherapeuticMoiety) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualTherapeuticMoiety.Marshal(b, m, deterministic)
}
func (m *VirtualTherapeuticMoiety) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualTherapeuticMoiety.Merge(m, src)
}
func (m *VirtualTherapeuticMoiety) XXX_Size() int {
	return xxx_messageInfo_VirtualTherapeuticMoiety.Size(m)
}
func (m *VirtualTherapeuticMoiety) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualTherapeuticMoiety.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualTherapeuticMoiety proto.InternalMessageInfo

func (m *VirtualTherapeuticMoiety) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VirtualTherapeuticMoiety) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualTherapeuticMoiety) GetVirtualMedicinalProducts() []int64 {
	if m != nil {
		return m.VirtualMedicinalProducts
	}
	return nil
}

// This is an incomplete representation (with additions) of a Virtual Medicinal
// Product as specified in the dm+d not all fields have been implemented or
// mapped as they are currently superfluous to the use case.
type VirtualMedicinalProduct struct {
	Id                         int64                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VirtualTherapeuticMoietyId int64                                         `protobuf:"varint,2,opt,name=virtual_therapeutic_moiety_id,json=virtualTherapeuticMoietyId,proto3" json:"virtual_therapeutic_moiety_id,omitempty"`
	Name                       string                                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CombinationProduct         VirtualMedicinalProduct_CombinationProduct    `protobuf:"varint,4,opt,name=combination_product,json=combinationProduct,proto3,enum=dmd.VirtualMedicinalProduct_CombinationProduct" json:"combination_product,omitempty"`
	PrescribingStatus          VirtualMedicinalProduct_PrescribingStatus     `protobuf:"varint,5,opt,name=prescribing_status,json=prescribingStatus,proto3,enum=dmd.VirtualMedicinalProduct_PrescribingStatus" json:"prescribing_status,omitempty"`
	NonAvailability            VirtualMedicinalProduct_NonAvailability       `protobuf:"varint,6,opt,name=non_availability,json=nonAvailability,proto3,enum=dmd.VirtualMedicinalProduct_NonAvailability" json:"non_availability,omitempty"`
	DoseForm                   VirtualMedicinalProduct_DoseForm              `protobuf:"varint,7,opt,name=dose_form,json=doseForm,proto3,enum=dmd.VirtualMedicinalProduct_DoseForm" json:"dose_form,omitempty"`
	UnitDoseFormSize           float64                                       `protobuf:"fixed64,8,opt,name=unit_dose_form_size,json=unitDoseFormSize,proto3" json:"unit_dose_form_size,omitempty"`
	UnitDoseFormUnits          int64                                         `protobuf:"varint,9,opt,name=unit_dose_form_units,json=unitDoseFormUnits,proto3" json:"unit_dose_form_units,omitempty"`
	UnitDoseUnits              int64                                         `protobuf:"varint,10,opt,name=unit_dose_units,json=unitDoseUnits,proto3" json:"unit_dose_units,omitempty"`
	Ingredients                []*VirtualMedicinalProduct_Ingredient         `protobuf:"bytes,11,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	DrugForm                   []int64                                       `protobuf:"varint,12,rep,packed,name=drug_form,json=drugForm,proto3" json:"drug_form,omitempty"`
	DrugRoute                  []int64                                       `protobuf:"varint,13,rep,packed,name=drug_route,json=drugRoute,proto3" json:"drug_route,omitempty"`
	ControledDrugCategory      VirtualMedicinalProduct_ControledDrugCategory `protobuf:"varint,14,opt,name=controled_drug_category,json=controledDrugCategory,proto3,enum=dmd.VirtualMedicinalProduct_ControledDrugCategory" json:"controled_drug_category,omitempty"`
	ActualMedicinalProducts    []int64                                       `protobuf:"varint,15,rep,packed,name=actual_medicinal_products,json=actualMedicinalProducts,proto3" json:"actual_medicinal_products,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                      `json:"-"`
	XXX_unrecognized           []byte                                        `json:"-"`
	XXX_sizecache              int32                                         `json:"-"`
}

func (m *VirtualMedicinalProduct) Reset()         { *m = VirtualMedicinalProduct{} }
func (m *VirtualMedicinalProduct) String() string { return proto.CompactTextString(m) }
func (*VirtualMedicinalProduct) ProtoMessage()    {}
func (*VirtualMedicinalProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1}
}

func (m *VirtualMedicinalProduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMedicinalProduct.Unmarshal(m, b)
}
func (m *VirtualMedicinalProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMedicinalProduct.Marshal(b, m, deterministic)
}
func (m *VirtualMedicinalProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMedicinalProduct.Merge(m, src)
}
func (m *VirtualMedicinalProduct) XXX_Size() int {
	return xxx_messageInfo_VirtualMedicinalProduct.Size(m)
}
func (m *VirtualMedicinalProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMedicinalProduct.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMedicinalProduct proto.InternalMessageInfo

func (m *VirtualMedicinalProduct) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VirtualMedicinalProduct) GetVirtualTherapeuticMoietyId() int64 {
	if m != nil {
		return m.VirtualTherapeuticMoietyId
	}
	return 0
}

func (m *VirtualMedicinalProduct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualMedicinalProduct) GetCombinationProduct() VirtualMedicinalProduct_CombinationProduct {
	if m != nil {
		return m.CombinationProduct
	}
	return VirtualMedicinalProduct_NOT_SET
}

func (m *VirtualMedicinalProduct) GetPrescribingStatus() VirtualMedicinalProduct_PrescribingStatus {
	if m != nil {
		return m.PrescribingStatus
	}
	return VirtualMedicinalProduct_STATUS_NOT_SET
}

func (m *VirtualMedicinalProduct) GetNonAvailability() VirtualMedicinalProduct_NonAvailability {
	if m != nil {
		return m.NonAvailability
	}
	return VirtualMedicinalProduct_PRODUCTS_AVAILABLE
}

func (m *VirtualMedicinalProduct) GetDoseForm() VirtualMedicinalProduct_DoseForm {
	if m != nil {
		return m.DoseForm
	}
	return VirtualMedicinalProduct_FORM_NOT_SET
}

func (m *VirtualMedicinalProduct) GetUnitDoseFormSize() float64 {
	if m != nil {
		return m.UnitDoseFormSize
	}
	return 0
}

func (m *VirtualMedicinalProduct) GetUnitDoseFormUnits() int64 {
	if m != nil {
		return m.UnitDoseFormUnits
	}
	return 0
}

func (m *VirtualMedicinalProduct) GetUnitDoseUnits() int64 {
	if m != nil {
		return m.UnitDoseUnits
	}
	return 0
}

func (m *VirtualMedicinalProduct) GetIngredients() []*VirtualMedicinalProduct_Ingredient {
	if m != nil {
		return m.Ingredients
	}
	return nil
}

func (m *VirtualMedicinalProduct) GetDrugForm() []int64 {
	if m != nil {
		return m.DrugForm
	}
	return nil
}

func (m *VirtualMedicinalProduct) GetDrugRoute() []int64 {
	if m != nil {
		return m.DrugRoute
	}
	return nil
}

func (m *VirtualMedicinalProduct) GetControledDrugCategory() VirtualMedicinalProduct_ControledDrugCategory {
	if m != nil {
		return m.ControledDrugCategory
	}
	return VirtualMedicinalProduct_NO_CONTROLLED_DRUG_STATUS
}

func (m *VirtualMedicinalProduct) GetActualMedicinalProducts() []int64 {
	if m != nil {
		return m.ActualMedicinalProducts
	}
	return nil
}

// Representation of the a `Virtual Product Ingredient` from dm+d
type VirtualMedicinalProduct_Ingredient struct {
	Ingredient               int64                                              `protobuf:"varint,2,opt,name=ingredient,proto3" json:"ingredient,omitempty"`
	BasisOfStrength          VirtualMedicinalProduct_Ingredient_BasisOfStrength `protobuf:"varint,3,opt,name=basis_of_strength,json=basisOfStrength,proto3,enum=dmd.VirtualMedicinalProduct_Ingredient_BasisOfStrength" json:"basis_of_strength,omitempty"`
	BasisOfStrengthSubstance int64                                              `protobuf:"varint,4,opt,name=basis_of_strength_substance,json=basisOfStrengthSubstance,proto3" json:"basis_of_strength_substance,omitempty"`
	StrengthNumerator        float64                                            `protobuf:"fixed64,5,opt,name=strength_numerator,json=strengthNumerator,proto3" json:"strength_numerator,omitempty"`
	StrengthNumeratorUnit    int64                                              `protobuf:"varint,6,opt,name=strength_numerator_unit,json=strengthNumeratorUnit,proto3" json:"strength_numerator_unit,omitempty"`
	StrengthDenominator      float64                                            `protobuf:"fixed64,7,opt,name=strength_denominator,json=strengthDenominator,proto3" json:"strength_denominator,omitempty"`
	StrengthDenominatorUnit  int64                                              `protobuf:"varint,8,opt,name=strength_denominator_unit,json=strengthDenominatorUnit,proto3" json:"strength_denominator_unit,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                           `json:"-"`
	XXX_unrecognized         []byte                                             `json:"-"`
	XXX_sizecache            int32                                              `json:"-"`
}

func (m *VirtualMedicinalProduct_Ingredient) Reset()         { *m = VirtualMedicinalProduct_Ingredient{} }
func (m *VirtualMedicinalProduct_Ingredient) String() string { return proto.CompactTextString(m) }
func (*VirtualMedicinalProduct_Ingredient) ProtoMessage()    {}
func (*VirtualMedicinalProduct_Ingredient) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{1, 0}
}

func (m *VirtualMedicinalProduct_Ingredient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMedicinalProduct_Ingredient.Unmarshal(m, b)
}
func (m *VirtualMedicinalProduct_Ingredient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMedicinalProduct_Ingredient.Marshal(b, m, deterministic)
}
func (m *VirtualMedicinalProduct_Ingredient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMedicinalProduct_Ingredient.Merge(m, src)
}
func (m *VirtualMedicinalProduct_Ingredient) XXX_Size() int {
	return xxx_messageInfo_VirtualMedicinalProduct_Ingredient.Size(m)
}
func (m *VirtualMedicinalProduct_Ingredient) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMedicinalProduct_Ingredient.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMedicinalProduct_Ingredient proto.InternalMessageInfo

func (m *VirtualMedicinalProduct_Ingredient) GetIngredient() int64 {
	if m != nil {
		return m.Ingredient
	}
	return 0
}

func (m *VirtualMedicinalProduct_Ingredient) GetBasisOfStrength() VirtualMedicinalProduct_Ingredient_BasisOfStrength {
	if m != nil {
		return m.BasisOfStrength
	}
	return VirtualMedicinalProduct_Ingredient_BASIS_NOT_SET
}

func (m *VirtualMedicinalProduct_Ingredient) GetBasisOfStrengthSubstance() int64 {
	if m != nil {
		return m.BasisOfStrengthSubstance
	}
	return 0
}

func (m *VirtualMedicinalProduct_Ingredient) GetStrengthNumerator() float64 {
	if m != nil {
		return m.StrengthNumerator
	}
	return 0
}

func (m *VirtualMedicinalProduct_Ingredient) GetStrengthNumeratorUnit() int64 {
	if m != nil {
		return m.StrengthNumeratorUnit
	}
	return 0
}

func (m *VirtualMedicinalProduct_Ingredient) GetStrengthDenominator() float64 {
	if m != nil {
		return m.StrengthDenominator
	}
	return 0
}

func (m *VirtualMedicinalProduct_Ingredient) GetStrengthDenominatorUnit() int64 {
	if m != nil {
		return m.StrengthDenominatorUnit
	}
	return 0
}

// This is an incomplete representation of a Actual Medicinal Product as
// specified in the dm+d not all fields have been implemented or mapped as they
// are currently superfluous to the use case.
type ActualMedicinalProduct struct {
	Id                        int64                                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VirtualMedicinalProductId int64                                          `protobuf:"varint,2,opt,name=virtual_medicinal_product_id,json=virtualMedicinalProductId,proto3" json:"virtual_medicinal_product_id,omitempty"`
	Name                      string                                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description               string                                         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Supplier                  int64                                          `protobuf:"varint,5,opt,name=supplier,proto3" json:"supplier,omitempty"`
	LicensingAuthority        ActualMedicinalProduct_LicensingAuthority      `protobuf:"varint,6,opt,name=licensing_authority,json=licensingAuthority,proto3,enum=dmd.ActualMedicinalProduct_LicensingAuthority" json:"licensing_authority,omitempty"`
	AvailabilityRestriction   ActualMedicinalProduct_AvailabilityRestriction `protobuf:"varint,7,opt,name=availability_restriction,json=availabilityRestriction,proto3,enum=dmd.ActualMedicinalProduct_AvailabilityRestriction" json:"availability_restriction,omitempty"`
	LicensedRoute             []int64                                        `protobuf:"varint,8,rep,packed,name=licensed_route,json=licensedRoute,proto3" json:"licensed_route,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                       `json:"-"`
	XXX_unrecognized          []byte                                         `json:"-"`
	XXX_sizecache             int32                                          `json:"-"`
}

func (m *ActualMedicinalProduct) Reset()         { *m = ActualMedicinalProduct{} }
func (m *ActualMedicinalProduct) String() string { return proto.CompactTextString(m) }
func (*ActualMedicinalProduct) ProtoMessage()    {}
func (*ActualMedicinalProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{2}
}

func (m *ActualMedicinalProduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActualMedicinalProduct.Unmarshal(m, b)
}
func (m *ActualMedicinalProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActualMedicinalProduct.Marshal(b, m, deterministic)
}
func (m *ActualMedicinalProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualMedicinalProduct.Merge(m, src)
}
func (m *ActualMedicinalProduct) XXX_Size() int {
	return xxx_messageInfo_ActualMedicinalProduct.Size(m)
}
func (m *ActualMedicinalProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualMedicinalProduct.DiscardUnknown(m)
}

var xxx_messageInfo_ActualMedicinalProduct proto.InternalMessageInfo

func (m *ActualMedicinalProduct) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActualMedicinalProduct) GetVirtualMedicinalProductId() int64 {
	if m != nil {
		return m.VirtualMedicinalProductId
	}
	return 0
}

func (m *ActualMedicinalProduct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActualMedicinalProduct) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ActualMedicinalProduct) GetSupplier() int64 {
	if m != nil {
		return m.Supplier
	}
	return 0
}

func (m *ActualMedicinalProduct) GetLicensingAuthority() ActualMedicinalProduct_LicensingAuthority {
	if m != nil {
		return m.LicensingAuthority
	}
	return ActualMedicinalProduct_NONE
}

func (m *ActualMedicinalProduct) GetAvailabilityRestriction() ActualMedicinalProduct_AvailabilityRestriction {
	if m != nil {
		return m.AvailabilityRestriction
	}
	return ActualMedicinalProduct_AVAILABILITY_NOT_SET
}

func (m *ActualMedicinalProduct) GetLicensedRoute() []int64 {
	if m != nil {
		return m.LicensedRoute
	}
	return nil
}

// This is a representation of the Medication Types Spec Data Specifications as
// described in the UKDrugsBonusFiles in the SNOMEDCT UK Drug distribution in
// the `UK_SNOMED_CT_Medication_Types_Spec_Data_Specifications_<version>.xml`
// file.
type MedicationTypeAttributes struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Usage                string   `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	RequiredAttributes   []string `protobuf:"bytes,4,rep,name=required_attributes,json=requiredAttributes,proto3" json:"required_attributes,omitempty"`
	OptionalAttributes   []string `protobuf:"bytes,5,rep,name=optional_attributes,json=optionalAttributes,proto3" json:"optional_attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedicationTypeAttributes) Reset()         { *m = MedicationTypeAttributes{} }
func (m *MedicationTypeAttributes) String() string { return proto.CompactTextString(m) }
func (*MedicationTypeAttributes) ProtoMessage()    {}
func (*MedicationTypeAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{3}
}

func (m *MedicationTypeAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicationTypeAttributes.Unmarshal(m, b)
}
func (m *MedicationTypeAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicationTypeAttributes.Marshal(b, m, deterministic)
}
func (m *MedicationTypeAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicationTypeAttributes.Merge(m, src)
}
func (m *MedicationTypeAttributes) XXX_Size() int {
	return xxx_messageInfo_MedicationTypeAttributes.Size(m)
}
func (m *MedicationTypeAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicationTypeAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MedicationTypeAttributes proto.InternalMessageInfo

func (m *MedicationTypeAttributes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MedicationTypeAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MedicationTypeAttributes) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *MedicationTypeAttributes) GetRequiredAttributes() []string {
	if m != nil {
		return m.RequiredAttributes
	}
	return nil
}

func (m *MedicationTypeAttributes) GetOptionalAttributes() []string {
	if m != nil {
		return m.OptionalAttributes
	}
	return nil
}

// This is a representation of the Medication Types Form Route Pairs as
// described in the UKDrugsBonusFiles in the SNOMEDCT UK Drug distribution in
// the `UK_SNOMED_CT_Medication_Types_Form_Route_Pairs_<version>.xml` file.
type MedicationTypeMapping struct {
	Id                   int32                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FormRoutePairs       []*MedicationTypeMapping_FormRoutePair `protobuf:"bytes,3,rep,name=form_route_pairs,json=formRoutePairs,proto3" json:"form_route_pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *MedicationTypeMapping) Reset()         { *m = MedicationTypeMapping{} }
func (m *MedicationTypeMapping) String() string { return proto.CompactTextString(m) }
func (*MedicationTypeMapping) ProtoMessage()    {}
func (*MedicationTypeMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{4}
}

func (m *MedicationTypeMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicationTypeMapping.Unmarshal(m, b)
}
func (m *MedicationTypeMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicationTypeMapping.Marshal(b, m, deterministic)
}
func (m *MedicationTypeMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicationTypeMapping.Merge(m, src)
}
func (m *MedicationTypeMapping) XXX_Size() int {
	return xxx_messageInfo_MedicationTypeMapping.Size(m)
}
func (m *MedicationTypeMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicationTypeMapping.DiscardUnknown(m)
}

var xxx_messageInfo_MedicationTypeMapping proto.InternalMessageInfo

func (m *MedicationTypeMapping) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MedicationTypeMapping) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MedicationTypeMapping) GetFormRoutePairs() []*MedicationTypeMapping_FormRoutePair {
	if m != nil {
		return m.FormRoutePairs
	}
	return nil
}

type MedicationTypeMapping_FormRoutePair struct {
	Form                 int64    `protobuf:"varint,1,opt,name=form,proto3" json:"form,omitempty"`
	Route                int64    `protobuf:"varint,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedicationTypeMapping_FormRoutePair) Reset()         { *m = MedicationTypeMapping_FormRoutePair{} }
func (m *MedicationTypeMapping_FormRoutePair) String() string { return proto.CompactTextString(m) }
func (*MedicationTypeMapping_FormRoutePair) ProtoMessage()    {}
func (*MedicationTypeMapping_FormRoutePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8d59e5cbe9074f2, []int{4, 0}
}

func (m *MedicationTypeMapping_FormRoutePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicationTypeMapping_FormRoutePair.Unmarshal(m, b)
}
func (m *MedicationTypeMapping_FormRoutePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicationTypeMapping_FormRoutePair.Marshal(b, m, deterministic)
}
func (m *MedicationTypeMapping_FormRoutePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicationTypeMapping_FormRoutePair.Merge(m, src)
}
func (m *MedicationTypeMapping_FormRoutePair) XXX_Size() int {
	return xxx_messageInfo_MedicationTypeMapping_FormRoutePair.Size(m)
}
func (m *MedicationTypeMapping_FormRoutePair) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicationTypeMapping_FormRoutePair.DiscardUnknown(m)
}

var xxx_messageInfo_MedicationTypeMapping_FormRoutePair proto.InternalMessageInfo

func (m *MedicationTypeMapping_FormRoutePair) GetForm() int64 {
	if m != nil {
		return m.Form
	}
	return 0
}

func (m *MedicationTypeMapping_FormRoutePair) GetRoute() int64 {
	if m != nil {
		return m.Route
	}
	return 0
}

func init() {
	proto.RegisterEnum("dmd.VirtualMedicinalProduct_CombinationProduct", VirtualMedicinalProduct_CombinationProduct_name, VirtualMedicinalProduct_CombinationProduct_value)
	proto.RegisterEnum("dmd.VirtualMedicinalProduct_PrescribingStatus", VirtualMedicinalProduct_PrescribingStatus_name, VirtualMedicinalProduct_PrescribingStatus_value)
	proto.RegisterEnum("dmd.VirtualMedicinalProduct_NonAvailability", VirtualMedicinalProduct_NonAvailability_name, VirtualMedicinalProduct_NonAvailability_value)
	proto.RegisterEnum("dmd.VirtualMedicinalProduct_DoseForm", VirtualMedicinalProduct_DoseForm_name, VirtualMedicinalProduct_DoseForm_value)
	proto.RegisterEnum("dmd.VirtualMedicinalProduct_ControledDrugCategory", VirtualMedicinalProduct_ControledDrugCategory_name, VirtualMedicinalProduct_ControledDrugCategory_value)
	proto.RegisterEnum("dmd.VirtualMedicinalProduct_Ingredient_BasisOfStrength", VirtualMedicinalProduct_Ingredient_BasisOfStrength_name, VirtualMedicinalProduct_Ingredient_BasisOfStrength_value)
	proto.RegisterEnum("dmd.ActualMedicinalProduct_LicensingAuthority", ActualMedicinalProduct_LicensingAuthority_name, ActualMedicinalProduct_LicensingAuthority_value)
	proto.RegisterEnum("dmd.ActualMedicinalProduct_AvailabilityRestriction", ActualMedicinalProduct_AvailabilityRestriction_name, ActualMedicinalProduct_AvailabilityRestriction_value)
	proto.RegisterType((*VirtualTherapeuticMoiety)(nil), "dmd.VirtualTherapeuticMoiety")
	proto.RegisterType((*VirtualMedicinalProduct)(nil), "dmd.VirtualMedicinalProduct")
	proto.RegisterType((*VirtualMedicinalProduct_Ingredient)(nil), "dmd.VirtualMedicinalProduct.Ingredient")
	proto.RegisterType((*ActualMedicinalProduct)(nil), "dmd.ActualMedicinalProduct")
	proto.RegisterType((*MedicationTypeAttributes)(nil), "dmd.MedicationTypeAttributes")
	proto.RegisterType((*MedicationTypeMapping)(nil), "dmd.MedicationTypeMapping")
	proto.RegisterType((*MedicationTypeMapping_FormRoutePair)(nil), "dmd.MedicationTypeMapping.FormRoutePair")
}

func init() { proto.RegisterFile("dmd.proto", fileDescriptor_a8d59e5cbe9074f2) }

var fileDescriptor_a8d59e5cbe9074f2 = []byte{
	// 1631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0x8e, 0x24, 0xff, 0x48, 0xc7, 0x89, 0x4d, 0x8f, 0xe3, 0x98, 0x71, 0x36, 0xad, 0x56, 0x45,
	0x1a, 0x15, 0x4d, 0x9c, 0xc6, 0xe9, 0x0f, 0x5a, 0xb4, 0x28, 0x46, 0xe4, 0x24, 0x1e, 0x94, 0x1c,
	0x72, 0x87, 0x94, 0x76, 0x13, 0xa0, 0x98, 0xd2, 0x22, 0xe3, 0xb0, 0x90, 0x48, 0x95, 0xa4, 0x16,
	0xc8, 0xa2, 0xef, 0xd0, 0xb7, 0xe9, 0x75, 0x6f, 0x7a, 0xd3, 0xf7, 0xe8, 0x2b, 0x14, 0xbd, 0x2c,
	0x66, 0x28, 0xea, 0xc7, 0x92, 0xdc, 0xbd, 0x23, 0xcf, 0xf9, 0xbe, 0xf3, 0x37, 0x73, 0x0e, 0x0f,
	0xa1, 0x15, 0x8e, 0xc3, 0x8b, 0x49, 0x96, 0x16, 0x29, 0x6a, 0x84, 0xe3, 0xb0, 0xf3, 0x57, 0xd0,
	0x07, 0x71, 0x56, 0x4c, 0x83, 0x91, 0xff, 0x29, 0xca, 0x82, 0x49, 0x34, 0x2d, 0xe2, 0xa1, 0x9d,
	0xc6, 0x51, 0xf1, 0x19, 0x1d, 0x42, 0x3d, 0x0e, 0xf5, 0x5a, 0xbb, 0xd6, 0x6d, 0xf0, 0x7a, 0x1c,
	0x22, 0x04, 0x3b, 0x49, 0x30, 0x8e, 0xf4, 0x7a, 0xbb, 0xd6, 0x6d, 0x71, 0xf5, 0x8c, 0x7e, 0x0b,
	0xe7, 0xdf, 0x96, 0x7c, 0x31, 0x8e, 0xc2, 0x78, 0x18, 0x27, 0xc1, 0x48, 0x4c, 0xb2, 0x34, 0x9c,
	0x0e, 0x8b, 0x5c, 0x6f, 0xb4, 0x1b, 0xdd, 0x06, 0xd7, 0x67, 0x08, 0xbb, 0x02, 0xb8, 0x33, 0x7d,
	0xe7, 0x1f, 0x08, 0xce, 0x06, 0x9b, 0x95, 0x6b, 0xde, 0x31, 0x3c, 0xad, 0x3c, 0x15, 0x8b, 0x50,
	0xc5, 0x58, 0xc5, 0x2a, 0xe2, 0x50, 0x85, 0xd5, 0xe0, 0x55, 0x38, 0x6b, 0xe9, 0xd0, 0x45, 0x02,
	0x8d, 0xa5, 0x04, 0xfe, 0x04, 0x27, 0xc3, 0x74, 0x7c, 0x1d, 0x27, 0x41, 0x11, 0xa7, 0x49, 0x15,
	0xba, 0xbe, 0xd3, 0xae, 0x75, 0x0f, 0x2f, 0x5f, 0x5d, 0xc8, 0x72, 0x6d, 0x89, 0xf0, 0xc2, 0x58,
	0xf0, 0x66, 0x22, 0x8e, 0x86, 0x6b, 0x32, 0xf4, 0x47, 0x40, 0x93, 0x2c, 0xca, 0x87, 0x59, 0x7c,
	0x1d, 0x27, 0x37, 0x22, 0x2f, 0x82, 0x62, 0x9a, 0xeb, 0xbb, 0xca, 0xc1, 0xc5, 0x9d, 0x0e, 0xdc,
	0x05, 0xcd, 0x53, 0x2c, 0x7e, 0x3c, 0xb9, 0x2d, 0x42, 0x5f, 0x83, 0x96, 0xa4, 0x89, 0x08, 0xbe,
	0x0d, 0xe2, 0x51, 0x70, 0x1d, 0x8f, 0xe2, 0xe2, 0xb3, 0xbe, 0xa7, 0x8c, 0xbf, 0xb8, 0xd3, 0x38,
	0x4b, 0x13, 0xbc, 0xc4, 0xe1, 0x47, 0xc9, 0xaa, 0x00, 0xf5, 0xa0, 0x15, 0xa6, 0x79, 0x24, 0x3e,
	0xa6, 0xd9, 0x58, 0xdf, 0x57, 0x16, 0x9f, 0xdd, 0x69, 0xd1, 0x4c, 0xf3, 0xe8, 0x6d, 0x9a, 0x8d,
	0x79, 0x33, 0x9c, 0x3d, 0xa1, 0x97, 0x70, 0x32, 0x4d, 0xe2, 0x42, 0xcc, 0x0d, 0x89, 0x3c, 0xfe,
	0x2e, 0xd2, 0x9b, 0xed, 0x5a, 0xb7, 0xc6, 0x35, 0xa9, 0xaa, 0x48, 0x5e, 0xfc, 0x5d, 0x84, 0x5e,
	0xc1, 0xc3, 0x5b, 0x70, 0xf9, 0x9a, 0xeb, 0x2d, 0x75, 0xb4, 0xc7, 0xcb, 0xf8, 0xbe, 0x54, 0xa0,
	0x1f, 0xc3, 0xd1, 0x82, 0x50, 0x62, 0x41, 0x61, 0x1f, 0x54, 0xd8, 0x12, 0x47, 0xe1, 0x20, 0x4e,
	0x6e, 0xb2, 0x28, 0x8c, 0xa3, 0xa4, 0xc8, 0xf5, 0x83, 0x76, 0xa3, 0x7b, 0x70, 0xf9, 0xfc, 0xce,
	0x6c, 0xe8, 0x1c, 0xcf, 0x97, 0xb9, 0xe8, 0x09, 0xb4, 0xc2, 0x6c, 0x7a, 0x53, 0x96, 0xe5, 0xbe,
	0xba, 0xe0, 0x4d, 0x29, 0x50, 0xf9, 0x3e, 0x05, 0x50, 0xca, 0x2c, 0x9d, 0x16, 0x91, 0xfe, 0x40,
	0x69, 0x15, 0x9c, 0x4b, 0x01, 0xfa, 0x33, 0x9c, 0x0d, 0xd3, 0xa4, 0xc8, 0xd2, 0x51, 0x14, 0x0a,
	0x05, 0x1c, 0x06, 0x45, 0x74, 0x93, 0x66, 0x9f, 0xf5, 0x43, 0x55, 0xe0, 0xcb, 0xff, 0x73, 0xe1,
	0x66, 0x5c, 0x33, 0x9b, 0xde, 0x18, 0x33, 0x26, 0x3f, 0x1d, 0x6e, 0x12, 0xa3, 0xdf, 0xc0, 0xe3,
	0x60, 0xb8, 0xad, 0x31, 0x8f, 0x54, 0x64, 0x67, 0x25, 0x60, 0xad, 0x2f, 0xcf, 0xff, 0xdb, 0x00,
	0x58, 0xe4, 0x8f, 0x7e, 0x00, 0xb0, 0xa8, 0xc0, 0xac, 0xcf, 0x96, 0x24, 0x68, 0x08, 0xc7, 0xd7,
	0x41, 0x1e, 0xe7, 0x22, 0xfd, 0x28, 0xf2, 0x22, 0x8b, 0x92, 0x9b, 0xe2, 0x93, 0x6a, 0xb2, 0xc3,
	0xcb, 0x5f, 0x7d, 0xcf, 0x1a, 0x5f, 0xf4, 0xa4, 0x01, 0xe7, 0xa3, 0x37, 0xa3, 0xf3, 0xa3, 0xeb,
	0x55, 0x01, 0xfa, 0x1d, 0x3c, 0x59, 0x73, 0x22, 0xf2, 0xe9, 0x75, 0x5e, 0x04, 0xc9, 0x30, 0x52,
	0x0d, 0xdb, 0xe0, 0xfa, 0x2d, 0x96, 0x57, 0xe9, 0xd1, 0x4b, 0x40, 0x73, 0x56, 0x32, 0x1d, 0x47,
	0x59, 0x50, 0xa4, 0x99, 0xea, 0xc2, 0x1a, 0x3f, 0xae, 0x34, 0xac, 0x52, 0xa0, 0x5f, 0xc2, 0xd9,
	0x3a, 0x5c, 0xdd, 0x30, 0xd5, 0x5c, 0x0d, 0x7e, 0xba, 0xc6, 0x91, 0x37, 0x0d, 0xbd, 0x86, 0x87,
	0x73, 0x5e, 0x18, 0x25, 0xe9, 0x58, 0x0e, 0x83, 0x34, 0x53, 0xfd, 0x53, 0xe3, 0x27, 0x95, 0xce,
	0x5c, 0xa8, 0xe4, 0x41, 0x6d, 0xa2, 0x94, 0xce, 0x9a, 0xca, 0xd9, 0xd9, 0x06, 0x9e, 0x74, 0xd7,
	0x71, 0xe1, 0xe8, 0x56, 0xe1, 0xd0, 0x31, 0x3c, 0xe8, 0x61, 0x8f, 0x7a, 0x82, 0x39, 0xbe, 0xf0,
	0x88, 0xaf, 0xdd, 0x43, 0x67, 0x70, 0xd2, 0xc3, 0x1e, 0x31, 0x85, 0xc3, 0x04, 0x65, 0xef, 0x38,
	0x31, 0x29, 0x61, 0xbe, 0x56, 0x9b, 0x61, 0x4b, 0x85, 0x7c, 0xd0, 0xea, 0x9d, 0x01, 0xa0, 0xf5,
	0xb9, 0x86, 0x0e, 0x60, 0x7f, 0xc5, 0x9c, 0xe1, 0xd8, 0x3d, 0xca, 0xb0, 0x4f, 0x1d, 0x26, 0x5c,
	0xee, 0x98, 0x7d, 0x43, 0x9a, 0x3b, 0x87, 0x47, 0x86, 0x63, 0xbb, 0x0e, 0x23, 0xcc, 0x17, 0x0e,
	0xb3, 0xde, 0xcf, 0x75, 0xf5, 0xce, 0x3f, 0xeb, 0x70, 0xbc, 0x36, 0xcf, 0x10, 0x82, 0x43, 0xcf,
	0xc7, 0x7e, 0x7f, 0x39, 0xda, 0x2f, 0xe1, 0xe9, 0x00, 0x5b, 0xd4, 0x14, 0xd8, 0x13, 0x2e, 0x27,
	0x9e, 0xc1, 0x69, 0x0f, 0xf7, 0x2c, 0xb2, 0xe4, 0xe8, 0x87, 0xf0, 0x84, 0xb2, 0x12, 0x44, 0x99,
	0x60, 0x57, 0x12, 0x48, 0x6d, 0xcc, 0xdf, 0x0b, 0x03, 0x73, 0xa2, 0xd5, 0xd1, 0x63, 0x38, 0x55,
	0xfe, 0xb1, 0xed, 0xae, 0xd8, 0xd0, 0x1a, 0xe8, 0x11, 0x20, 0x46, 0x06, 0x84, 0x8b, 0xb9, 0x93,
	0x81, 0xed, 0x6a, 0x3b, 0x32, 0x78, 0x19, 0x03, 0x27, 0x86, 0x63, 0xdb, 0x84, 0x99, 0x64, 0xae,
	0xdb, 0x45, 0x3f, 0x83, 0x17, 0x03, 0xdb, 0x15, 0xb7, 0xf5, 0x3d, 0x8e, 0x99, 0x59, 0x86, 0xde,
	0xa3, 0x0e, 0xf9, 0xaa, 0x4f, 0x07, 0xd8, 0x92, 0x95, 0xdd, 0x43, 0x2f, 0xa0, 0xbb, 0x89, 0xe1,
	0x62, 0x5f, 0x96, 0x5e, 0xf8, 0x1c, 0x53, 0x46, 0xd9, 0x3b, 0xc1, 0xc9, 0x57, 0xda, 0x3e, 0xfa,
	0x09, 0x3c, 0xdb, 0x84, 0x66, 0x8e, 0x70, 0xfb, 0x3d, 0x8b, 0x7a, 0x57, 0xc4, 0x14, 0x9e, 0x4b,
	0x0c, 0xad, 0xd9, 0x21, 0x70, 0x74, 0x6b, 0x72, 0xcb, 0x8c, 0x66, 0xa5, 0xf1, 0x04, 0x1e, 0x60,
	0x6a, 0xa9, 0x4c, 0xef, 0xc9, 0x8c, 0xe6, 0x72, 0x69, 0x7a, 0xa1, 0xab, 0x75, 0x18, 0x34, 0xab,
	0x49, 0x8a, 0x34, 0xb8, 0xff, 0xd6, 0xe1, 0xf6, 0xd2, 0x11, 0xdc, 0x87, 0xa6, 0x49, 0x3d, 0x83,
	0x13, 0x9f, 0x68, 0x35, 0x74, 0x08, 0x60, 0x38, 0xcc, 0xa7, 0xac, 0xef, 0xf4, 0x3d, 0xad, 0x2e,
	0x0f, 0x4d, 0x99, 0x73, 0x5d, 0x8b, 0x1a, 0x65, 0x55, 0x3b, 0xff, 0xa9, 0xc3, 0xe9, 0xc6, 0xf1,
	0x84, 0x9e, 0xc2, 0x63, 0xe6, 0x08, 0x69, 0x80, 0x3b, 0x96, 0x45, 0x4c, 0x61, 0xf2, 0xfe, 0x3b,
	0x51, 0x9e, 0xba, 0x76, 0x0f, 0x9d, 0xc2, 0xb1, 0x67, 0x5c, 0x11, 0xb3, 0x6f, 0x11, 0xf1, 0x5a,
	0x18, 0xa6, 0xb0, 0xa8, 0x51, 0xde, 0xcc, 0xb9, 0xf8, 0x52, 0x18, 0xa6, 0x56, 0x47, 0xcf, 0xe0,
	0xcb, 0x15, 0x91, 0x20, 0xdf, 0x10, 0xdb, 0xf5, 0x85, 0x87, 0xdf, 0x12, 0x61, 0xf4, 0x3d, 0xdf,
	0x31, 0xdf, 0x6b, 0x0d, 0xe9, 0x6f, 0x0e, 0x7b, 0x23, 0x61, 0xcc, 0x11, 0x9c, 0xbc, 0xa3, 0x9e,
	0x4f, 0xb8, 0xb6, 0x83, 0x5e, 0xc3, 0xcb, 0xad, 0xea, 0x8d, 0x16, 0x77, 0xd1, 0x4f, 0xe1, 0xf9,
	0x76, 0x8a, 0x7b, 0x45, 0x98, 0xd3, 0xc3, 0xbc, 0x47, 0x7d, 0x6c, 0x69, 0x7b, 0xe8, 0x39, 0xfc,
	0x68, 0x3b, 0xd8, 0x27, 0x36, 0xfe, 0x40, 0x5c, 0x6c, 0x6b, 0xfb, 0xf2, 0xd4, 0xe6, 0xc0, 0x9f,
	0x4b, 0x20, 0x66, 0xb8, 0xa7, 0x35, 0xd7, 0xe5, 0x3d, 0xc2, 0x3e, 0x68, 0xad, 0x95, 0x42, 0xfd,
	0x42, 0xca, 0x29, 0x1b, 0x68, 0xd0, 0xf9, 0xdb, 0x1e, 0x3c, 0xc2, 0xc3, 0xef, 0xb5, 0x41, 0xfd,
	0x1e, 0xbe, 0xd8, 0xba, 0xab, 0x2d, 0x16, 0xa8, 0xc7, 0x5b, 0xb6, 0xb5, 0x2d, 0xfb, 0x53, 0x1b,
	0x0e, 0x42, 0xd5, 0xd5, 0x13, 0x39, 0x2f, 0xd4, 0x18, 0x6e, 0xf1, 0x65, 0x11, 0x3a, 0x87, 0x66,
	0x3e, 0x9d, 0x4c, 0x46, 0x71, 0x54, 0xce, 0xdb, 0x06, 0x9f, 0xbf, 0x23, 0x01, 0x27, 0xa3, 0x78,
	0x18, 0x25, 0xb9, 0xdc, 0x8c, 0x82, 0x69, 0xf1, 0x29, 0xcd, 0x16, 0xfb, 0x4b, 0xb9, 0x1c, 0x6d,
	0x4e, 0xee, 0xc2, 0xaa, 0x68, 0xb8, 0x62, 0x71, 0x34, 0x5a, 0x93, 0xa1, 0x04, 0xf4, 0xe5, 0xcd,
	0x48, 0x64, 0x51, 0x5e, 0x64, 0xf1, 0x50, 0xc5, 0x5a, 0xee, 0x34, 0x6f, 0xee, 0xf2, 0xb2, 0xb2,
	0x21, 0x2d, 0xa8, 0xfc, 0x2c, 0xd8, 0xac, 0x40, 0xcf, 0xe0, 0xb0, 0x8c, 0x22, 0x0a, 0x67, 0x4b,
	0x40, 0x53, 0x7d, 0x6a, 0x1f, 0x54, 0x52, 0xb5, 0x08, 0x74, 0x32, 0x40, 0xeb, 0x09, 0xa0, 0x26,
	0xec, 0x30, 0x87, 0xc9, 0xd6, 0x7d, 0x04, 0xc8, 0x26, 0x26, 0x35, 0x28, 0x23, 0x9e, 0xb0, 0xaf,
	0x38, 0x16, 0xc4, 0xc6, 0x5a, 0x4d, 0xce, 0x61, 0x93, 0x0c, 0xa8, 0x41, 0x64, 0x1f, 0x1e, 0xc0,
	0x7e, 0x9f, 0xfd, 0x81, 0x39, 0x5f, 0x33, 0xad, 0x81, 0xda, 0xf0, 0x85, 0xcf, 0xb1, 0x49, 0xe5,
	0x48, 0xc6, 0x96, 0xb8, 0x22, 0xbc, 0x87, 0x2d, 0x31, 0x37, 0xa2, 0xed, 0x74, 0xfe, 0x5d, 0x83,
	0xb3, 0x2d, 0xf9, 0x20, 0x1d, 0x1e, 0xce, 0xa6, 0x03, 0xb5, 0xa8, 0xff, 0x7e, 0x69, 0x14, 0x9c,
	0xc0, 0x91, 0xba, 0xc1, 0x9e, 0xcf, 0xa9, 0x21, 0x8d, 0x7b, 0x5a, 0x0d, 0x3d, 0x81, 0xb3, 0x4a,
	0x22, 0xc7, 0xe4, 0x12, 0x53, 0xab, 0xcb, 0x06, 0xa4, 0xcc, 0xa4, 0x03, 0x6a, 0xf6, 0xb1, 0x35,
	0x9f, 0x78, 0x5e, 0xdf, 0x75, 0x2d, 0xd9, 0x9f, 0xf7, 0xa1, 0x49, 0x6d, 0xd7, 0xe1, 0x3e, 0x31,
	0xb5, 0x1d, 0x39, 0x4b, 0x0c, 0x8b, 0x32, 0x6a, 0x60, 0x4b, 0xf8, 0x9c, 0x62, 0x4b, 0xdb, 0x95,
	0x79, 0xc9, 0x61, 0x47, 0x55, 0x3f, 0x01, 0xec, 0x91, 0x6f, 0x7c, 0x62, 0xbb, 0xda, 0xbe, 0x1c,
	0x0a, 0x57, 0x8e, 0xe7, 0xca, 0x4e, 0x53, 0x9f, 0x17, 0xad, 0x29, 0x45, 0xab, 0xa3, 0xad, 0xd5,
	0xf9, 0x7b, 0x0d, 0x74, 0x75, 0x90, 0xea, 0x0b, 0xe6, 0x7f, 0x9e, 0x44, 0xb8, 0x28, 0xb2, 0xf8,
	0x7a, 0x5a, 0x44, 0xf9, 0x52, 0x4f, 0xb4, 0xb6, 0xfe, 0xd3, 0x3c, 0x84, 0xdd, 0x69, 0x1e, 0xdc,
	0x54, 0xf7, 0xbc, 0x7c, 0x41, 0xaf, 0xe0, 0x24, 0x8b, 0xfe, 0x32, 0x8d, 0xb3, 0x28, 0x14, 0xc1,
	0xdc, 0xa0, 0xbe, 0xd3, 0x6e, 0x74, 0x5b, 0x1c, 0x55, 0xaa, 0x25, 0x57, 0xaf, 0xe0, 0x24, 0x55,
	0x1d, 0x10, 0x8c, 0x96, 0x09, 0xbb, 0x25, 0xa1, 0x52, 0x2d, 0x08, 0x9d, 0x7f, 0xd5, 0xe0, 0x74,
	0x35, 0x70, 0x3b, 0x98, 0x4c, 0xe2, 0xe4, 0x66, 0x29, 0xea, 0xdd, 0xad, 0x51, 0x73, 0xd0, 0xd4,
	0xc6, 0xac, 0x6e, 0x9d, 0x98, 0x04, 0x71, 0x56, 0xfe, 0x7f, 0x1d, 0x5c, 0x76, 0xd5, 0x0d, 0xdf,
	0x68, 0xf9, 0x42, 0xed, 0xeb, 0x92, 0xe1, 0x06, 0x71, 0xc6, 0x0f, 0x3f, 0x2e, 0xbf, 0xe6, 0xe7,
	0xbf, 0x86, 0x07, 0x2b, 0x00, 0xe9, 0x58, 0xed, 0xbd, 0xe5, 0x50, 0x51, 0xcf, 0xb2, 0x5c, 0xe5,
	0x4d, 0x2f, 0xe7, 0x47, 0xf9, 0xd2, 0xdb, 0xfd, 0x20, 0xff, 0x2f, 0xaf, 0xf7, 0xd4, 0xbf, 0xe6,
	0x9b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x1e, 0xd3, 0x54, 0x78, 0x0e, 0x00, 0x00,
}
