// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package dmd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MedicationString struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedicationString) Reset()         { *m = MedicationString{} }
func (m *MedicationString) String() string { return proto.CompactTextString(m) }
func (*MedicationString) ProtoMessage()    {}
func (*MedicationString) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *MedicationString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicationString.Unmarshal(m, b)
}
func (m *MedicationString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicationString.Marshal(b, m, deterministic)
}
func (m *MedicationString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicationString.Merge(m, src)
}
func (m *MedicationString) XXX_Size() int {
	return xxx_messageInfo_MedicationString.Size(m)
}
func (m *MedicationString) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicationString.DiscardUnknown(m)
}

var xxx_messageInfo_MedicationString proto.InternalMessageInfo

func (m *MedicationString) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type ItemID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemID) Reset()         { *m = ItemID{} }
func (m *ItemID) String() string { return proto.CompactTextString(m) }
func (*ItemID) ProtoMessage()    {}
func (*ItemID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *ItemID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemID.Unmarshal(m, b)
}
func (m *ItemID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemID.Marshal(b, m, deterministic)
}
func (m *ItemID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemID.Merge(m, src)
}
func (m *ItemID) XXX_Size() int {
	return xxx_messageInfo_ItemID.Size(m)
}
func (m *ItemID) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemID.DiscardUnknown(m)
}

var xxx_messageInfo_ItemID proto.InternalMessageInfo

func (m *ItemID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MedicationType struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedicationType) Reset()         { *m = MedicationType{} }
func (m *MedicationType) String() string { return proto.CompactTextString(m) }
func (*MedicationType) ProtoMessage()    {}
func (*MedicationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *MedicationType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedicationType.Unmarshal(m, b)
}
func (m *MedicationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedicationType.Marshal(b, m, deterministic)
}
func (m *MedicationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicationType.Merge(m, src)
}
func (m *MedicationType) XXX_Size() int {
	return xxx_messageInfo_MedicationType.Size(m)
}
func (m *MedicationType) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicationType.DiscardUnknown(m)
}

var xxx_messageInfo_MedicationType proto.InternalMessageInfo

func (m *MedicationType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*MedicationString)(nil), "dmd.MedicationString")
	proto.RegisterType((*ItemID)(nil), "dmd.ItemID")
	proto.RegisterType((*MedicationType)(nil), "dmd.MedicationType")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0xee, 0xd2, 0x30,
	0x14, 0xc6, 0x33, 0xfe, 0x4a, 0x42, 0x45, 0xc0, 0x1a, 0x22, 0x0e, 0x88, 0x64, 0xde, 0x70, 0x45,
	0xa3, 0x3e, 0x01, 0xc6, 0x48, 0x48, 0x9c, 0x59, 0x90, 0x70, 0xe1, 0x5d, 0x59, 0xeb, 0x68, 0x42,
	0xd7, 0xa6, 0x3b, 0x23, 0x21, 0x04, 0x2f, 0x7c, 0x05, 0x5f, 0xc5, 0x37, 0xf1, 0x15, 0x7c, 0x10,
	0xd3, 0x0e, 0x18, 0x2c, 0x98, 0x78, 0xb7, 0x9e, 0xef, 0x3b, 0xbf, 0xef, 0xac, 0x3d, 0xa8, 0x99,
	0x71, 0xb3, 0xe3, 0x66, 0xa2, 0x8d, 0x02, 0x85, 0x1f, 0x98, 0x64, 0x7e, 0x47, 0x72, 0x26, 0x62,
	0x0a, 0x42, 0xa5, 0x45, 0xd9, 0x6f, 0x30, 0xc9, 0x4e, 0x9f, 0x83, 0x44, 0xa9, 0x64, 0xcb, 0x09,
	0xd5, 0x82, 0xd0, 0x34, 0x55, 0xe0, 0x7c, 0x59, 0xa1, 0x06, 0x23, 0xd4, 0x09, 0x2f, 0xcd, 0x5f,
	0xc0, 0x88, 0x34, 0xc1, 0x4d, 0xe4, 0x65, 0x3d, 0x6f, 0xe4, 0x8d, 0x1b, 0x0b, 0x2f, 0x0b, 0x7a,
	0xa8, 0x3e, 0x07, 0x2e, 0xe7, 0x1f, 0x70, 0x0b, 0xd5, 0x04, 0x73, 0xc2, 0xc3, 0xa2, 0x26, 0x58,
	0x30, 0x42, 0xad, 0xb2, 0x77, 0xb9, 0xd7, 0xfc, 0xca, 0xd1, 0xb0, 0x8e, 0xb7, 0xbf, 0x1e, 0x21,
	0x3b, 0x20, 0x5e, 0xa1, 0x76, 0x44, 0x4d, 0xc6, 0x4b, 0x3b, 0xee, 0x4e, 0xec, 0x88, 0xd5, 0x6c,
	0xbf, 0x28, 0x3b, 0x33, 0x2b, 0xc5, 0xa0, 0xfb, 0xe3, 0xf7, 0x9f, 0x9f, 0xb5, 0x36, 0x7e, 0x4a,
	0x76, 0x6f, 0x08, 0x93, 0x8c, 0x68, 0xeb, 0xc0, 0x9f, 0x51, 0x7d, 0xc6, 0x61, 0xb5, 0x0c, 0xf1,
	0x13, 0xd7, 0x57, 0x0c, 0xea, 0x0f, 0xdd, 0x61, 0x25, 0x0c, 0xe4, 0x74, 0xbb, 0xdc, 0x70, 0x43,
	0x35, 0xcf, 0x41, 0xc4, 0xa1, 0x12, 0x1c, 0xf6, 0x41, 0xcf, 0xc1, 0x30, 0xee, 0x9c, 0x61, 0x3b,
	0x90, 0xe4, 0x20, 0xd8, 0x11, 0x87, 0x05, 0x2f, 0x8c, 0x6e, 0x79, 0x83, 0x6b, 0x9e, 0x9b, 0x4a,
	0xa4, 0x74, 0x1b, 0x19, 0xc5, 0xf2, 0x18, 0xee, 0xe0, 0xa4, 0x2e, 0x70, 0x9f, 0x1c, 0x6e, 0x5a,
	0xc5, 0xf5, 0xdd, 0x61, 0x1a, 0xff, 0x1f, 0x8d, 0x9e, 0x69, 0x1b, 0xf4, 0x6c, 0xc6, 0xc1, 0xde,
	0xf3, 0x14, 0xc0, 0x88, 0x75, 0x0e, 0x3c, 0xc3, 0xcf, 0x2b, 0xd7, 0x68, 0xe5, 0xd3, 0xff, 0xdf,
	0x16, 0xcb, 0x9e, 0xe0, 0x95, 0x8b, 0x78, 0x89, 0x5f, 0x5c, 0x22, 0x2e, 0x5a, 0x91, 0xf4, 0xdd,
	0x25, 0x55, 0xde, 0x76, 0x7c, 0x07, 0x1a, 0x52, 0xad, 0x45, 0x9a, 0x4c, 0x3e, 0x2a, 0x23, 0x17,
	0x2a, 0x07, 0x1e, 0x51, 0x61, 0x7c, 0xff, 0xdf, 0xce, 0xe0, 0xb5, 0xcb, 0x1e, 0xe2, 0xfe, 0x39,
	0x1b, 0xf6, 0x9a, 0x93, 0xc3, 0x37, 0x65, 0xe4, 0x91, 0x1c, 0x8c, 0x65, 0x1c, 0xdf, 0x3f, 0xfe,
	0x6a, 0xb7, 0x66, 0x5d, 0x77, 0x2b, 0xfa, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x80,
	0x81, 0x83, 0xf2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DmdClient is the client API for Dmd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DmdClient interface {
	ParseMedication(ctx context.Context, in *MedicationString, opts ...grpc.CallOption) (*ParsedMedication, error)
	GetVTM(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*VirtualTherapeuticMoiety, error)
	GetVMP(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*VirtualMedicinalProduct, error)
	GetAMP(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*ActualMedicinalProduct, error)
	GetTypeAttributes(ctx context.Context, in *MedicationType, opts ...grpc.CallOption) (*MedicationTypeAttributes, error)
	GetMedicationType(ctx context.Context, in *MedicationTypeMapping_FormRoutePair, opts ...grpc.CallOption) (*MedicationTypeMapping, error)
}

type dmdClient struct {
	cc *grpc.ClientConn
}

func NewDmdClient(cc *grpc.ClientConn) DmdClient {
	return &dmdClient{cc}
}

func (c *dmdClient) ParseMedication(ctx context.Context, in *MedicationString, opts ...grpc.CallOption) (*ParsedMedication, error) {
	out := new(ParsedMedication)
	err := c.cc.Invoke(ctx, "/dmd.dmd/ParseMedication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmdClient) GetVTM(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*VirtualTherapeuticMoiety, error) {
	out := new(VirtualTherapeuticMoiety)
	err := c.cc.Invoke(ctx, "/dmd.dmd/GetVTM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmdClient) GetVMP(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*VirtualMedicinalProduct, error) {
	out := new(VirtualMedicinalProduct)
	err := c.cc.Invoke(ctx, "/dmd.dmd/GetVMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmdClient) GetAMP(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*ActualMedicinalProduct, error) {
	out := new(ActualMedicinalProduct)
	err := c.cc.Invoke(ctx, "/dmd.dmd/GetAMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmdClient) GetTypeAttributes(ctx context.Context, in *MedicationType, opts ...grpc.CallOption) (*MedicationTypeAttributes, error) {
	out := new(MedicationTypeAttributes)
	err := c.cc.Invoke(ctx, "/dmd.dmd/GetTypeAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmdClient) GetMedicationType(ctx context.Context, in *MedicationTypeMapping_FormRoutePair, opts ...grpc.CallOption) (*MedicationTypeMapping, error) {
	out := new(MedicationTypeMapping)
	err := c.cc.Invoke(ctx, "/dmd.dmd/GetMedicationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DmdServer is the server API for Dmd service.
type DmdServer interface {
	ParseMedication(context.Context, *MedicationString) (*ParsedMedication, error)
	GetVTM(context.Context, *ItemID) (*VirtualTherapeuticMoiety, error)
	GetVMP(context.Context, *ItemID) (*VirtualMedicinalProduct, error)
	GetAMP(context.Context, *ItemID) (*ActualMedicinalProduct, error)
	GetTypeAttributes(context.Context, *MedicationType) (*MedicationTypeAttributes, error)
	GetMedicationType(context.Context, *MedicationTypeMapping_FormRoutePair) (*MedicationTypeMapping, error)
}

func RegisterDmdServer(s *grpc.Server, srv DmdServer) {
	s.RegisterService(&_Dmd_serviceDesc, srv)
}

func _Dmd_ParseMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicationString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmdServer).ParseMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dmd.dmd/ParseMedication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmdServer).ParseMedication(ctx, req.(*MedicationString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dmd_GetVTM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmdServer).GetVTM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dmd.dmd/GetVTM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmdServer).GetVTM(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dmd_GetVMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmdServer).GetVMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dmd.dmd/GetVMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmdServer).GetVMP(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dmd_GetAMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmdServer).GetAMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dmd.dmd/GetAMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmdServer).GetAMP(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dmd_GetTypeAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicationType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmdServer).GetTypeAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dmd.dmd/GetTypeAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmdServer).GetTypeAttributes(ctx, req.(*MedicationType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dmd_GetMedicationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicationTypeMapping_FormRoutePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmdServer).GetMedicationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dmd.dmd/GetMedicationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmdServer).GetMedicationType(ctx, req.(*MedicationTypeMapping_FormRoutePair))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dmd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dmd.dmd",
	HandlerType: (*DmdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseMedication",
			Handler:    _Dmd_ParseMedication_Handler,
		},
		{
			MethodName: "GetVTM",
			Handler:    _Dmd_GetVTM_Handler,
		},
		{
			MethodName: "GetVMP",
			Handler:    _Dmd_GetVMP_Handler,
		},
		{
			MethodName: "GetAMP",
			Handler:    _Dmd_GetAMP_Handler,
		},
		{
			MethodName: "GetTypeAttributes",
			Handler:    _Dmd_GetTypeAttributes_Handler,
		},
		{
			MethodName: "GetMedicationType",
			Handler:    _Dmd_GetMedicationType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
