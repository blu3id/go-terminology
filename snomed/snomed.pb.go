// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snomed.proto

package snomed

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Expression_DefinitionStatus int32

const (
	Expression_EQUIVALENT_TO Expression_DefinitionStatus = 0
	Expression_SUBTYPE_OF    Expression_DefinitionStatus = 1
)

var Expression_DefinitionStatus_name = map[int32]string{
	0: "EQUIVALENT_TO",
	1: "SUBTYPE_OF",
}
var Expression_DefinitionStatus_value = map[string]int32{
	"EQUIVALENT_TO": 0,
	"SUBTYPE_OF":    1,
}

func (x Expression_DefinitionStatus) String() string {
	return proto.EnumName(Expression_DefinitionStatus_name, int32(x))
}
func (Expression_DefinitionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{15, 0}
}

type ExpressionConstraint_Constraint int32

const (
	ExpressionConstraint_SELF                  ExpressionConstraint_Constraint = 0
	ExpressionConstraint_CHILD_OF              ExpressionConstraint_Constraint = 1
	ExpressionConstraint_DESCENDANT_OR_SELF_OF ExpressionConstraint_Constraint = 2
	ExpressionConstraint_DESCENDANT_OF         ExpressionConstraint_Constraint = 3
	ExpressionConstraint_PARENT_OF             ExpressionConstraint_Constraint = 4
	ExpressionConstraint_ANCESTOR_OR_SELF_OF   ExpressionConstraint_Constraint = 5
	ExpressionConstraint_ANCESTOR_OF           ExpressionConstraint_Constraint = 6
)

var ExpressionConstraint_Constraint_name = map[int32]string{
	0: "SELF",
	1: "CHILD_OF",
	2: "DESCENDANT_OR_SELF_OF",
	3: "DESCENDANT_OF",
	4: "PARENT_OF",
	5: "ANCESTOR_OR_SELF_OF",
	6: "ANCESTOR_OF",
}
var ExpressionConstraint_Constraint_value = map[string]int32{
	"SELF":                  0,
	"CHILD_OF":              1,
	"DESCENDANT_OR_SELF_OF": 2,
	"DESCENDANT_OF":         3,
	"PARENT_OF":             4,
	"ANCESTOR_OR_SELF_OF":   5,
	"ANCESTOR_OF":           6,
}

func (x ExpressionConstraint_Constraint) String() string {
	return proto.EnumName(ExpressionConstraint_Constraint_name, int32(x))
}
func (ExpressionConstraint_Constraint) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 0}
}

type ExpressionConstraint_ComparisonOperator int32

const (
	ExpressionConstraint_EQUALS                 ExpressionConstraint_ComparisonOperator = 0
	ExpressionConstraint_NOT_EQUALS             ExpressionConstraint_ComparisonOperator = 1
	ExpressionConstraint_LESS_THAN_OR_EQUALS    ExpressionConstraint_ComparisonOperator = 2
	ExpressionConstraint_LESS_THAN              ExpressionConstraint_ComparisonOperator = 3
	ExpressionConstraint_GREATER_THAN_OR_EQUALS ExpressionConstraint_ComparisonOperator = 4
	ExpressionConstraint_GREATER_THAN           ExpressionConstraint_ComparisonOperator = 5
)

var ExpressionConstraint_ComparisonOperator_name = map[int32]string{
	0: "EQUALS",
	1: "NOT_EQUALS",
	2: "LESS_THAN_OR_EQUALS",
	3: "LESS_THAN",
	4: "GREATER_THAN_OR_EQUALS",
	5: "GREATER_THAN",
}
var ExpressionConstraint_ComparisonOperator_value = map[string]int32{
	"EQUALS":                 0,
	"NOT_EQUALS":             1,
	"LESS_THAN_OR_EQUALS":    2,
	"LESS_THAN":              3,
	"GREATER_THAN_OR_EQUALS": 4,
	"GREATER_THAN":           5,
}

func (x ExpressionConstraint_ComparisonOperator) String() string {
	return proto.EnumName(ExpressionConstraint_ComparisonOperator_name, int32(x))
}
func (ExpressionConstraint_ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 1}
}

type ExpressionConstraint_Logical int32

const (
	ExpressionConstraint_AND ExpressionConstraint_Logical = 0
	ExpressionConstraint_OR  ExpressionConstraint_Logical = 1
	ExpressionConstraint_NOT ExpressionConstraint_Logical = 2
)

var ExpressionConstraint_Logical_name = map[int32]string{
	0: "AND",
	1: "OR",
	2: "NOT",
}
var ExpressionConstraint_Logical_value = map[string]int32{
	"AND": 0,
	"OR":  1,
	"NOT": 2,
}

func (x ExpressionConstraint_Logical) String() string {
	return proto.EnumName(ExpressionConstraint_Logical_name, int32(x))
}
func (ExpressionConstraint_Logical) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 2}
}

type SubsumptionResponse_Result int32

const (
	SubsumptionResponse_EQUIVALENT   SubsumptionResponse_Result = 0
	SubsumptionResponse_SUBSUMES     SubsumptionResponse_Result = 1
	SubsumptionResponse_SUBSUMED_BY  SubsumptionResponse_Result = 2
	SubsumptionResponse_NOT_SUBSUMED SubsumptionResponse_Result = 3
)

var SubsumptionResponse_Result_name = map[int32]string{
	0: "EQUIVALENT",
	1: "SUBSUMES",
	2: "SUBSUMED_BY",
	3: "NOT_SUBSUMED",
}
var SubsumptionResponse_Result_value = map[string]int32{
	"EQUIVALENT":   0,
	"SUBSUMES":     1,
	"SUBSUMED_BY":  2,
	"NOT_SUBSUMED": 3,
}

func (x SubsumptionResponse_Result) String() string {
	return proto.EnumName(SubsumptionResponse_Result_name, int32(x))
}
func (SubsumptionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{18, 0}
}

type MapRequest_Parents int32

const (
	MapRequest_FALLBACK MapRequest_Parents = 0
	MapRequest_ALWAYS   MapRequest_Parents = 1
	MapRequest_NEVER    MapRequest_Parents = 2
)

var MapRequest_Parents_name = map[int32]string{
	0: "FALLBACK",
	1: "ALWAYS",
	2: "NEVER",
}
var MapRequest_Parents_value = map[string]int32{
	"FALLBACK": 0,
	"ALWAYS":   1,
	"NEVER":    2,
}

func (x MapRequest_Parents) String() string {
	return proto.EnumName(MapRequest_Parents_name, int32(x))
}
func (MapRequest_Parents) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{24, 0}
}

type SearchRequest_Fuzzy int32

const (
	SearchRequest_FALLBACK_FUZZY SearchRequest_Fuzzy = 0
	SearchRequest_ALWAYS_FUZZY   SearchRequest_Fuzzy = 1
	SearchRequest_NO_FUZZY       SearchRequest_Fuzzy = 2
)

var SearchRequest_Fuzzy_name = map[int32]string{
	0: "FALLBACK_FUZZY",
	1: "ALWAYS_FUZZY",
	2: "NO_FUZZY",
}
var SearchRequest_Fuzzy_value = map[string]int32{
	"FALLBACK_FUZZY": 0,
	"ALWAYS_FUZZY":   1,
	"NO_FUZZY":       2,
}

func (x SearchRequest_Fuzzy) String() string {
	return proto.EnumName(SearchRequest_Fuzzy_name, int32(x))
}
func (SearchRequest_Fuzzy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{29, 0}
}

// A Concept represents a SNOMED-CT concept.
// The RF2 release allows multiple duplicate entries per concept identifier to permit versioning.
// As such, we have a compound primary key made up of the concept identifier and the effective time.
// Only one concept with a specified identifier will be active at any time point.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/3.2.1.+Concept+File+Specification
type Concept struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectiveTime        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Active               bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ModuleId             int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	DefinitionStatusId   int64                `protobuf:"varint,5,opt,name=definition_status_id,json=definitionStatusId,proto3" json:"definition_status_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Concept) Reset()         { *m = Concept{} }
func (m *Concept) String() string { return proto.CompactTextString(m) }
func (*Concept) ProtoMessage()    {}
func (*Concept) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{0}
}
func (m *Concept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Concept.Unmarshal(m, b)
}
func (m *Concept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Concept.Marshal(b, m, deterministic)
}
func (dst *Concept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Concept.Merge(dst, src)
}
func (m *Concept) XXX_Size() int {
	return xxx_messageInfo_Concept.Size(m)
}
func (m *Concept) XXX_DiscardUnknown() {
	xxx_messageInfo_Concept.DiscardUnknown(m)
}

var xxx_messageInfo_Concept proto.InternalMessageInfo

func (m *Concept) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Concept) GetEffectiveTime() *timestamp.Timestamp {
	if m != nil {
		return m.EffectiveTime
	}
	return nil
}

func (m *Concept) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Concept) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *Concept) GetDefinitionStatusId() int64 {
	if m != nil {
		return m.DefinitionStatusId
	}
	return 0
}

// A Description holds descriptions that describe SNOMED CT concepts.
// A description is used to give meaning to a concept and provide well-understood and standard ways of referring to a concept.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/3.2.2.+Description+File+Specification
type Description struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectiveTime        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Active               bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ModuleId             int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ConceptId            int64                `protobuf:"varint,5,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	LanguageCode         string               `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	TypeId               int64                `protobuf:"varint,7,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Term                 string               `protobuf:"bytes,8,opt,name=term,proto3" json:"term,omitempty"`
	CaseSignificance     int64                `protobuf:"varint,9,opt,name=case_significance,json=caseSignificance,proto3" json:"case_significance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{1}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Description.Unmarshal(m, b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Description.Marshal(b, m, deterministic)
}
func (dst *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(dst, src)
}
func (m *Description) XXX_Size() int {
	return xxx_messageInfo_Description.Size(m)
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Description) GetEffectiveTime() *timestamp.Timestamp {
	if m != nil {
		return m.EffectiveTime
	}
	return nil
}

func (m *Description) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Description) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *Description) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *Description) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *Description) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Description) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Description) GetCaseSignificance() int64 {
	if m != nil {
		return m.CaseSignificance
	}
	return 0
}

// Relationship defines a relationship between two concepts as a type itself defined as a concept
type Relationship struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectiveTime        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Active               bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ModuleId             int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	SourceId             int64                `protobuf:"varint,5,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	DestinationId        int64                `protobuf:"varint,6,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	RelationshipGroup    int64                `protobuf:"varint,7,opt,name=relationship_group,json=relationshipGroup,proto3" json:"relationship_group,omitempty"`
	TypeId               int64                `protobuf:"varint,8,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	CharacteristicTypeId int64                `protobuf:"varint,9,opt,name=characteristic_type_id,json=characteristicTypeId,proto3" json:"characteristic_type_id,omitempty"`
	ModifierId           int64                `protobuf:"varint,10,opt,name=modifier_id,json=modifierId,proto3" json:"modifier_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Relationship) Reset()         { *m = Relationship{} }
func (m *Relationship) String() string { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()    {}
func (*Relationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{2}
}
func (m *Relationship) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Relationship.Unmarshal(m, b)
}
func (m *Relationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Relationship.Marshal(b, m, deterministic)
}
func (dst *Relationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relationship.Merge(dst, src)
}
func (m *Relationship) XXX_Size() int {
	return xxx_messageInfo_Relationship.Size(m)
}
func (m *Relationship) XXX_DiscardUnknown() {
	xxx_messageInfo_Relationship.DiscardUnknown(m)
}

var xxx_messageInfo_Relationship proto.InternalMessageInfo

func (m *Relationship) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Relationship) GetEffectiveTime() *timestamp.Timestamp {
	if m != nil {
		return m.EffectiveTime
	}
	return nil
}

func (m *Relationship) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Relationship) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *Relationship) GetSourceId() int64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *Relationship) GetDestinationId() int64 {
	if m != nil {
		return m.DestinationId
	}
	return 0
}

func (m *Relationship) GetRelationshipGroup() int64 {
	if m != nil {
		return m.RelationshipGroup
	}
	return 0
}

func (m *Relationship) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Relationship) GetCharacteristicTypeId() int64 {
	if m != nil {
		return m.CharacteristicTypeId
	}
	return 0
}

func (m *Relationship) GetModifierId() int64 {
	if m != nil {
		return m.ModifierId
	}
	return 0
}

// ReferenceSet support customization and enhancement of SNOMED CT content. These include representation of subsets,
// language preferences maps for or from other code systems.
// There are multiple reference set types which extend this structure
// In the specification, the referenced component ID can be a SCT identifier or a UUID which is... problematic.
// In this structure, the referenced component ID is a SCT identifier... only. For now.
// Fortunately, in concrete types of reference set ("patterns"), it is made explicit.
type ReferenceSetItem struct {
	Id                    string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectiveTime         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Active                bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ModuleId              int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	RefsetId              int64                `protobuf:"varint,5,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`
	ReferencedComponentId int64                `protobuf:"varint,6,opt,name=referenced_component_id,json=referencedComponentId,proto3" json:"referenced_component_id,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*ReferenceSetItem_RefsetDescriptor
	//	*ReferenceSetItem_Simple
	//	*ReferenceSetItem_Language
	//	*ReferenceSetItem_SimpleMap
	//	*ReferenceSetItem_ComplexMap
	//	*ReferenceSetItem_AttributeValue
	//	*ReferenceSetItem_Association
	Body                 isReferenceSetItem_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReferenceSetItem) Reset()         { *m = ReferenceSetItem{} }
func (m *ReferenceSetItem) String() string { return proto.CompactTextString(m) }
func (*ReferenceSetItem) ProtoMessage()    {}
func (*ReferenceSetItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{3}
}
func (m *ReferenceSetItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceSetItem.Unmarshal(m, b)
}
func (m *ReferenceSetItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceSetItem.Marshal(b, m, deterministic)
}
func (dst *ReferenceSetItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceSetItem.Merge(dst, src)
}
func (m *ReferenceSetItem) XXX_Size() int {
	return xxx_messageInfo_ReferenceSetItem.Size(m)
}
func (m *ReferenceSetItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceSetItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceSetItem proto.InternalMessageInfo

type isReferenceSetItem_Body interface {
	isReferenceSetItem_Body()
}

type ReferenceSetItem_RefsetDescriptor struct {
	RefsetDescriptor *RefSetDescriptorReferenceSet `protobuf:"bytes,7,opt,name=refset_descriptor,json=refsetDescriptor,proto3,oneof"`
}
type ReferenceSetItem_Simple struct {
	Simple *SimpleReferenceSet `protobuf:"bytes,8,opt,name=simple,proto3,oneof"`
}
type ReferenceSetItem_Language struct {
	Language *LanguageReferenceSet `protobuf:"bytes,9,opt,name=language,proto3,oneof"`
}
type ReferenceSetItem_SimpleMap struct {
	SimpleMap *SimpleMapReferenceSet `protobuf:"bytes,10,opt,name=simple_map,json=simpleMap,proto3,oneof"`
}
type ReferenceSetItem_ComplexMap struct {
	ComplexMap *ComplexMapReferenceSet `protobuf:"bytes,11,opt,name=complex_map,json=complexMap,proto3,oneof"`
}
type ReferenceSetItem_AttributeValue struct {
	AttributeValue *AttributeValueReferenceSet `protobuf:"bytes,12,opt,name=attribute_value,json=attributeValue,proto3,oneof"`
}
type ReferenceSetItem_Association struct {
	Association *AssociationReferenceSet `protobuf:"bytes,13,opt,name=association,proto3,oneof"`
}

func (*ReferenceSetItem_RefsetDescriptor) isReferenceSetItem_Body() {}
func (*ReferenceSetItem_Simple) isReferenceSetItem_Body()           {}
func (*ReferenceSetItem_Language) isReferenceSetItem_Body()         {}
func (*ReferenceSetItem_SimpleMap) isReferenceSetItem_Body()        {}
func (*ReferenceSetItem_ComplexMap) isReferenceSetItem_Body()       {}
func (*ReferenceSetItem_AttributeValue) isReferenceSetItem_Body()   {}
func (*ReferenceSetItem_Association) isReferenceSetItem_Body()      {}

func (m *ReferenceSetItem) GetBody() isReferenceSetItem_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ReferenceSetItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReferenceSetItem) GetEffectiveTime() *timestamp.Timestamp {
	if m != nil {
		return m.EffectiveTime
	}
	return nil
}

func (m *ReferenceSetItem) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *ReferenceSetItem) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *ReferenceSetItem) GetRefsetId() int64 {
	if m != nil {
		return m.RefsetId
	}
	return 0
}

func (m *ReferenceSetItem) GetReferencedComponentId() int64 {
	if m != nil {
		return m.ReferencedComponentId
	}
	return 0
}

func (m *ReferenceSetItem) GetRefsetDescriptor() *RefSetDescriptorReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_RefsetDescriptor); ok {
		return x.RefsetDescriptor
	}
	return nil
}

func (m *ReferenceSetItem) GetSimple() *SimpleReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_Simple); ok {
		return x.Simple
	}
	return nil
}

func (m *ReferenceSetItem) GetLanguage() *LanguageReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_Language); ok {
		return x.Language
	}
	return nil
}

func (m *ReferenceSetItem) GetSimpleMap() *SimpleMapReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_SimpleMap); ok {
		return x.SimpleMap
	}
	return nil
}

func (m *ReferenceSetItem) GetComplexMap() *ComplexMapReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_ComplexMap); ok {
		return x.ComplexMap
	}
	return nil
}

func (m *ReferenceSetItem) GetAttributeValue() *AttributeValueReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_AttributeValue); ok {
		return x.AttributeValue
	}
	return nil
}

func (m *ReferenceSetItem) GetAssociation() *AssociationReferenceSet {
	if x, ok := m.GetBody().(*ReferenceSetItem_Association); ok {
		return x.Association
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReferenceSetItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReferenceSetItem_OneofMarshaler, _ReferenceSetItem_OneofUnmarshaler, _ReferenceSetItem_OneofSizer, []interface{}{
		(*ReferenceSetItem_RefsetDescriptor)(nil),
		(*ReferenceSetItem_Simple)(nil),
		(*ReferenceSetItem_Language)(nil),
		(*ReferenceSetItem_SimpleMap)(nil),
		(*ReferenceSetItem_ComplexMap)(nil),
		(*ReferenceSetItem_AttributeValue)(nil),
		(*ReferenceSetItem_Association)(nil),
	}
}

func _ReferenceSetItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReferenceSetItem)
	// body
	switch x := m.Body.(type) {
	case *ReferenceSetItem_RefsetDescriptor:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RefsetDescriptor); err != nil {
			return err
		}
	case *ReferenceSetItem_Simple:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Simple); err != nil {
			return err
		}
	case *ReferenceSetItem_Language:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Language); err != nil {
			return err
		}
	case *ReferenceSetItem_SimpleMap:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleMap); err != nil {
			return err
		}
	case *ReferenceSetItem_ComplexMap:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ComplexMap); err != nil {
			return err
		}
	case *ReferenceSetItem_AttributeValue:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AttributeValue); err != nil {
			return err
		}
	case *ReferenceSetItem_Association:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Association); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReferenceSetItem.Body has unexpected type %T", x)
	}
	return nil
}

func _ReferenceSetItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReferenceSetItem)
	switch tag {
	case 7: // body.refset_descriptor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RefSetDescriptorReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_RefsetDescriptor{msg}
		return true, err
	case 8: // body.simple
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_Simple{msg}
		return true, err
	case 9: // body.language
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LanguageReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_Language{msg}
		return true, err
	case 10: // body.simple_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleMapReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_SimpleMap{msg}
		return true, err
	case 11: // body.complex_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ComplexMapReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_ComplexMap{msg}
		return true, err
	case 12: // body.attribute_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AttributeValueReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_AttributeValue{msg}
		return true, err
	case 13: // body.association
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AssociationReferenceSet)
		err := b.DecodeMessage(msg)
		m.Body = &ReferenceSetItem_Association{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReferenceSetItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReferenceSetItem)
	// body
	switch x := m.Body.(type) {
	case *ReferenceSetItem_RefsetDescriptor:
		s := proto.Size(x.RefsetDescriptor)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReferenceSetItem_Simple:
		s := proto.Size(x.Simple)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReferenceSetItem_Language:
		s := proto.Size(x.Language)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReferenceSetItem_SimpleMap:
		s := proto.Size(x.SimpleMap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReferenceSetItem_ComplexMap:
		s := proto.Size(x.ComplexMap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReferenceSetItem_AttributeValue:
		s := proto.Size(x.AttributeValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReferenceSetItem_Association:
		s := proto.Size(x.Association)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RefSetDescriptorReferenceSet is a type of reference set that provides information about a different reference set
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.11.+Reference+Set+Descriptor
// It provides the additional structure for a given reference set.
type RefSetDescriptorReferenceSet struct {
	AttributeDescriptionId int64    `protobuf:"varint,1,opt,name=attribute_description_id,json=attributeDescriptionId,proto3" json:"attribute_description_id,omitempty"`
	AttributeTypeId        int64    `protobuf:"varint,2,opt,name=attribute_type_id,json=attributeTypeId,proto3" json:"attribute_type_id,omitempty"`
	AttributeOrder         uint32   `protobuf:"varint,3,opt,name=attribute_order,json=attributeOrder,proto3" json:"attribute_order,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *RefSetDescriptorReferenceSet) Reset()         { *m = RefSetDescriptorReferenceSet{} }
func (m *RefSetDescriptorReferenceSet) String() string { return proto.CompactTextString(m) }
func (*RefSetDescriptorReferenceSet) ProtoMessage()    {}
func (*RefSetDescriptorReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{4}
}
func (m *RefSetDescriptorReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefSetDescriptorReferenceSet.Unmarshal(m, b)
}
func (m *RefSetDescriptorReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefSetDescriptorReferenceSet.Marshal(b, m, deterministic)
}
func (dst *RefSetDescriptorReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefSetDescriptorReferenceSet.Merge(dst, src)
}
func (m *RefSetDescriptorReferenceSet) XXX_Size() int {
	return xxx_messageInfo_RefSetDescriptorReferenceSet.Size(m)
}
func (m *RefSetDescriptorReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RefSetDescriptorReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_RefSetDescriptorReferenceSet proto.InternalMessageInfo

func (m *RefSetDescriptorReferenceSet) GetAttributeDescriptionId() int64 {
	if m != nil {
		return m.AttributeDescriptionId
	}
	return 0
}

func (m *RefSetDescriptorReferenceSet) GetAttributeTypeId() int64 {
	if m != nil {
		return m.AttributeTypeId
	}
	return 0
}

func (m *RefSetDescriptorReferenceSet) GetAttributeOrder() uint32 {
	if m != nil {
		return m.AttributeOrder
	}
	return 0
}

// SimpleReferenceSet is a simple reference set usable for defining subsets
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.1.+Simple+Reference+Set
type SimpleReferenceSet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleReferenceSet) Reset()         { *m = SimpleReferenceSet{} }
func (m *SimpleReferenceSet) String() string { return proto.CompactTextString(m) }
func (*SimpleReferenceSet) ProtoMessage()    {}
func (*SimpleReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{5}
}
func (m *SimpleReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleReferenceSet.Unmarshal(m, b)
}
func (m *SimpleReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleReferenceSet.Marshal(b, m, deterministic)
}
func (dst *SimpleReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleReferenceSet.Merge(dst, src)
}
func (m *SimpleReferenceSet) XXX_Size() int {
	return xxx_messageInfo_SimpleReferenceSet.Size(m)
}
func (m *SimpleReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleReferenceSet proto.InternalMessageInfo

// LanguageReferenceSet is a A 900000000000506000 |Language type reference set| supporting the representation of
// language and dialects preferences for the use of particular descriptions.
// "The most common use case for this type of reference set is to specify the acceptable and preferred terms
// for use within a particular country or region. However, the same type of reference set can also be used to
// represent preferences for use of descriptions in a more specific context such as a clinical specialty,
// organization or department.
//
// No more than one description of a specific description type associated with a single concept may have the acceptabilityId value 900000000000548007 |Preferred|.
// Every active concept should have one preferred synonym in each language.
// This means that a language reference set should assign the acceptabilityId  900000000000548007 |Preferred|  to one  synonym (a  description with  typeId value 900000000000013009 |synonym|) associated with each concept .
// This description is the preferred term for that concept in the specified language or dialect.
// Any  description which is not referenced by an active row in the   reference set is regarded as unacceptable (i.e. not a valid  synonym in the language or  dialect ).
// If a description becomes unacceptable, the relevant language reference set member is inactivated by adding a new row with the same id, the effectiveTime of the the change and the value active=0.
// For this reason there is no requirement for an "unacceptable" value."
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.4.+Language+Reference+Set
//
type LanguageReferenceSet struct {
	AcceptabilityId      int64    `protobuf:"varint,1,opt,name=acceptability_id,json=acceptabilityId,proto3" json:"acceptability_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LanguageReferenceSet) Reset()         { *m = LanguageReferenceSet{} }
func (m *LanguageReferenceSet) String() string { return proto.CompactTextString(m) }
func (*LanguageReferenceSet) ProtoMessage()    {}
func (*LanguageReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{6}
}
func (m *LanguageReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LanguageReferenceSet.Unmarshal(m, b)
}
func (m *LanguageReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LanguageReferenceSet.Marshal(b, m, deterministic)
}
func (dst *LanguageReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageReferenceSet.Merge(dst, src)
}
func (m *LanguageReferenceSet) XXX_Size() int {
	return xxx_messageInfo_LanguageReferenceSet.Size(m)
}
func (m *LanguageReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageReferenceSet proto.InternalMessageInfo

func (m *LanguageReferenceSet) GetAcceptabilityId() int64 {
	if m != nil {
		return m.AcceptabilityId
	}
	return 0
}

// SimpleMapReferenceSet is a straightforward one-to-one map between SNOMED-CT concepts and another
// coding system. This is appropriate for simple maps.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.9.+Simple+Map+Reference+Set
type SimpleMapReferenceSet struct {
	MapTarget            string   `protobuf:"bytes,1,opt,name=map_target,json=mapTarget,proto3" json:"map_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleMapReferenceSet) Reset()         { *m = SimpleMapReferenceSet{} }
func (m *SimpleMapReferenceSet) String() string { return proto.CompactTextString(m) }
func (*SimpleMapReferenceSet) ProtoMessage()    {}
func (*SimpleMapReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{7}
}
func (m *SimpleMapReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleMapReferenceSet.Unmarshal(m, b)
}
func (m *SimpleMapReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleMapReferenceSet.Marshal(b, m, deterministic)
}
func (dst *SimpleMapReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMapReferenceSet.Merge(dst, src)
}
func (m *SimpleMapReferenceSet) XXX_Size() int {
	return xxx_messageInfo_SimpleMapReferenceSet.Size(m)
}
func (m *SimpleMapReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMapReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMapReferenceSet proto.InternalMessageInfo

func (m *SimpleMapReferenceSet) GetMapTarget() string {
	if m != nil {
		return m.MapTarget
	}
	return ""
}

// ComplexMapReferenceSet represents a complex one-to-many map between SNOMED-CT and another
// coding system.
// A 447250001 |Complex map type reference set|enables representation of maps where each SNOMED
// CT concept may map to one or more codes in a target scheme.
// The type of reference set supports the general set of mapping data required to enable a
// target code to be selected at run-time from a number of alternate codes. It supports
// target code selection by accommodating the inclusion of machine readable rules and/or human readable advice.
// An 609331003 |Extended map type reference set|adds an additional field to allow categorization of maps.
// Unfortunately, the documentation for complex and extended reference sets is out of date.
// https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.10+Complex+and+Extended+Map+Reference+Sets
// A complex map includes an undocumented "map block", and an extended map contains a "category".
// Rather than using a oneof {}, I have quite deliberately kept both.
type ComplexMapReferenceSet struct {
	MapGroup             int64    `protobuf:"varint,1,opt,name=map_group,json=mapGroup,proto3" json:"map_group,omitempty"`
	MapPriority          int64    `protobuf:"varint,2,opt,name=map_priority,json=mapPriority,proto3" json:"map_priority,omitempty"`
	MapRule              string   `protobuf:"bytes,3,opt,name=map_rule,json=mapRule,proto3" json:"map_rule,omitempty"`
	MapAdvice            string   `protobuf:"bytes,4,opt,name=map_advice,json=mapAdvice,proto3" json:"map_advice,omitempty"`
	MapTarget            string   `protobuf:"bytes,5,opt,name=map_target,json=mapTarget,proto3" json:"map_target,omitempty"`
	Correlation          int64    `protobuf:"varint,6,opt,name=correlation,proto3" json:"correlation,omitempty"`
	MapBlock             int64    `protobuf:"varint,7,opt,name=map_block,json=mapBlock,proto3" json:"map_block,omitempty"`
	MapCategory          int64    `protobuf:"varint,8,opt,name=map_category,json=mapCategory,proto3" json:"map_category,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplexMapReferenceSet) Reset()         { *m = ComplexMapReferenceSet{} }
func (m *ComplexMapReferenceSet) String() string { return proto.CompactTextString(m) }
func (*ComplexMapReferenceSet) ProtoMessage()    {}
func (*ComplexMapReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{8}
}
func (m *ComplexMapReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexMapReferenceSet.Unmarshal(m, b)
}
func (m *ComplexMapReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexMapReferenceSet.Marshal(b, m, deterministic)
}
func (dst *ComplexMapReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexMapReferenceSet.Merge(dst, src)
}
func (m *ComplexMapReferenceSet) XXX_Size() int {
	return xxx_messageInfo_ComplexMapReferenceSet.Size(m)
}
func (m *ComplexMapReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexMapReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexMapReferenceSet proto.InternalMessageInfo

func (m *ComplexMapReferenceSet) GetMapGroup() int64 {
	if m != nil {
		return m.MapGroup
	}
	return 0
}

func (m *ComplexMapReferenceSet) GetMapPriority() int64 {
	if m != nil {
		return m.MapPriority
	}
	return 0
}

func (m *ComplexMapReferenceSet) GetMapRule() string {
	if m != nil {
		return m.MapRule
	}
	return ""
}

func (m *ComplexMapReferenceSet) GetMapAdvice() string {
	if m != nil {
		return m.MapAdvice
	}
	return ""
}

func (m *ComplexMapReferenceSet) GetMapTarget() string {
	if m != nil {
		return m.MapTarget
	}
	return ""
}

func (m *ComplexMapReferenceSet) GetCorrelation() int64 {
	if m != nil {
		return m.Correlation
	}
	return 0
}

func (m *ComplexMapReferenceSet) GetMapBlock() int64 {
	if m != nil {
		return m.MapBlock
	}
	return 0
}

func (m *ComplexMapReferenceSet) GetMapCategory() int64 {
	if m != nil {
		return m.MapCategory
	}
	return 0
}

// AttributeValueReferenceSet provides a way to associate arbitrary attributes with a SNOMED-CT component
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.3+Attribute+Value+Reference+Set
type AttributeValueReferenceSet struct {
	ValueId              int64    `protobuf:"varint,1,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeValueReferenceSet) Reset()         { *m = AttributeValueReferenceSet{} }
func (m *AttributeValueReferenceSet) String() string { return proto.CompactTextString(m) }
func (*AttributeValueReferenceSet) ProtoMessage()    {}
func (*AttributeValueReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{9}
}
func (m *AttributeValueReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeValueReferenceSet.Unmarshal(m, b)
}
func (m *AttributeValueReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeValueReferenceSet.Marshal(b, m, deterministic)
}
func (dst *AttributeValueReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeValueReferenceSet.Merge(dst, src)
}
func (m *AttributeValueReferenceSet) XXX_Size() int {
	return xxx_messageInfo_AttributeValueReferenceSet.Size(m)
}
func (m *AttributeValueReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeValueReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeValueReferenceSet proto.InternalMessageInfo

func (m *AttributeValueReferenceSet) GetValueId() int64 {
	if m != nil {
		return m.ValueId
	}
	return 0
}

// AssociationReferenceSet provides a way to associate one component with another, with meaning
// defined by the refset itself.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.5+Association+Reference+Set
type AssociationReferenceSet struct {
	TargetComponentId    int64    `protobuf:"varint,1,opt,name=target_component_id,json=targetComponentId,proto3" json:"target_component_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssociationReferenceSet) Reset()         { *m = AssociationReferenceSet{} }
func (m *AssociationReferenceSet) String() string { return proto.CompactTextString(m) }
func (*AssociationReferenceSet) ProtoMessage()    {}
func (*AssociationReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{10}
}
func (m *AssociationReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssociationReferenceSet.Unmarshal(m, b)
}
func (m *AssociationReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssociationReferenceSet.Marshal(b, m, deterministic)
}
func (dst *AssociationReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssociationReferenceSet.Merge(dst, src)
}
func (m *AssociationReferenceSet) XXX_Size() int {
	return xxx_messageInfo_AssociationReferenceSet.Size(m)
}
func (m *AssociationReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AssociationReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_AssociationReferenceSet proto.InternalMessageInfo

func (m *AssociationReferenceSet) GetTargetComponentId() int64 {
	if m != nil {
		return m.TargetComponentId
	}
	return 0
}

// ExtendedConcept represents a concept together with
// sufficient additional contextual information relating to the
// concept, including reference set membership as well as
// the underlying concept, the concept's relationships and
// the concept's membership of reference sets, and ways that
// this concept can be refined.
// It is, in essence, a denormalised entity, useful for
// wire-exchange purposes and caching.
type ExtendedConcept struct {
	Concept              *Concept        `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	Relationships        []*Relationship `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`
	PreferredDescription *Description    `protobuf:"bytes,3,opt,name=preferred_description,json=preferredDescription,proto3" json:"preferred_description,omitempty"`
	AllParentIds         []int64         `protobuf:"varint,4,rep,packed,name=all_parent_ids,json=allParentIds,proto3" json:"all_parent_ids,omitempty"`
	DirectParentIds      []int64         `protobuf:"varint,5,rep,packed,name=direct_parent_ids,json=directParentIds,proto3" json:"direct_parent_ids,omitempty"`
	ConceptRefsets       []int64         `protobuf:"varint,6,rep,packed,name=concept_refsets,json=conceptRefsets,proto3" json:"concept_refsets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExtendedConcept) Reset()         { *m = ExtendedConcept{} }
func (m *ExtendedConcept) String() string { return proto.CompactTextString(m) }
func (*ExtendedConcept) ProtoMessage()    {}
func (*ExtendedConcept) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{11}
}
func (m *ExtendedConcept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendedConcept.Unmarshal(m, b)
}
func (m *ExtendedConcept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendedConcept.Marshal(b, m, deterministic)
}
func (dst *ExtendedConcept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedConcept.Merge(dst, src)
}
func (m *ExtendedConcept) XXX_Size() int {
	return xxx_messageInfo_ExtendedConcept.Size(m)
}
func (m *ExtendedConcept) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedConcept.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedConcept proto.InternalMessageInfo

func (m *ExtendedConcept) GetConcept() *Concept {
	if m != nil {
		return m.Concept
	}
	return nil
}

func (m *ExtendedConcept) GetRelationships() []*Relationship {
	if m != nil {
		return m.Relationships
	}
	return nil
}

func (m *ExtendedConcept) GetPreferredDescription() *Description {
	if m != nil {
		return m.PreferredDescription
	}
	return nil
}

func (m *ExtendedConcept) GetAllParentIds() []int64 {
	if m != nil {
		return m.AllParentIds
	}
	return nil
}

func (m *ExtendedConcept) GetDirectParentIds() []int64 {
	if m != nil {
		return m.DirectParentIds
	}
	return nil
}

func (m *ExtendedConcept) GetConceptRefsets() []int64 {
	if m != nil {
		return m.ConceptRefsets
	}
	return nil
}

// ConceptDescriptions defined the preferred description
// and available synonyms for the concept specified.
type ConceptDescriptions struct {
	Concept              *Concept       `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	PreferredDescription *Description   `protobuf:"bytes,2,opt,name=preferred_description,json=preferredDescription,proto3" json:"preferred_description,omitempty"`
	FullySpecifiedName   *Description   `protobuf:"bytes,3,opt,name=fully_specified_name,json=fullySpecifiedName,proto3" json:"fully_specified_name,omitempty"`
	Synonyms             []*Description `protobuf:"bytes,4,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Definitions          []*Description `protobuf:"bytes,5,rep,name=definitions,proto3" json:"definitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ConceptDescriptions) Reset()         { *m = ConceptDescriptions{} }
func (m *ConceptDescriptions) String() string { return proto.CompactTextString(m) }
func (*ConceptDescriptions) ProtoMessage()    {}
func (*ConceptDescriptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{12}
}
func (m *ConceptDescriptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConceptDescriptions.Unmarshal(m, b)
}
func (m *ConceptDescriptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConceptDescriptions.Marshal(b, m, deterministic)
}
func (dst *ConceptDescriptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConceptDescriptions.Merge(dst, src)
}
func (m *ConceptDescriptions) XXX_Size() int {
	return xxx_messageInfo_ConceptDescriptions.Size(m)
}
func (m *ConceptDescriptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ConceptDescriptions.DiscardUnknown(m)
}

var xxx_messageInfo_ConceptDescriptions proto.InternalMessageInfo

func (m *ConceptDescriptions) GetConcept() *Concept {
	if m != nil {
		return m.Concept
	}
	return nil
}

func (m *ConceptDescriptions) GetPreferredDescription() *Description {
	if m != nil {
		return m.PreferredDescription
	}
	return nil
}

func (m *ConceptDescriptions) GetFullySpecifiedName() *Description {
	if m != nil {
		return m.FullySpecifiedName
	}
	return nil
}

func (m *ConceptDescriptions) GetSynonyms() []*Description {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

func (m *ConceptDescriptions) GetDefinitions() []*Description {
	if m != nil {
		return m.Definitions
	}
	return nil
}

// ExtendedDescription represents a description together with
// sufficient additional contextual information relating to the
// description, including reference set membership as well as
// the underlying concept, the concept's relationships and
// the concept's membership of reference sets.
// It is, in essence, a denormalised relationship, useful for
// wire-exchange purposes.
type ExtendedDescription struct {
	Description          *Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Concept              *Concept     `protobuf:"bytes,3,opt,name=concept,proto3" json:"concept,omitempty"`
	PreferredDescription *Description `protobuf:"bytes,4,opt,name=preferred_description,json=preferredDescription,proto3" json:"preferred_description,omitempty"`
	AllParentIds         []int64      `protobuf:"varint,5,rep,packed,name=all_parent_ids,json=allParentIds,proto3" json:"all_parent_ids,omitempty"`
	DirectParentIds      []int64      `protobuf:"varint,6,rep,packed,name=direct_parent_ids,json=directParentIds,proto3" json:"direct_parent_ids,omitempty"`
	ConceptRefsets       []int64      `protobuf:"varint,7,rep,packed,name=concept_refsets,json=conceptRefsets,proto3" json:"concept_refsets,omitempty"`
	DescriptionRefsets   []int64      `protobuf:"varint,8,rep,packed,name=description_refsets,json=descriptionRefsets,proto3" json:"description_refsets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExtendedDescription) Reset()         { *m = ExtendedDescription{} }
func (m *ExtendedDescription) String() string { return proto.CompactTextString(m) }
func (*ExtendedDescription) ProtoMessage()    {}
func (*ExtendedDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{13}
}
func (m *ExtendedDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendedDescription.Unmarshal(m, b)
}
func (m *ExtendedDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendedDescription.Marshal(b, m, deterministic)
}
func (dst *ExtendedDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedDescription.Merge(dst, src)
}
func (m *ExtendedDescription) XXX_Size() int {
	return xxx_messageInfo_ExtendedDescription.Size(m)
}
func (m *ExtendedDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedDescription proto.InternalMessageInfo

func (m *ExtendedDescription) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ExtendedDescription) GetConcept() *Concept {
	if m != nil {
		return m.Concept
	}
	return nil
}

func (m *ExtendedDescription) GetPreferredDescription() *Description {
	if m != nil {
		return m.PreferredDescription
	}
	return nil
}

func (m *ExtendedDescription) GetAllParentIds() []int64 {
	if m != nil {
		return m.AllParentIds
	}
	return nil
}

func (m *ExtendedDescription) GetDirectParentIds() []int64 {
	if m != nil {
		return m.DirectParentIds
	}
	return nil
}

func (m *ExtendedDescription) GetConceptRefsets() []int64 {
	if m != nil {
		return m.ConceptRefsets
	}
	return nil
}

func (m *ExtendedDescription) GetDescriptionRefsets() []int64 {
	if m != nil {
		return m.DescriptionRefsets
	}
	return nil
}

// ConceptReference is a simple reference to a concept with an optional preferred description included.
type ConceptReference struct {
	ConceptId            int64    `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	Term                 string   `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConceptReference) Reset()         { *m = ConceptReference{} }
func (m *ConceptReference) String() string { return proto.CompactTextString(m) }
func (*ConceptReference) ProtoMessage()    {}
func (*ConceptReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{14}
}
func (m *ConceptReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConceptReference.Unmarshal(m, b)
}
func (m *ConceptReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConceptReference.Marshal(b, m, deterministic)
}
func (dst *ConceptReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConceptReference.Merge(dst, src)
}
func (m *ConceptReference) XXX_Size() int {
	return xxx_messageInfo_ConceptReference.Size(m)
}
func (m *ConceptReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ConceptReference.DiscardUnknown(m)
}

var xxx_messageInfo_ConceptReference proto.InternalMessageInfo

func (m *ConceptReference) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *ConceptReference) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

// Expression represents a compound SNOMED CT expression.
// There would usually only be a single concept and possibly some refinement
// See https://confluence.ihtsdotools.org/display/DOCSCG/Compositional+Grammar+-+Specification+and+Guide
// The ABNF grammar for SNOMED compositional grammar (CG) is available here:
// https://github.com/IHTSDO/SNOMEDCT-Languages/blob/master/SnomedCTCompositionalGrammar/CG%20Syntax/Compositional%20Grammar%20v2%20-%20ABNF%20(Normative).txt
type Expression struct {
	DefinitionStatus     Expression_DefinitionStatus `protobuf:"varint,1,opt,name=definition_status,json=definitionStatus,proto3,enum=snomed.Expression_DefinitionStatus" json:"definition_status,omitempty"`
	Clause               *Expression_Clause          `protobuf:"bytes,2,opt,name=clause,proto3" json:"clause,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Expression) Reset()         { *m = Expression{} }
func (m *Expression) String() string { return proto.CompactTextString(m) }
func (*Expression) ProtoMessage()    {}
func (*Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{15}
}
func (m *Expression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression.Unmarshal(m, b)
}
func (m *Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression.Marshal(b, m, deterministic)
}
func (dst *Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression.Merge(dst, src)
}
func (m *Expression) XXX_Size() int {
	return xxx_messageInfo_Expression.Size(m)
}
func (m *Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_Expression proto.InternalMessageInfo

func (m *Expression) GetDefinitionStatus() Expression_DefinitionStatus {
	if m != nil {
		return m.DefinitionStatus
	}
	return Expression_EQUIVALENT_TO
}

func (m *Expression) GetClause() *Expression_Clause {
	if m != nil {
		return m.Clause
	}
	return nil
}

// A clause is a "subexpression" in the CG grammar, with refinements either flat
// or nested in groups
type Expression_Clause struct {
	FocusConcepts        []*ConceptReference           `protobuf:"bytes,1,rep,name=focus_concepts,json=focusConcepts,proto3" json:"focus_concepts,omitempty"`
	Refinements          []*Expression_Refinement      `protobuf:"bytes,2,rep,name=refinements,proto3" json:"refinements,omitempty"`
	RefinementGroups     []*Expression_RefinementGroup `protobuf:"bytes,3,rep,name=refinement_groups,json=refinementGroups,proto3" json:"refinement_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Expression_Clause) Reset()         { *m = Expression_Clause{} }
func (m *Expression_Clause) String() string { return proto.CompactTextString(m) }
func (*Expression_Clause) ProtoMessage()    {}
func (*Expression_Clause) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{15, 0}
}
func (m *Expression_Clause) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression_Clause.Unmarshal(m, b)
}
func (m *Expression_Clause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression_Clause.Marshal(b, m, deterministic)
}
func (dst *Expression_Clause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression_Clause.Merge(dst, src)
}
func (m *Expression_Clause) XXX_Size() int {
	return xxx_messageInfo_Expression_Clause.Size(m)
}
func (m *Expression_Clause) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression_Clause.DiscardUnknown(m)
}

var xxx_messageInfo_Expression_Clause proto.InternalMessageInfo

func (m *Expression_Clause) GetFocusConcepts() []*ConceptReference {
	if m != nil {
		return m.FocusConcepts
	}
	return nil
}

func (m *Expression_Clause) GetRefinements() []*Expression_Refinement {
	if m != nil {
		return m.Refinements
	}
	return nil
}

func (m *Expression_Clause) GetRefinementGroups() []*Expression_RefinementGroup {
	if m != nil {
		return m.RefinementGroups
	}
	return nil
}

type Expression_RefinementGroup struct {
	Refinements          []*Expression_Refinement `protobuf:"bytes,1,rep,name=refinements,proto3" json:"refinements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Expression_RefinementGroup) Reset()         { *m = Expression_RefinementGroup{} }
func (m *Expression_RefinementGroup) String() string { return proto.CompactTextString(m) }
func (*Expression_RefinementGroup) ProtoMessage()    {}
func (*Expression_RefinementGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{15, 1}
}
func (m *Expression_RefinementGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression_RefinementGroup.Unmarshal(m, b)
}
func (m *Expression_RefinementGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression_RefinementGroup.Marshal(b, m, deterministic)
}
func (dst *Expression_RefinementGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression_RefinementGroup.Merge(dst, src)
}
func (m *Expression_RefinementGroup) XXX_Size() int {
	return xxx_messageInfo_Expression_RefinementGroup.Size(m)
}
func (m *Expression_RefinementGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression_RefinementGroup.DiscardUnknown(m)
}

var xxx_messageInfo_Expression_RefinementGroup proto.InternalMessageInfo

func (m *Expression_RefinementGroup) GetRefinements() []*Expression_Refinement {
	if m != nil {
		return m.Refinements
	}
	return nil
}

// Refinement is a name/value pair (an attribute) permitting refinement of the focus concept(s)
// The value can be a concept, a clause, or a concrete value such as a string, integer or double
type Expression_Refinement struct {
	RefinementConcept *ConceptReference `protobuf:"bytes,1,opt,name=refinement_concept,json=refinementConcept,proto3" json:"refinement_concept,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Expression_Refinement_ConceptValue
	//	*Expression_Refinement_ClauseValue
	//	*Expression_Refinement_StringValue
	//	*Expression_Refinement_IntValue
	//	*Expression_Refinement_DoubleValue
	Value                isExpression_Refinement_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Expression_Refinement) Reset()         { *m = Expression_Refinement{} }
func (m *Expression_Refinement) String() string { return proto.CompactTextString(m) }
func (*Expression_Refinement) ProtoMessage()    {}
func (*Expression_Refinement) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{15, 2}
}
func (m *Expression_Refinement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression_Refinement.Unmarshal(m, b)
}
func (m *Expression_Refinement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression_Refinement.Marshal(b, m, deterministic)
}
func (dst *Expression_Refinement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression_Refinement.Merge(dst, src)
}
func (m *Expression_Refinement) XXX_Size() int {
	return xxx_messageInfo_Expression_Refinement.Size(m)
}
func (m *Expression_Refinement) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression_Refinement.DiscardUnknown(m)
}

var xxx_messageInfo_Expression_Refinement proto.InternalMessageInfo

type isExpression_Refinement_Value interface {
	isExpression_Refinement_Value()
}

type Expression_Refinement_ConceptValue struct {
	ConceptValue *ConceptReference `protobuf:"bytes,2,opt,name=concept_value,json=conceptValue,proto3,oneof"`
}
type Expression_Refinement_ClauseValue struct {
	ClauseValue *Expression_Clause `protobuf:"bytes,3,opt,name=clause_value,json=clauseValue,proto3,oneof"`
}
type Expression_Refinement_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}
type Expression_Refinement_IntValue struct {
	IntValue int64 `protobuf:"varint,5,opt,name=int_value,json=intValue,proto3,oneof"`
}
type Expression_Refinement_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*Expression_Refinement_ConceptValue) isExpression_Refinement_Value() {}
func (*Expression_Refinement_ClauseValue) isExpression_Refinement_Value()  {}
func (*Expression_Refinement_StringValue) isExpression_Refinement_Value()  {}
func (*Expression_Refinement_IntValue) isExpression_Refinement_Value()     {}
func (*Expression_Refinement_DoubleValue) isExpression_Refinement_Value()  {}

func (m *Expression_Refinement) GetValue() isExpression_Refinement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Expression_Refinement) GetRefinementConcept() *ConceptReference {
	if m != nil {
		return m.RefinementConcept
	}
	return nil
}

func (m *Expression_Refinement) GetConceptValue() *ConceptReference {
	if x, ok := m.GetValue().(*Expression_Refinement_ConceptValue); ok {
		return x.ConceptValue
	}
	return nil
}

func (m *Expression_Refinement) GetClauseValue() *Expression_Clause {
	if x, ok := m.GetValue().(*Expression_Refinement_ClauseValue); ok {
		return x.ClauseValue
	}
	return nil
}

func (m *Expression_Refinement) GetStringValue() string {
	if x, ok := m.GetValue().(*Expression_Refinement_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Expression_Refinement) GetIntValue() int64 {
	if x, ok := m.GetValue().(*Expression_Refinement_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Expression_Refinement) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Expression_Refinement_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Expression_Refinement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Expression_Refinement_OneofMarshaler, _Expression_Refinement_OneofUnmarshaler, _Expression_Refinement_OneofSizer, []interface{}{
		(*Expression_Refinement_ConceptValue)(nil),
		(*Expression_Refinement_ClauseValue)(nil),
		(*Expression_Refinement_StringValue)(nil),
		(*Expression_Refinement_IntValue)(nil),
		(*Expression_Refinement_DoubleValue)(nil),
	}
}

func _Expression_Refinement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Expression_Refinement)
	// value
	switch x := m.Value.(type) {
	case *Expression_Refinement_ConceptValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConceptValue); err != nil {
			return err
		}
	case *Expression_Refinement_ClauseValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClauseValue); err != nil {
			return err
		}
	case *Expression_Refinement_StringValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Expression_Refinement_IntValue:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *Expression_Refinement_DoubleValue:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case nil:
	default:
		return fmt.Errorf("Expression_Refinement.Value has unexpected type %T", x)
	}
	return nil
}

func _Expression_Refinement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Expression_Refinement)
	switch tag {
	case 2: // value.concept_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConceptReference)
		err := b.DecodeMessage(msg)
		m.Value = &Expression_Refinement_ConceptValue{msg}
		return true, err
	case 3: // value.clause_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Expression_Clause)
		err := b.DecodeMessage(msg)
		m.Value = &Expression_Refinement_ClauseValue{msg}
		return true, err
	case 4: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Expression_Refinement_StringValue{x}
		return true, err
	case 5: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Expression_Refinement_IntValue{int64(x)}
		return true, err
	case 6: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Expression_Refinement_DoubleValue{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Expression_Refinement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Expression_Refinement)
	// value
	switch x := m.Value.(type) {
	case *Expression_Refinement_ConceptValue:
		s := proto.Size(x.ConceptValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_Refinement_ClauseValue:
		s := proto.Size(x.ClauseValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Expression_Refinement_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Expression_Refinement_IntValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntValue))
	case *Expression_Refinement_DoubleValue:
		n += 1 // tag and wire
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ExpressionConstraint is an implementation of the expression contraint language (ECL).
// The ABNF grammar is available from: https://confluence.ihtsdotools.org/pages/viewpage.action?pageId=28739405
// Warning: this is currently a (fairly) close map of the ABNF.
// Warning: this is not finalised and is subject to change
// TODO(mw): flatten / simplify structures
type ExpressionConstraint struct {
	// Types that are valid to be assigned to Type:
	//	*ExpressionConstraint_Refined_
	//	*ExpressionConstraint_Compound_
	//	*ExpressionConstraint_Dotted_
	//	*ExpressionConstraint_Subexpression_
	Type                 isExpressionConstraint_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ExpressionConstraint) Reset()         { *m = ExpressionConstraint{} }
func (m *ExpressionConstraint) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint) ProtoMessage()    {}
func (*ExpressionConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16}
}
func (m *ExpressionConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint.Unmarshal(m, b)
}
func (m *ExpressionConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint.Merge(dst, src)
}
func (m *ExpressionConstraint) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint.Size(m)
}
func (m *ExpressionConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint proto.InternalMessageInfo

type isExpressionConstraint_Type interface {
	isExpressionConstraint_Type()
}

type ExpressionConstraint_Refined_ struct {
	Refined *ExpressionConstraint_Refined `protobuf:"bytes,1,opt,name=refined,proto3,oneof"`
}
type ExpressionConstraint_Compound_ struct {
	Compound *ExpressionConstraint_Compound `protobuf:"bytes,2,opt,name=compound,proto3,oneof"`
}
type ExpressionConstraint_Dotted_ struct {
	Dotted *ExpressionConstraint_Dotted `protobuf:"bytes,3,opt,name=dotted,proto3,oneof"`
}
type ExpressionConstraint_Subexpression_ struct {
	Subexpression *ExpressionConstraint_Subexpression `protobuf:"bytes,4,opt,name=subexpression,proto3,oneof"`
}

func (*ExpressionConstraint_Refined_) isExpressionConstraint_Type()       {}
func (*ExpressionConstraint_Compound_) isExpressionConstraint_Type()      {}
func (*ExpressionConstraint_Dotted_) isExpressionConstraint_Type()        {}
func (*ExpressionConstraint_Subexpression_) isExpressionConstraint_Type() {}

func (m *ExpressionConstraint) GetType() isExpressionConstraint_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ExpressionConstraint) GetRefined() *ExpressionConstraint_Refined {
	if x, ok := m.GetType().(*ExpressionConstraint_Refined_); ok {
		return x.Refined
	}
	return nil
}

func (m *ExpressionConstraint) GetCompound() *ExpressionConstraint_Compound {
	if x, ok := m.GetType().(*ExpressionConstraint_Compound_); ok {
		return x.Compound
	}
	return nil
}

func (m *ExpressionConstraint) GetDotted() *ExpressionConstraint_Dotted {
	if x, ok := m.GetType().(*ExpressionConstraint_Dotted_); ok {
		return x.Dotted
	}
	return nil
}

func (m *ExpressionConstraint) GetSubexpression() *ExpressionConstraint_Subexpression {
	if x, ok := m.GetType().(*ExpressionConstraint_Subexpression_); ok {
		return x.Subexpression
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_OneofMarshaler, _ExpressionConstraint_OneofUnmarshaler, _ExpressionConstraint_OneofSizer, []interface{}{
		(*ExpressionConstraint_Refined_)(nil),
		(*ExpressionConstraint_Compound_)(nil),
		(*ExpressionConstraint_Dotted_)(nil),
		(*ExpressionConstraint_Subexpression_)(nil),
	}
}

func _ExpressionConstraint_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint)
	// type
	switch x := m.Type.(type) {
	case *ExpressionConstraint_Refined_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Refined); err != nil {
			return err
		}
	case *ExpressionConstraint_Compound_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Compound); err != nil {
			return err
		}
	case *ExpressionConstraint_Dotted_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dotted); err != nil {
			return err
		}
	case *ExpressionConstraint_Subexpression_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Subexpression); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint.Type has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint)
	switch tag {
	case 1: // type.refined
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Refined)
		err := b.DecodeMessage(msg)
		m.Type = &ExpressionConstraint_Refined_{msg}
		return true, err
	case 2: // type.compound
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Compound)
		err := b.DecodeMessage(msg)
		m.Type = &ExpressionConstraint_Compound_{msg}
		return true, err
	case 3: // type.dotted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Dotted)
		err := b.DecodeMessage(msg)
		m.Type = &ExpressionConstraint_Dotted_{msg}
		return true, err
	case 4: // type.subexpression
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Subexpression)
		err := b.DecodeMessage(msg)
		m.Type = &ExpressionConstraint_Subexpression_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint)
	// type
	switch x := m.Type.(type) {
	case *ExpressionConstraint_Refined_:
		s := proto.Size(x.Refined)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Compound_:
		s := proto.Size(x.Compound)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Dotted_:
		s := proto.Size(x.Dotted)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Subexpression_:
		s := proto.Size(x.Subexpression)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExpressionConstraint_Refined struct {
	Subexpression        *ExpressionConstraint_Subexpression `protobuf:"bytes,1,opt,name=subexpression,proto3" json:"subexpression,omitempty"`
	Refinement           *ExpressionConstraint_Refinement    `protobuf:"bytes,2,opt,name=refinement,proto3" json:"refinement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ExpressionConstraint_Refined) Reset()         { *m = ExpressionConstraint_Refined{} }
func (m *ExpressionConstraint_Refined) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Refined) ProtoMessage()    {}
func (*ExpressionConstraint_Refined) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 0}
}
func (m *ExpressionConstraint_Refined) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Refined.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Refined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Refined.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Refined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Refined.Merge(dst, src)
}
func (m *ExpressionConstraint_Refined) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Refined.Size(m)
}
func (m *ExpressionConstraint_Refined) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Refined.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Refined proto.InternalMessageInfo

func (m *ExpressionConstraint_Refined) GetSubexpression() *ExpressionConstraint_Subexpression {
	if m != nil {
		return m.Subexpression
	}
	return nil
}

func (m *ExpressionConstraint_Refined) GetRefinement() *ExpressionConstraint_Refinement {
	if m != nil {
		return m.Refinement
	}
	return nil
}

// compoundExpressionConstraint = conjunctionExpressionConstraint / disjunctionExpressionConstraint / exclusionExpressionConstraint
// conjunctionExpressionConstraint = subExpressionConstraint 1*(ws conjunction ws subExpressionConstraint)
// disjunctionExpressionConstraint = subExpressionConstraint 1*(ws disjunction ws subExpressionConstraint)
// exclusionExpressionConstraint = subExpressionConstraint ws exclusion ws subExpressionConstraint
type ExpressionConstraint_Compound struct {
	Subexpression        *ExpressionConstraint_Subexpression   `protobuf:"bytes,1,opt,name=subexpression,proto3" json:"subexpression,omitempty"`
	Logical              ExpressionConstraint_Logical          `protobuf:"varint,2,opt,name=logical,proto3,enum=snomed.ExpressionConstraint_Logical" json:"logical,omitempty"`
	Terms                []*ExpressionConstraint_Subexpression `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ExpressionConstraint_Compound) Reset()         { *m = ExpressionConstraint_Compound{} }
func (m *ExpressionConstraint_Compound) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Compound) ProtoMessage()    {}
func (*ExpressionConstraint_Compound) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 1}
}
func (m *ExpressionConstraint_Compound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Compound.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Compound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Compound.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Compound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Compound.Merge(dst, src)
}
func (m *ExpressionConstraint_Compound) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Compound.Size(m)
}
func (m *ExpressionConstraint_Compound) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Compound.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Compound proto.InternalMessageInfo

func (m *ExpressionConstraint_Compound) GetSubexpression() *ExpressionConstraint_Subexpression {
	if m != nil {
		return m.Subexpression
	}
	return nil
}

func (m *ExpressionConstraint_Compound) GetLogical() ExpressionConstraint_Logical {
	if m != nil {
		return m.Logical
	}
	return ExpressionConstraint_AND
}

func (m *ExpressionConstraint_Compound) GetTerms() []*ExpressionConstraint_Subexpression {
	if m != nil {
		return m.Terms
	}
	return nil
}

// dottedexpressionconstraint : subexpressionconstraint (ws dottedexpressionattribute)+;
// dottedexpressionattribute : dot ws eclattributename;
// eclatteibutename : subexpressionconstraint
type ExpressionConstraint_Dotted struct {
	Subexpression        *ExpressionConstraint_Subexpression   `protobuf:"bytes,1,opt,name=subexpression,proto3" json:"subexpression,omitempty"`
	Dotted               []*ExpressionConstraint_Subexpression `protobuf:"bytes,2,rep,name=dotted,proto3" json:"dotted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ExpressionConstraint_Dotted) Reset()         { *m = ExpressionConstraint_Dotted{} }
func (m *ExpressionConstraint_Dotted) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Dotted) ProtoMessage()    {}
func (*ExpressionConstraint_Dotted) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 2}
}
func (m *ExpressionConstraint_Dotted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Dotted.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Dotted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Dotted.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Dotted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Dotted.Merge(dst, src)
}
func (m *ExpressionConstraint_Dotted) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Dotted.Size(m)
}
func (m *ExpressionConstraint_Dotted) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Dotted.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Dotted proto.InternalMessageInfo

func (m *ExpressionConstraint_Dotted) GetSubexpression() *ExpressionConstraint_Subexpression {
	if m != nil {
		return m.Subexpression
	}
	return nil
}

func (m *ExpressionConstraint_Dotted) GetDotted() []*ExpressionConstraint_Subexpression {
	if m != nil {
		return m.Dotted
	}
	return nil
}

type ExpressionConstraint_FocusConcept struct {
	ConceptReference     *ConceptReference `protobuf:"bytes,1,opt,name=concept_reference,json=conceptReference,proto3" json:"concept_reference,omitempty"`
	Wildcard             bool              `protobuf:"varint,2,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExpressionConstraint_FocusConcept) Reset()         { *m = ExpressionConstraint_FocusConcept{} }
func (m *ExpressionConstraint_FocusConcept) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_FocusConcept) ProtoMessage()    {}
func (*ExpressionConstraint_FocusConcept) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 3}
}
func (m *ExpressionConstraint_FocusConcept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_FocusConcept.Unmarshal(m, b)
}
func (m *ExpressionConstraint_FocusConcept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_FocusConcept.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_FocusConcept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_FocusConcept.Merge(dst, src)
}
func (m *ExpressionConstraint_FocusConcept) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_FocusConcept.Size(m)
}
func (m *ExpressionConstraint_FocusConcept) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_FocusConcept.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_FocusConcept proto.InternalMessageInfo

func (m *ExpressionConstraint_FocusConcept) GetConceptReference() *ConceptReference {
	if m != nil {
		return m.ConceptReference
	}
	return nil
}

func (m *ExpressionConstraint_FocusConcept) GetWildcard() bool {
	if m != nil {
		return m.Wildcard
	}
	return false
}

// eclRefinement = subRefinement ws [conjunctionRefinementSet / disjunctionRefinementSet]
type ExpressionConstraint_Refinement struct {
	Subrefinement *ExpressionConstraint_Subrefinement `protobuf:"bytes,1,opt,name=subrefinement,proto3" json:"subrefinement,omitempty"`
	// Types that are valid to be assigned to Logical:
	//	*ExpressionConstraint_Refinement_ConjunctionRefinementSet
	//	*ExpressionConstraint_Refinement_DisjunctionRefinementSet
	Logical              isExpressionConstraint_Refinement_Logical `protobuf_oneof:"logical"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ExpressionConstraint_Refinement) Reset()         { *m = ExpressionConstraint_Refinement{} }
func (m *ExpressionConstraint_Refinement) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Refinement) ProtoMessage()    {}
func (*ExpressionConstraint_Refinement) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 4}
}
func (m *ExpressionConstraint_Refinement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Refinement.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Refinement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Refinement.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Refinement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Refinement.Merge(dst, src)
}
func (m *ExpressionConstraint_Refinement) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Refinement.Size(m)
}
func (m *ExpressionConstraint_Refinement) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Refinement.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Refinement proto.InternalMessageInfo

type isExpressionConstraint_Refinement_Logical interface {
	isExpressionConstraint_Refinement_Logical()
}

type ExpressionConstraint_Refinement_ConjunctionRefinementSet struct {
	ConjunctionRefinementSet *ExpressionConstraint_ConjunctionRefinementSet `protobuf:"bytes,2,opt,name=conjunction_refinement_set,json=conjunctionRefinementSet,proto3,oneof"`
}
type ExpressionConstraint_Refinement_DisjunctionRefinementSet struct {
	DisjunctionRefinementSet *ExpressionConstraint_DisjunctionRefinementSet `protobuf:"bytes,3,opt,name=disjunction_refinement_set,json=disjunctionRefinementSet,proto3,oneof"`
}

func (*ExpressionConstraint_Refinement_ConjunctionRefinementSet) isExpressionConstraint_Refinement_Logical() {
}
func (*ExpressionConstraint_Refinement_DisjunctionRefinementSet) isExpressionConstraint_Refinement_Logical() {
}

func (m *ExpressionConstraint_Refinement) GetLogical() isExpressionConstraint_Refinement_Logical {
	if m != nil {
		return m.Logical
	}
	return nil
}

func (m *ExpressionConstraint_Refinement) GetSubrefinement() *ExpressionConstraint_Subrefinement {
	if m != nil {
		return m.Subrefinement
	}
	return nil
}

func (m *ExpressionConstraint_Refinement) GetConjunctionRefinementSet() *ExpressionConstraint_ConjunctionRefinementSet {
	if x, ok := m.GetLogical().(*ExpressionConstraint_Refinement_ConjunctionRefinementSet); ok {
		return x.ConjunctionRefinementSet
	}
	return nil
}

func (m *ExpressionConstraint_Refinement) GetDisjunctionRefinementSet() *ExpressionConstraint_DisjunctionRefinementSet {
	if x, ok := m.GetLogical().(*ExpressionConstraint_Refinement_DisjunctionRefinementSet); ok {
		return x.DisjunctionRefinementSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint_Refinement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_Refinement_OneofMarshaler, _ExpressionConstraint_Refinement_OneofUnmarshaler, _ExpressionConstraint_Refinement_OneofSizer, []interface{}{
		(*ExpressionConstraint_Refinement_ConjunctionRefinementSet)(nil),
		(*ExpressionConstraint_Refinement_DisjunctionRefinementSet)(nil),
	}
}

func _ExpressionConstraint_Refinement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint_Refinement)
	// logical
	switch x := m.Logical.(type) {
	case *ExpressionConstraint_Refinement_ConjunctionRefinementSet:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConjunctionRefinementSet); err != nil {
			return err
		}
	case *ExpressionConstraint_Refinement_DisjunctionRefinementSet:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisjunctionRefinementSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint_Refinement.Logical has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_Refinement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint_Refinement)
	switch tag {
	case 2: // logical.conjunction_refinement_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_ConjunctionRefinementSet)
		err := b.DecodeMessage(msg)
		m.Logical = &ExpressionConstraint_Refinement_ConjunctionRefinementSet{msg}
		return true, err
	case 3: // logical.disjunction_refinement_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_DisjunctionRefinementSet)
		err := b.DecodeMessage(msg)
		m.Logical = &ExpressionConstraint_Refinement_DisjunctionRefinementSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_Refinement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint_Refinement)
	// logical
	switch x := m.Logical.(type) {
	case *ExpressionConstraint_Refinement_ConjunctionRefinementSet:
		s := proto.Size(x.ConjunctionRefinementSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Refinement_DisjunctionRefinementSet:
		s := proto.Size(x.DisjunctionRefinementSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExpressionConstraint_ConjunctionRefinementSet struct {
	And                  []*ExpressionConstraint_Subrefinement `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ExpressionConstraint_ConjunctionRefinementSet) Reset() {
	*m = ExpressionConstraint_ConjunctionRefinementSet{}
}
func (m *ExpressionConstraint_ConjunctionRefinementSet) String() string {
	return proto.CompactTextString(m)
}
func (*ExpressionConstraint_ConjunctionRefinementSet) ProtoMessage() {}
func (*ExpressionConstraint_ConjunctionRefinementSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 5}
}
func (m *ExpressionConstraint_ConjunctionRefinementSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_ConjunctionRefinementSet.Unmarshal(m, b)
}
func (m *ExpressionConstraint_ConjunctionRefinementSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_ConjunctionRefinementSet.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_ConjunctionRefinementSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_ConjunctionRefinementSet.Merge(dst, src)
}
func (m *ExpressionConstraint_ConjunctionRefinementSet) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_ConjunctionRefinementSet.Size(m)
}
func (m *ExpressionConstraint_ConjunctionRefinementSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_ConjunctionRefinementSet.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_ConjunctionRefinementSet proto.InternalMessageInfo

func (m *ExpressionConstraint_ConjunctionRefinementSet) GetAnd() []*ExpressionConstraint_Subrefinement {
	if m != nil {
		return m.And
	}
	return nil
}

type ExpressionConstraint_DisjunctionRefinementSet struct {
	Or                   []*ExpressionConstraint_Subrefinement `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ExpressionConstraint_DisjunctionRefinementSet) Reset() {
	*m = ExpressionConstraint_DisjunctionRefinementSet{}
}
func (m *ExpressionConstraint_DisjunctionRefinementSet) String() string {
	return proto.CompactTextString(m)
}
func (*ExpressionConstraint_DisjunctionRefinementSet) ProtoMessage() {}
func (*ExpressionConstraint_DisjunctionRefinementSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 6}
}
func (m *ExpressionConstraint_DisjunctionRefinementSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_DisjunctionRefinementSet.Unmarshal(m, b)
}
func (m *ExpressionConstraint_DisjunctionRefinementSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_DisjunctionRefinementSet.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_DisjunctionRefinementSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_DisjunctionRefinementSet.Merge(dst, src)
}
func (m *ExpressionConstraint_DisjunctionRefinementSet) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_DisjunctionRefinementSet.Size(m)
}
func (m *ExpressionConstraint_DisjunctionRefinementSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_DisjunctionRefinementSet.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_DisjunctionRefinementSet proto.InternalMessageInfo

func (m *ExpressionConstraint_DisjunctionRefinementSet) GetOr() []*ExpressionConstraint_Subrefinement {
	if m != nil {
		return m.Or
	}
	return nil
}

// subRefinement = eclAttributeSet / eclAttributeGroup / "(" ws eclRefinement ws ")"
type ExpressionConstraint_Subrefinement struct {
	// Types that are valid to be assigned to Value:
	//	*ExpressionConstraint_Subrefinement_AttributeSet
	//	*ExpressionConstraint_Subrefinement_AttributeGroup
	//	*ExpressionConstraint_Subrefinement_Refinement
	Value                isExpressionConstraint_Subrefinement_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ExpressionConstraint_Subrefinement) Reset()         { *m = ExpressionConstraint_Subrefinement{} }
func (m *ExpressionConstraint_Subrefinement) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Subrefinement) ProtoMessage()    {}
func (*ExpressionConstraint_Subrefinement) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 7}
}
func (m *ExpressionConstraint_Subrefinement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Subrefinement.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Subrefinement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Subrefinement.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Subrefinement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Subrefinement.Merge(dst, src)
}
func (m *ExpressionConstraint_Subrefinement) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Subrefinement.Size(m)
}
func (m *ExpressionConstraint_Subrefinement) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Subrefinement.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Subrefinement proto.InternalMessageInfo

type isExpressionConstraint_Subrefinement_Value interface {
	isExpressionConstraint_Subrefinement_Value()
}

type ExpressionConstraint_Subrefinement_AttributeSet struct {
	AttributeSet *ExpressionConstraint_AttributeSet `protobuf:"bytes,1,opt,name=attribute_set,json=attributeSet,proto3,oneof"`
}
type ExpressionConstraint_Subrefinement_AttributeGroup struct {
	AttributeGroup *ExpressionConstraint_AttributeGroup `protobuf:"bytes,2,opt,name=attribute_group,json=attributeGroup,proto3,oneof"`
}
type ExpressionConstraint_Subrefinement_Refinement struct {
	Refinement *ExpressionConstraint_Refinement `protobuf:"bytes,3,opt,name=refinement,proto3,oneof"`
}

func (*ExpressionConstraint_Subrefinement_AttributeSet) isExpressionConstraint_Subrefinement_Value() {}
func (*ExpressionConstraint_Subrefinement_AttributeGroup) isExpressionConstraint_Subrefinement_Value() {
}
func (*ExpressionConstraint_Subrefinement_Refinement) isExpressionConstraint_Subrefinement_Value() {}

func (m *ExpressionConstraint_Subrefinement) GetValue() isExpressionConstraint_Subrefinement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExpressionConstraint_Subrefinement) GetAttributeSet() *ExpressionConstraint_AttributeSet {
	if x, ok := m.GetValue().(*ExpressionConstraint_Subrefinement_AttributeSet); ok {
		return x.AttributeSet
	}
	return nil
}

func (m *ExpressionConstraint_Subrefinement) GetAttributeGroup() *ExpressionConstraint_AttributeGroup {
	if x, ok := m.GetValue().(*ExpressionConstraint_Subrefinement_AttributeGroup); ok {
		return x.AttributeGroup
	}
	return nil
}

func (m *ExpressionConstraint_Subrefinement) GetRefinement() *ExpressionConstraint_Refinement {
	if x, ok := m.GetValue().(*ExpressionConstraint_Subrefinement_Refinement); ok {
		return x.Refinement
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint_Subrefinement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_Subrefinement_OneofMarshaler, _ExpressionConstraint_Subrefinement_OneofUnmarshaler, _ExpressionConstraint_Subrefinement_OneofSizer, []interface{}{
		(*ExpressionConstraint_Subrefinement_AttributeSet)(nil),
		(*ExpressionConstraint_Subrefinement_AttributeGroup)(nil),
		(*ExpressionConstraint_Subrefinement_Refinement)(nil),
	}
}

func _ExpressionConstraint_Subrefinement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint_Subrefinement)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_Subrefinement_AttributeSet:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AttributeSet); err != nil {
			return err
		}
	case *ExpressionConstraint_Subrefinement_AttributeGroup:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AttributeGroup); err != nil {
			return err
		}
	case *ExpressionConstraint_Subrefinement_Refinement:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Refinement); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint_Subrefinement.Value has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_Subrefinement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint_Subrefinement)
	switch tag {
	case 1: // value.attribute_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_AttributeSet)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_Subrefinement_AttributeSet{msg}
		return true, err
	case 2: // value.attribute_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_AttributeGroup)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_Subrefinement_AttributeGroup{msg}
		return true, err
	case 3: // value.refinement
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Refinement)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_Subrefinement_Refinement{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_Subrefinement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint_Subrefinement)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_Subrefinement_AttributeSet:
		s := proto.Size(x.AttributeSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Subrefinement_AttributeGroup:
		s := proto.Size(x.AttributeGroup)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Subrefinement_Refinement:
		s := proto.Size(x.Refinement)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// eclAttributeGroup = ["[" cardinality "]" ws] "{" ws eclAttributeSet ws "}"
type ExpressionConstraint_AttributeGroup struct {
	Cardinality          *ExpressionConstraint_Cardinality  `protobuf:"bytes,1,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	AttributeSet         *ExpressionConstraint_AttributeSet `protobuf:"bytes,2,opt,name=attribute_set,json=attributeSet,proto3" json:"attribute_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ExpressionConstraint_AttributeGroup) Reset()         { *m = ExpressionConstraint_AttributeGroup{} }
func (m *ExpressionConstraint_AttributeGroup) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_AttributeGroup) ProtoMessage()    {}
func (*ExpressionConstraint_AttributeGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 8}
}
func (m *ExpressionConstraint_AttributeGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_AttributeGroup.Unmarshal(m, b)
}
func (m *ExpressionConstraint_AttributeGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_AttributeGroup.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_AttributeGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_AttributeGroup.Merge(dst, src)
}
func (m *ExpressionConstraint_AttributeGroup) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_AttributeGroup.Size(m)
}
func (m *ExpressionConstraint_AttributeGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_AttributeGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_AttributeGroup proto.InternalMessageInfo

func (m *ExpressionConstraint_AttributeGroup) GetCardinality() *ExpressionConstraint_Cardinality {
	if m != nil {
		return m.Cardinality
	}
	return nil
}

func (m *ExpressionConstraint_AttributeGroup) GetAttributeSet() *ExpressionConstraint_AttributeSet {
	if m != nil {
		return m.AttributeSet
	}
	return nil
}

// eclAttributeSet = subAttributeSet ws [conjunctionAttributeSet / disjunctionAttributeSet]
type ExpressionConstraint_AttributeSet struct {
	SubattributeSet *ExpressionConstraint_SubattributeSet `protobuf:"bytes,1,opt,name=subattribute_set,json=subattributeSet,proto3" json:"subattribute_set,omitempty"`
	// Types that are valid to be assigned to Logical:
	//	*ExpressionConstraint_AttributeSet_Conjunction
	//	*ExpressionConstraint_AttributeSet_Disjunction
	Logical              isExpressionConstraint_AttributeSet_Logical `protobuf_oneof:"logical"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ExpressionConstraint_AttributeSet) Reset()         { *m = ExpressionConstraint_AttributeSet{} }
func (m *ExpressionConstraint_AttributeSet) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_AttributeSet) ProtoMessage()    {}
func (*ExpressionConstraint_AttributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 9}
}
func (m *ExpressionConstraint_AttributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_AttributeSet.Unmarshal(m, b)
}
func (m *ExpressionConstraint_AttributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_AttributeSet.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_AttributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_AttributeSet.Merge(dst, src)
}
func (m *ExpressionConstraint_AttributeSet) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_AttributeSet.Size(m)
}
func (m *ExpressionConstraint_AttributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_AttributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_AttributeSet proto.InternalMessageInfo

type isExpressionConstraint_AttributeSet_Logical interface {
	isExpressionConstraint_AttributeSet_Logical()
}

type ExpressionConstraint_AttributeSet_Conjunction struct {
	Conjunction *ExpressionConstraint_ConjunctionAttributeSet `protobuf:"bytes,2,opt,name=conjunction,proto3,oneof"`
}
type ExpressionConstraint_AttributeSet_Disjunction struct {
	Disjunction *ExpressionConstraint_DisjunctionAttributeSet `protobuf:"bytes,3,opt,name=disjunction,proto3,oneof"`
}

func (*ExpressionConstraint_AttributeSet_Conjunction) isExpressionConstraint_AttributeSet_Logical() {}
func (*ExpressionConstraint_AttributeSet_Disjunction) isExpressionConstraint_AttributeSet_Logical() {}

func (m *ExpressionConstraint_AttributeSet) GetLogical() isExpressionConstraint_AttributeSet_Logical {
	if m != nil {
		return m.Logical
	}
	return nil
}

func (m *ExpressionConstraint_AttributeSet) GetSubattributeSet() *ExpressionConstraint_SubattributeSet {
	if m != nil {
		return m.SubattributeSet
	}
	return nil
}

func (m *ExpressionConstraint_AttributeSet) GetConjunction() *ExpressionConstraint_ConjunctionAttributeSet {
	if x, ok := m.GetLogical().(*ExpressionConstraint_AttributeSet_Conjunction); ok {
		return x.Conjunction
	}
	return nil
}

func (m *ExpressionConstraint_AttributeSet) GetDisjunction() *ExpressionConstraint_DisjunctionAttributeSet {
	if x, ok := m.GetLogical().(*ExpressionConstraint_AttributeSet_Disjunction); ok {
		return x.Disjunction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint_AttributeSet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_AttributeSet_OneofMarshaler, _ExpressionConstraint_AttributeSet_OneofUnmarshaler, _ExpressionConstraint_AttributeSet_OneofSizer, []interface{}{
		(*ExpressionConstraint_AttributeSet_Conjunction)(nil),
		(*ExpressionConstraint_AttributeSet_Disjunction)(nil),
	}
}

func _ExpressionConstraint_AttributeSet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint_AttributeSet)
	// logical
	switch x := m.Logical.(type) {
	case *ExpressionConstraint_AttributeSet_Conjunction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Conjunction); err != nil {
			return err
		}
	case *ExpressionConstraint_AttributeSet_Disjunction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disjunction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint_AttributeSet.Logical has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_AttributeSet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint_AttributeSet)
	switch tag {
	case 2: // logical.conjunction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_ConjunctionAttributeSet)
		err := b.DecodeMessage(msg)
		m.Logical = &ExpressionConstraint_AttributeSet_Conjunction{msg}
		return true, err
	case 3: // logical.disjunction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_DisjunctionAttributeSet)
		err := b.DecodeMessage(msg)
		m.Logical = &ExpressionConstraint_AttributeSet_Disjunction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_AttributeSet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint_AttributeSet)
	// logical
	switch x := m.Logical.(type) {
	case *ExpressionConstraint_AttributeSet_Conjunction:
		s := proto.Size(x.Conjunction)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_AttributeSet_Disjunction:
		s := proto.Size(x.Disjunction)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// conjunctionAttributeSet = 1*(ws conjunction ws subAttributeSet)
type ExpressionConstraint_ConjunctionAttributeSet struct {
	And                  []*ExpressionConstraint_SubattributeSet `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ExpressionConstraint_ConjunctionAttributeSet) Reset() {
	*m = ExpressionConstraint_ConjunctionAttributeSet{}
}
func (m *ExpressionConstraint_ConjunctionAttributeSet) String() string {
	return proto.CompactTextString(m)
}
func (*ExpressionConstraint_ConjunctionAttributeSet) ProtoMessage() {}
func (*ExpressionConstraint_ConjunctionAttributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 10}
}
func (m *ExpressionConstraint_ConjunctionAttributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_ConjunctionAttributeSet.Unmarshal(m, b)
}
func (m *ExpressionConstraint_ConjunctionAttributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_ConjunctionAttributeSet.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_ConjunctionAttributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_ConjunctionAttributeSet.Merge(dst, src)
}
func (m *ExpressionConstraint_ConjunctionAttributeSet) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_ConjunctionAttributeSet.Size(m)
}
func (m *ExpressionConstraint_ConjunctionAttributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_ConjunctionAttributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_ConjunctionAttributeSet proto.InternalMessageInfo

func (m *ExpressionConstraint_ConjunctionAttributeSet) GetAnd() []*ExpressionConstraint_SubattributeSet {
	if m != nil {
		return m.And
	}
	return nil
}

// disjunctionAttributeSet = 1*(ws disjunction ws subAttributeSet)
type ExpressionConstraint_DisjunctionAttributeSet struct {
	Or                   []*ExpressionConstraint_SubattributeSet `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ExpressionConstraint_DisjunctionAttributeSet) Reset() {
	*m = ExpressionConstraint_DisjunctionAttributeSet{}
}
func (m *ExpressionConstraint_DisjunctionAttributeSet) String() string {
	return proto.CompactTextString(m)
}
func (*ExpressionConstraint_DisjunctionAttributeSet) ProtoMessage() {}
func (*ExpressionConstraint_DisjunctionAttributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 11}
}
func (m *ExpressionConstraint_DisjunctionAttributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_DisjunctionAttributeSet.Unmarshal(m, b)
}
func (m *ExpressionConstraint_DisjunctionAttributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_DisjunctionAttributeSet.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_DisjunctionAttributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_DisjunctionAttributeSet.Merge(dst, src)
}
func (m *ExpressionConstraint_DisjunctionAttributeSet) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_DisjunctionAttributeSet.Size(m)
}
func (m *ExpressionConstraint_DisjunctionAttributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_DisjunctionAttributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_DisjunctionAttributeSet proto.InternalMessageInfo

func (m *ExpressionConstraint_DisjunctionAttributeSet) GetOr() []*ExpressionConstraint_SubattributeSet {
	if m != nil {
		return m.Or
	}
	return nil
}

// subAttributeSet = eclAttribute / "(" ws eclAttributeSet ws ")"
type ExpressionConstraint_SubattributeSet struct {
	// Types that are valid to be assigned to Value:
	//	*ExpressionConstraint_SubattributeSet_Attribute
	//	*ExpressionConstraint_SubattributeSet_AttributeSet
	Value                isExpressionConstraint_SubattributeSet_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ExpressionConstraint_SubattributeSet) Reset()         { *m = ExpressionConstraint_SubattributeSet{} }
func (m *ExpressionConstraint_SubattributeSet) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_SubattributeSet) ProtoMessage()    {}
func (*ExpressionConstraint_SubattributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 12}
}
func (m *ExpressionConstraint_SubattributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_SubattributeSet.Unmarshal(m, b)
}
func (m *ExpressionConstraint_SubattributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_SubattributeSet.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_SubattributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_SubattributeSet.Merge(dst, src)
}
func (m *ExpressionConstraint_SubattributeSet) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_SubattributeSet.Size(m)
}
func (m *ExpressionConstraint_SubattributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_SubattributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_SubattributeSet proto.InternalMessageInfo

type isExpressionConstraint_SubattributeSet_Value interface {
	isExpressionConstraint_SubattributeSet_Value()
}

type ExpressionConstraint_SubattributeSet_Attribute struct {
	Attribute *ExpressionConstraint_Attribute `protobuf:"bytes,1,opt,name=attribute,proto3,oneof"`
}
type ExpressionConstraint_SubattributeSet_AttributeSet struct {
	AttributeSet *ExpressionConstraint_AttributeSet `protobuf:"bytes,2,opt,name=attribute_set,json=attributeSet,proto3,oneof"`
}

func (*ExpressionConstraint_SubattributeSet_Attribute) isExpressionConstraint_SubattributeSet_Value() {
}
func (*ExpressionConstraint_SubattributeSet_AttributeSet) isExpressionConstraint_SubattributeSet_Value() {
}

func (m *ExpressionConstraint_SubattributeSet) GetValue() isExpressionConstraint_SubattributeSet_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExpressionConstraint_SubattributeSet) GetAttribute() *ExpressionConstraint_Attribute {
	if x, ok := m.GetValue().(*ExpressionConstraint_SubattributeSet_Attribute); ok {
		return x.Attribute
	}
	return nil
}

func (m *ExpressionConstraint_SubattributeSet) GetAttributeSet() *ExpressionConstraint_AttributeSet {
	if x, ok := m.GetValue().(*ExpressionConstraint_SubattributeSet_AttributeSet); ok {
		return x.AttributeSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint_SubattributeSet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_SubattributeSet_OneofMarshaler, _ExpressionConstraint_SubattributeSet_OneofUnmarshaler, _ExpressionConstraint_SubattributeSet_OneofSizer, []interface{}{
		(*ExpressionConstraint_SubattributeSet_Attribute)(nil),
		(*ExpressionConstraint_SubattributeSet_AttributeSet)(nil),
	}
}

func _ExpressionConstraint_SubattributeSet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint_SubattributeSet)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_SubattributeSet_Attribute:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attribute); err != nil {
			return err
		}
	case *ExpressionConstraint_SubattributeSet_AttributeSet:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AttributeSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint_SubattributeSet.Value has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_SubattributeSet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint_SubattributeSet)
	switch tag {
	case 1: // value.attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Attribute)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_SubattributeSet_Attribute{msg}
		return true, err
	case 2: // value.attribute_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_AttributeSet)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_SubattributeSet_AttributeSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_SubattributeSet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint_SubattributeSet)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_SubattributeSet_Attribute:
		s := proto.Size(x.Attribute)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_SubattributeSet_AttributeSet:
		s := proto.Size(x.AttributeSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// subExpressionConstraint = [constraintOperator ws] [memberOf ws] (eclFocusConcept / "(" ws expressionConstraint ws ")")
type ExpressionConstraint_Subexpression struct {
	Constraint ExpressionConstraint_Constraint `protobuf:"varint,1,opt,name=constraint,proto3,enum=snomed.ExpressionConstraint_Constraint" json:"constraint,omitempty"`
	MemberOf   bool                            `protobuf:"varint,2,opt,name=member_of,json=memberOf,proto3" json:"member_of,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ExpressionConstraint_Subexpression_FocusConcept
	//	*ExpressionConstraint_Subexpression_Expression
	Value                isExpressionConstraint_Subexpression_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ExpressionConstraint_Subexpression) Reset()         { *m = ExpressionConstraint_Subexpression{} }
func (m *ExpressionConstraint_Subexpression) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Subexpression) ProtoMessage()    {}
func (*ExpressionConstraint_Subexpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 13}
}
func (m *ExpressionConstraint_Subexpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Subexpression.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Subexpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Subexpression.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Subexpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Subexpression.Merge(dst, src)
}
func (m *ExpressionConstraint_Subexpression) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Subexpression.Size(m)
}
func (m *ExpressionConstraint_Subexpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Subexpression.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Subexpression proto.InternalMessageInfo

type isExpressionConstraint_Subexpression_Value interface {
	isExpressionConstraint_Subexpression_Value()
}

type ExpressionConstraint_Subexpression_FocusConcept struct {
	FocusConcept *ExpressionConstraint_FocusConcept `protobuf:"bytes,3,opt,name=focus_concept,json=focusConcept,proto3,oneof"`
}
type ExpressionConstraint_Subexpression_Expression struct {
	Expression *ExpressionConstraint `protobuf:"bytes,4,opt,name=expression,proto3,oneof"`
}

func (*ExpressionConstraint_Subexpression_FocusConcept) isExpressionConstraint_Subexpression_Value() {}
func (*ExpressionConstraint_Subexpression_Expression) isExpressionConstraint_Subexpression_Value()   {}

func (m *ExpressionConstraint_Subexpression) GetValue() isExpressionConstraint_Subexpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExpressionConstraint_Subexpression) GetConstraint() ExpressionConstraint_Constraint {
	if m != nil {
		return m.Constraint
	}
	return ExpressionConstraint_SELF
}

func (m *ExpressionConstraint_Subexpression) GetMemberOf() bool {
	if m != nil {
		return m.MemberOf
	}
	return false
}

func (m *ExpressionConstraint_Subexpression) GetFocusConcept() *ExpressionConstraint_FocusConcept {
	if x, ok := m.GetValue().(*ExpressionConstraint_Subexpression_FocusConcept); ok {
		return x.FocusConcept
	}
	return nil
}

func (m *ExpressionConstraint_Subexpression) GetExpression() *ExpressionConstraint {
	if x, ok := m.GetValue().(*ExpressionConstraint_Subexpression_Expression); ok {
		return x.Expression
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint_Subexpression) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_Subexpression_OneofMarshaler, _ExpressionConstraint_Subexpression_OneofUnmarshaler, _ExpressionConstraint_Subexpression_OneofSizer, []interface{}{
		(*ExpressionConstraint_Subexpression_FocusConcept)(nil),
		(*ExpressionConstraint_Subexpression_Expression)(nil),
	}
}

func _ExpressionConstraint_Subexpression_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint_Subexpression)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_Subexpression_FocusConcept:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FocusConcept); err != nil {
			return err
		}
	case *ExpressionConstraint_Subexpression_Expression:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Expression); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint_Subexpression.Value has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_Subexpression_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint_Subexpression)
	switch tag {
	case 3: // value.focus_concept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_FocusConcept)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_Subexpression_FocusConcept{msg}
		return true, err
	case 4: // value.expression
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_Subexpression_Expression{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_Subexpression_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint_Subexpression)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_Subexpression_FocusConcept:
		s := proto.Size(x.FocusConcept)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Subexpression_Expression:
		s := proto.Size(x.Expression)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// eclAttribute = ["[" cardinality "]" ws] [reverseFlag ws] eclAttributeName ws (expressionComparisonOperator ws subExpressionConstraint / numericComparisonOperator ws "#" numericValue / stringComparisonOperator ws QM stringValue QM)
type ExpressionConstraint_Attribute struct {
	Cardinality *ExpressionConstraint_Cardinality       `protobuf:"bytes,1,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	Reverse     bool                                    `protobuf:"varint,2,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Name        *ExpressionConstraint_Subexpression     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Operator    ExpressionConstraint_ComparisonOperator `protobuf:"varint,4,opt,name=operator,proto3,enum=snomed.ExpressionConstraint_ComparisonOperator" json:"operator,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ExpressionConstraint_Attribute_SubexpressionValue
	//	*ExpressionConstraint_Attribute_IntegerValue
	//	*ExpressionConstraint_Attribute_DoubleValue
	//	*ExpressionConstraint_Attribute_StringValue
	Value                isExpressionConstraint_Attribute_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ExpressionConstraint_Attribute) Reset()         { *m = ExpressionConstraint_Attribute{} }
func (m *ExpressionConstraint_Attribute) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Attribute) ProtoMessage()    {}
func (*ExpressionConstraint_Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 14}
}
func (m *ExpressionConstraint_Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Attribute.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Attribute.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Attribute.Merge(dst, src)
}
func (m *ExpressionConstraint_Attribute) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Attribute.Size(m)
}
func (m *ExpressionConstraint_Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Attribute proto.InternalMessageInfo

type isExpressionConstraint_Attribute_Value interface {
	isExpressionConstraint_Attribute_Value()
}

type ExpressionConstraint_Attribute_SubexpressionValue struct {
	SubexpressionValue *ExpressionConstraint_Subexpression `protobuf:"bytes,5,opt,name=subexpression_value,json=subexpressionValue,proto3,oneof"`
}
type ExpressionConstraint_Attribute_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,6,opt,name=integer_value,json=integerValue,proto3,oneof"`
}
type ExpressionConstraint_Attribute_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,7,opt,name=double_value,json=doubleValue,proto3,oneof"`
}
type ExpressionConstraint_Attribute_StringValue struct {
	StringValue string `protobuf:"bytes,8,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*ExpressionConstraint_Attribute_SubexpressionValue) isExpressionConstraint_Attribute_Value() {}
func (*ExpressionConstraint_Attribute_IntegerValue) isExpressionConstraint_Attribute_Value()       {}
func (*ExpressionConstraint_Attribute_DoubleValue) isExpressionConstraint_Attribute_Value()        {}
func (*ExpressionConstraint_Attribute_StringValue) isExpressionConstraint_Attribute_Value()        {}

func (m *ExpressionConstraint_Attribute) GetValue() isExpressionConstraint_Attribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExpressionConstraint_Attribute) GetCardinality() *ExpressionConstraint_Cardinality {
	if m != nil {
		return m.Cardinality
	}
	return nil
}

func (m *ExpressionConstraint_Attribute) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *ExpressionConstraint_Attribute) GetName() *ExpressionConstraint_Subexpression {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ExpressionConstraint_Attribute) GetOperator() ExpressionConstraint_ComparisonOperator {
	if m != nil {
		return m.Operator
	}
	return ExpressionConstraint_EQUALS
}

func (m *ExpressionConstraint_Attribute) GetSubexpressionValue() *ExpressionConstraint_Subexpression {
	if x, ok := m.GetValue().(*ExpressionConstraint_Attribute_SubexpressionValue); ok {
		return x.SubexpressionValue
	}
	return nil
}

func (m *ExpressionConstraint_Attribute) GetIntegerValue() int64 {
	if x, ok := m.GetValue().(*ExpressionConstraint_Attribute_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (m *ExpressionConstraint_Attribute) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*ExpressionConstraint_Attribute_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *ExpressionConstraint_Attribute) GetStringValue() string {
	if x, ok := m.GetValue().(*ExpressionConstraint_Attribute_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExpressionConstraint_Attribute) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExpressionConstraint_Attribute_OneofMarshaler, _ExpressionConstraint_Attribute_OneofUnmarshaler, _ExpressionConstraint_Attribute_OneofSizer, []interface{}{
		(*ExpressionConstraint_Attribute_SubexpressionValue)(nil),
		(*ExpressionConstraint_Attribute_IntegerValue)(nil),
		(*ExpressionConstraint_Attribute_DoubleValue)(nil),
		(*ExpressionConstraint_Attribute_StringValue)(nil),
	}
}

func _ExpressionConstraint_Attribute_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExpressionConstraint_Attribute)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_Attribute_SubexpressionValue:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubexpressionValue); err != nil {
			return err
		}
	case *ExpressionConstraint_Attribute_IntegerValue:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntegerValue))
	case *ExpressionConstraint_Attribute_DoubleValue:
		b.EncodeVarint(7<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *ExpressionConstraint_Attribute_StringValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("ExpressionConstraint_Attribute.Value has unexpected type %T", x)
	}
	return nil
}

func _ExpressionConstraint_Attribute_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExpressionConstraint_Attribute)
	switch tag {
	case 5: // value.subexpression_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionConstraint_Subexpression)
		err := b.DecodeMessage(msg)
		m.Value = &ExpressionConstraint_Attribute_SubexpressionValue{msg}
		return true, err
	case 6: // value.integer_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ExpressionConstraint_Attribute_IntegerValue{int64(x)}
		return true, err
	case 7: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &ExpressionConstraint_Attribute_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 8: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ExpressionConstraint_Attribute_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _ExpressionConstraint_Attribute_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExpressionConstraint_Attribute)
	// value
	switch x := m.Value.(type) {
	case *ExpressionConstraint_Attribute_SubexpressionValue:
		s := proto.Size(x.SubexpressionValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExpressionConstraint_Attribute_IntegerValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntegerValue))
	case *ExpressionConstraint_Attribute_DoubleValue:
		n += 1 // tag and wire
		n += 8
	case *ExpressionConstraint_Attribute_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExpressionConstraint_Cardinality struct {
	MinimumValue         int64    `protobuf:"varint,1,opt,name=minimum_value,json=minimumValue,proto3" json:"minimum_value,omitempty"`
	MaximumValue         int64    `protobuf:"varint,2,opt,name=maximum_value,json=maximumValue,proto3" json:"maximum_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpressionConstraint_Cardinality) Reset()         { *m = ExpressionConstraint_Cardinality{} }
func (m *ExpressionConstraint_Cardinality) String() string { return proto.CompactTextString(m) }
func (*ExpressionConstraint_Cardinality) ProtoMessage()    {}
func (*ExpressionConstraint_Cardinality) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{16, 15}
}
func (m *ExpressionConstraint_Cardinality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionConstraint_Cardinality.Unmarshal(m, b)
}
func (m *ExpressionConstraint_Cardinality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionConstraint_Cardinality.Marshal(b, m, deterministic)
}
func (dst *ExpressionConstraint_Cardinality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionConstraint_Cardinality.Merge(dst, src)
}
func (m *ExpressionConstraint_Cardinality) XXX_Size() int {
	return xxx_messageInfo_ExpressionConstraint_Cardinality.Size(m)
}
func (m *ExpressionConstraint_Cardinality) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionConstraint_Cardinality.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionConstraint_Cardinality proto.InternalMessageInfo

func (m *ExpressionConstraint_Cardinality) GetMinimumValue() int64 {
	if m != nil {
		return m.MinimumValue
	}
	return 0
}

func (m *ExpressionConstraint_Cardinality) GetMaximumValue() int64 {
	if m != nil {
		return m.MaximumValue
	}
	return 0
}

// SubsumptionRequest requests a test of subsumption
// This is based on on the HL7 FHIR terminology service definition
// Does concept A subsumes concept B?
// e.g. A:Disorder of liver, B: viral hepatitis. Result: Subsumes
// See https://www.hl7.org/fhir/terminology-service.html
type SubsumptionRequest struct {
	System               string   `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	CodeA                int64    `protobuf:"varint,2,opt,name=code_a,json=codeA,proto3" json:"code_a,omitempty"`
	CodeB                int64    `protobuf:"varint,3,opt,name=code_b,json=codeB,proto3" json:"code_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubsumptionRequest) Reset()         { *m = SubsumptionRequest{} }
func (m *SubsumptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubsumptionRequest) ProtoMessage()    {}
func (*SubsumptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{17}
}
func (m *SubsumptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubsumptionRequest.Unmarshal(m, b)
}
func (m *SubsumptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubsumptionRequest.Marshal(b, m, deterministic)
}
func (dst *SubsumptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubsumptionRequest.Merge(dst, src)
}
func (m *SubsumptionRequest) XXX_Size() int {
	return xxx_messageInfo_SubsumptionRequest.Size(m)
}
func (m *SubsumptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubsumptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubsumptionRequest proto.InternalMessageInfo

func (m *SubsumptionRequest) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *SubsumptionRequest) GetCodeA() int64 {
	if m != nil {
		return m.CodeA
	}
	return 0
}

func (m *SubsumptionRequest) GetCodeB() int64 {
	if m != nil {
		return m.CodeB
	}
	return 0
}

// SubsumptionResponse gives the response of subsumption testing
type SubsumptionResponse struct {
	Result               SubsumptionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=snomed.SubsumptionResponse_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SubsumptionResponse) Reset()         { *m = SubsumptionResponse{} }
func (m *SubsumptionResponse) String() string { return proto.CompactTextString(m) }
func (*SubsumptionResponse) ProtoMessage()    {}
func (*SubsumptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{18}
}
func (m *SubsumptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubsumptionResponse.Unmarshal(m, b)
}
func (m *SubsumptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubsumptionResponse.Marshal(b, m, deterministic)
}
func (dst *SubsumptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubsumptionResponse.Merge(dst, src)
}
func (m *SubsumptionResponse) XXX_Size() int {
	return xxx_messageInfo_SubsumptionResponse.Size(m)
}
func (m *SubsumptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubsumptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubsumptionResponse proto.InternalMessageInfo

func (m *SubsumptionResponse) GetResult() SubsumptionResponse_Result {
	if m != nil {
		return m.Result
	}
	return SubsumptionResponse_EQUIVALENT
}

// RefinementRequest requests the possible refinements
// for the specified concept.
type RefinementRequest struct {
	ConceptId            int64    `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	ChoiceLimit          int32    `protobuf:"varint,2,opt,name=choice_limit,json=choiceLimit,proto3" json:"choice_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefinementRequest) Reset()         { *m = RefinementRequest{} }
func (m *RefinementRequest) String() string { return proto.CompactTextString(m) }
func (*RefinementRequest) ProtoMessage()    {}
func (*RefinementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{19}
}
func (m *RefinementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefinementRequest.Unmarshal(m, b)
}
func (m *RefinementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefinementRequest.Marshal(b, m, deterministic)
}
func (dst *RefinementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefinementRequest.Merge(dst, src)
}
func (m *RefinementRequest) XXX_Size() int {
	return xxx_messageInfo_RefinementRequest.Size(m)
}
func (m *RefinementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefinementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefinementRequest proto.InternalMessageInfo

func (m *RefinementRequest) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *RefinementRequest) GetChoiceLimit() int32 {
	if m != nil {
		return m.ChoiceLimit
	}
	return 0
}

type RefinementResponse struct {
	Concept              *Concept                         `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	Refinements          []*RefinementResponse_Refinement `protobuf:"bytes,2,rep,name=refinements,proto3" json:"refinements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *RefinementResponse) Reset()         { *m = RefinementResponse{} }
func (m *RefinementResponse) String() string { return proto.CompactTextString(m) }
func (*RefinementResponse) ProtoMessage()    {}
func (*RefinementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{20}
}
func (m *RefinementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefinementResponse.Unmarshal(m, b)
}
func (m *RefinementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefinementResponse.Marshal(b, m, deterministic)
}
func (dst *RefinementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefinementResponse.Merge(dst, src)
}
func (m *RefinementResponse) XXX_Size() int {
	return xxx_messageInfo_RefinementResponse.Size(m)
}
func (m *RefinementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefinementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefinementResponse proto.InternalMessageInfo

func (m *RefinementResponse) GetConcept() *Concept {
	if m != nil {
		return m.Concept
	}
	return nil
}

func (m *RefinementResponse) GetRefinements() []*RefinementResponse_Refinement {
	if m != nil {
		return m.Refinements
	}
	return nil
}

type RefinementResponse_Refinement struct {
	Attribute            *ConceptReference   `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	RootValue            *ConceptReference   `protobuf:"bytes,2,opt,name=root_value,json=rootValue,proto3" json:"root_value,omitempty"`
	Choices              []*ConceptReference `protobuf:"bytes,3,rep,name=choices,proto3" json:"choices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RefinementResponse_Refinement) Reset()         { *m = RefinementResponse_Refinement{} }
func (m *RefinementResponse_Refinement) String() string { return proto.CompactTextString(m) }
func (*RefinementResponse_Refinement) ProtoMessage()    {}
func (*RefinementResponse_Refinement) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{20, 0}
}
func (m *RefinementResponse_Refinement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefinementResponse_Refinement.Unmarshal(m, b)
}
func (m *RefinementResponse_Refinement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefinementResponse_Refinement.Marshal(b, m, deterministic)
}
func (dst *RefinementResponse_Refinement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefinementResponse_Refinement.Merge(dst, src)
}
func (m *RefinementResponse_Refinement) XXX_Size() int {
	return xxx_messageInfo_RefinementResponse_Refinement.Size(m)
}
func (m *RefinementResponse_Refinement) XXX_DiscardUnknown() {
	xxx_messageInfo_RefinementResponse_Refinement.DiscardUnknown(m)
}

var xxx_messageInfo_RefinementResponse_Refinement proto.InternalMessageInfo

func (m *RefinementResponse_Refinement) GetAttribute() *ConceptReference {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *RefinementResponse_Refinement) GetRootValue() *ConceptReference {
	if m != nil {
		return m.RootValue
	}
	return nil
}

func (m *RefinementResponse_Refinement) GetChoices() []*ConceptReference {
	if m != nil {
		return m.Choices
	}
	return nil
}

type TranslateFromRequest struct {
	RefsetId             int64    `protobuf:"varint,1,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`
	S                    string   `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	IncludeInactive      bool     `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranslateFromRequest) Reset()         { *m = TranslateFromRequest{} }
func (m *TranslateFromRequest) String() string { return proto.CompactTextString(m) }
func (*TranslateFromRequest) ProtoMessage()    {}
func (*TranslateFromRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{21}
}
func (m *TranslateFromRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranslateFromRequest.Unmarshal(m, b)
}
func (m *TranslateFromRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranslateFromRequest.Marshal(b, m, deterministic)
}
func (dst *TranslateFromRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateFromRequest.Merge(dst, src)
}
func (m *TranslateFromRequest) XXX_Size() int {
	return xxx_messageInfo_TranslateFromRequest.Size(m)
}
func (m *TranslateFromRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateFromRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateFromRequest proto.InternalMessageInfo

func (m *TranslateFromRequest) GetRefsetId() int64 {
	if m != nil {
		return m.RefsetId
	}
	return 0
}

func (m *TranslateFromRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func (m *TranslateFromRequest) GetIncludeInactive() bool {
	if m != nil {
		return m.IncludeInactive
	}
	return false
}

type TranslateFromResponse struct {
	Translations         []*TranslateFromResponse_Item `protobuf:"bytes,1,rep,name=translations,proto3" json:"translations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TranslateFromResponse) Reset()         { *m = TranslateFromResponse{} }
func (m *TranslateFromResponse) String() string { return proto.CompactTextString(m) }
func (*TranslateFromResponse) ProtoMessage()    {}
func (*TranslateFromResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{22}
}
func (m *TranslateFromResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranslateFromResponse.Unmarshal(m, b)
}
func (m *TranslateFromResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranslateFromResponse.Marshal(b, m, deterministic)
}
func (dst *TranslateFromResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateFromResponse.Merge(dst, src)
}
func (m *TranslateFromResponse) XXX_Size() int {
	return xxx_messageInfo_TranslateFromResponse.Size(m)
}
func (m *TranslateFromResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateFromResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateFromResponse proto.InternalMessageInfo

func (m *TranslateFromResponse) GetTranslations() []*TranslateFromResponse_Item {
	if m != nil {
		return m.Translations
	}
	return nil
}

type TranslateFromResponse_Item struct {
	ReferenceSetItem     *ReferenceSetItem `protobuf:"bytes,1,opt,name=reference_set_item,json=referenceSetItem,proto3" json:"reference_set_item,omitempty"`
	Concept              *Concept          `protobuf:"bytes,2,opt,name=concept,proto3" json:"concept,omitempty"`
	SameAs               []int64           `protobuf:"varint,3,rep,packed,name=same_as,json=sameAs,proto3" json:"same_as,omitempty"`
	PossiblyEquivalentTo []int64           `protobuf:"varint,4,rep,packed,name=possibly_equivalent_to,json=possiblyEquivalentTo,proto3" json:"possibly_equivalent_to,omitempty"`
	SimilarTo            []int64           `protobuf:"varint,5,rep,packed,name=similar_to,json=similarTo,proto3" json:"similar_to,omitempty"`
	ReplacedBy           []int64           `protobuf:"varint,6,rep,packed,name=replaced_by,json=replacedBy,proto3" json:"replaced_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TranslateFromResponse_Item) Reset()         { *m = TranslateFromResponse_Item{} }
func (m *TranslateFromResponse_Item) String() string { return proto.CompactTextString(m) }
func (*TranslateFromResponse_Item) ProtoMessage()    {}
func (*TranslateFromResponse_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{22, 0}
}
func (m *TranslateFromResponse_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranslateFromResponse_Item.Unmarshal(m, b)
}
func (m *TranslateFromResponse_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranslateFromResponse_Item.Marshal(b, m, deterministic)
}
func (dst *TranslateFromResponse_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateFromResponse_Item.Merge(dst, src)
}
func (m *TranslateFromResponse_Item) XXX_Size() int {
	return xxx_messageInfo_TranslateFromResponse_Item.Size(m)
}
func (m *TranslateFromResponse_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateFromResponse_Item.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateFromResponse_Item proto.InternalMessageInfo

func (m *TranslateFromResponse_Item) GetReferenceSetItem() *ReferenceSetItem {
	if m != nil {
		return m.ReferenceSetItem
	}
	return nil
}

func (m *TranslateFromResponse_Item) GetConcept() *Concept {
	if m != nil {
		return m.Concept
	}
	return nil
}

func (m *TranslateFromResponse_Item) GetSameAs() []int64 {
	if m != nil {
		return m.SameAs
	}
	return nil
}

func (m *TranslateFromResponse_Item) GetPossiblyEquivalentTo() []int64 {
	if m != nil {
		return m.PossiblyEquivalentTo
	}
	return nil
}

func (m *TranslateFromResponse_Item) GetSimilarTo() []int64 {
	if m != nil {
		return m.SimilarTo
	}
	return nil
}

func (m *TranslateFromResponse_Item) GetReplacedBy() []int64 {
	if m != nil {
		return m.ReplacedBy
	}
	return nil
}

type CrossMapRequest struct {
	ConceptId            int64    `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	RefsetId             int64    `protobuf:"varint,2,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrossMapRequest) Reset()         { *m = CrossMapRequest{} }
func (m *CrossMapRequest) String() string { return proto.CompactTextString(m) }
func (*CrossMapRequest) ProtoMessage()    {}
func (*CrossMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{23}
}
func (m *CrossMapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossMapRequest.Unmarshal(m, b)
}
func (m *CrossMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossMapRequest.Marshal(b, m, deterministic)
}
func (dst *CrossMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossMapRequest.Merge(dst, src)
}
func (m *CrossMapRequest) XXX_Size() int {
	return xxx_messageInfo_CrossMapRequest.Size(m)
}
func (m *CrossMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrossMapRequest proto.InternalMessageInfo

func (m *CrossMapRequest) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *CrossMapRequest) GetRefsetId() int64 {
	if m != nil {
		return m.RefsetId
	}
	return 0
}

type MapRequest struct {
	ConceptId            int64              `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	RefsetId             int64              `protobuf:"varint,2,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`
	TargetId             []int64            `protobuf:"varint,3,rep,packed,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Parents              MapRequest_Parents `protobuf:"varint,4,opt,name=parents,proto3,enum=snomed.MapRequest_Parents" json:"parents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MapRequest) Reset()         { *m = MapRequest{} }
func (m *MapRequest) String() string { return proto.CompactTextString(m) }
func (*MapRequest) ProtoMessage()    {}
func (*MapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{24}
}
func (m *MapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapRequest.Unmarshal(m, b)
}
func (m *MapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapRequest.Marshal(b, m, deterministic)
}
func (dst *MapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapRequest.Merge(dst, src)
}
func (m *MapRequest) XXX_Size() int {
	return xxx_messageInfo_MapRequest.Size(m)
}
func (m *MapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapRequest proto.InternalMessageInfo

func (m *MapRequest) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *MapRequest) GetRefsetId() int64 {
	if m != nil {
		return m.RefsetId
	}
	return 0
}

func (m *MapRequest) GetTargetId() []int64 {
	if m != nil {
		return m.TargetId
	}
	return nil
}

func (m *MapRequest) GetParents() MapRequest_Parents {
	if m != nil {
		return m.Parents
	}
	return MapRequest_FALLBACK
}

type MapResponse struct {
	Translations         []*ConceptReference `protobuf:"bytes,1,rep,name=translations,proto3" json:"translations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MapResponse) Reset()         { *m = MapResponse{} }
func (m *MapResponse) String() string { return proto.CompactTextString(m) }
func (*MapResponse) ProtoMessage()    {}
func (*MapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{25}
}
func (m *MapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapResponse.Unmarshal(m, b)
}
func (m *MapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapResponse.Marshal(b, m, deterministic)
}
func (dst *MapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapResponse.Merge(dst, src)
}
func (m *MapResponse) XXX_Size() int {
	return xxx_messageInfo_MapResponse.Size(m)
}
func (m *MapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapResponse proto.InternalMessageInfo

func (m *MapResponse) GetTranslations() []*ConceptReference {
	if m != nil {
		return m.Translations
	}
	return nil
}

type ParseRequest struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseRequest) Reset()         { *m = ParseRequest{} }
func (m *ParseRequest) String() string { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()    {}
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{26}
}
func (m *ParseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseRequest.Unmarshal(m, b)
}
func (m *ParseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseRequest.Marshal(b, m, deterministic)
}
func (dst *ParseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseRequest.Merge(dst, src)
}
func (m *ParseRequest) XXX_Size() int {
	return xxx_messageInfo_ParseRequest.Size(m)
}
func (m *ParseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseRequest proto.InternalMessageInfo

func (m *ParseRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

// ExtractRequest requests natural language processing entity matching for the specified
// free-text. Requests can include a range of hints specifying specialty and other
// contextual clues, to aid matching.
type ExtractRequest struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	Hints                []int64  `protobuf:"varint,2,rep,packed,name=hints,proto3" json:"hints,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtractRequest) Reset()         { *m = ExtractRequest{} }
func (m *ExtractRequest) String() string { return proto.CompactTextString(m) }
func (*ExtractRequest) ProtoMessage()    {}
func (*ExtractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{27}
}
func (m *ExtractRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtractRequest.Unmarshal(m, b)
}
func (m *ExtractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtractRequest.Marshal(b, m, deterministic)
}
func (dst *ExtractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractRequest.Merge(dst, src)
}
func (m *ExtractRequest) XXX_Size() int {
	return xxx_messageInfo_ExtractRequest.Size(m)
}
func (m *ExtractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractRequest proto.InternalMessageInfo

func (m *ExtractRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func (m *ExtractRequest) GetHints() []int64 {
	if m != nil {
		return m.Hints
	}
	return nil
}

// ExtractResponse provides a list of entities from the unstructured text.
// As an individual entity may correspond to multiple concepts (imagine "diabetes" might
// map to diabetes mellitus, diabetes insipidus etc.), we return multiple concepts
// sorted in order of "best" match, as well as the best match if, algorithmically, we
// are confident of a best match, and a generic match, a generic concept that subsumes
// the matches found. The latter is most useful when trying to make sense, safely,
// during non-interactive use. This service will also return complete SNOMED CT expressions
// in the future.
type ExtractResponse struct {
	Entities             []*ExtractResponse_Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ExtractResponse) Reset()         { *m = ExtractResponse{} }
func (m *ExtractResponse) String() string { return proto.CompactTextString(m) }
func (*ExtractResponse) ProtoMessage()    {}
func (*ExtractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{28}
}
func (m *ExtractResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtractResponse.Unmarshal(m, b)
}
func (m *ExtractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtractResponse.Marshal(b, m, deterministic)
}
func (dst *ExtractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractResponse.Merge(dst, src)
}
func (m *ExtractResponse) XXX_Size() int {
	return xxx_messageInfo_ExtractResponse.Size(m)
}
func (m *ExtractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractResponse proto.InternalMessageInfo

func (m *ExtractResponse) GetEntities() []*ExtractResponse_Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type ExtractResponse_Entity struct {
	Text                 string              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Score                float64             `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Negated              bool                `protobuf:"varint,3,opt,name=negated,proto3" json:"negated,omitempty"`
	Concepts             []*ConceptReference `protobuf:"bytes,4,rep,name=concepts,proto3" json:"concepts,omitempty"`
	Expressions          []string            `protobuf:"bytes,5,rep,name=expressions,proto3" json:"expressions,omitempty"`
	BestMatch            int64               `protobuf:"varint,6,opt,name=best_match,json=bestMatch,proto3" json:"best_match,omitempty"`
	GenericMatch         int64               `protobuf:"varint,7,opt,name=generic_match,json=genericMatch,proto3" json:"generic_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ExtractResponse_Entity) Reset()         { *m = ExtractResponse_Entity{} }
func (m *ExtractResponse_Entity) String() string { return proto.CompactTextString(m) }
func (*ExtractResponse_Entity) ProtoMessage()    {}
func (*ExtractResponse_Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{28, 0}
}
func (m *ExtractResponse_Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtractResponse_Entity.Unmarshal(m, b)
}
func (m *ExtractResponse_Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtractResponse_Entity.Marshal(b, m, deterministic)
}
func (dst *ExtractResponse_Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractResponse_Entity.Merge(dst, src)
}
func (m *ExtractResponse_Entity) XXX_Size() int {
	return xxx_messageInfo_ExtractResponse_Entity.Size(m)
}
func (m *ExtractResponse_Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractResponse_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractResponse_Entity proto.InternalMessageInfo

func (m *ExtractResponse_Entity) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ExtractResponse_Entity) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ExtractResponse_Entity) GetNegated() bool {
	if m != nil {
		return m.Negated
	}
	return false
}

func (m *ExtractResponse_Entity) GetConcepts() []*ConceptReference {
	if m != nil {
		return m.Concepts
	}
	return nil
}

func (m *ExtractResponse_Entity) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *ExtractResponse_Entity) GetBestMatch() int64 {
	if m != nil {
		return m.BestMatch
	}
	return 0
}

func (m *ExtractResponse_Entity) GetGenericMatch() int64 {
	if m != nil {
		return m.GenericMatch
	}
	return 0
}

// SearchRequest performs a free-text search of the hierarchy.
type SearchRequest struct {
	S                    string              `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	IsA                  []int64             `protobuf:"varint,2,rep,packed,name=is_a,json=isA,proto3" json:"is_a,omitempty"`
	DirectParents        []int64             `protobuf:"varint,3,rep,packed,name=direct_parents,json=directParents,proto3" json:"direct_parents,omitempty"`
	ConceptRefsets       []int64             `protobuf:"varint,4,rep,packed,name=concept_refsets,json=conceptRefsets,proto3" json:"concept_refsets,omitempty"`
	DescriptionRefsets   []int64             `protobuf:"varint,5,rep,packed,name=description_refsets,json=descriptionRefsets,proto3" json:"description_refsets,omitempty"`
	MaximumHits          int32               `protobuf:"varint,6,opt,name=maximum_hits,json=maximumHits,proto3" json:"maximum_hits,omitempty"`
	IncludeInactive      bool                `protobuf:"varint,7,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	Fuzzy                SearchRequest_Fuzzy `protobuf:"varint,8,opt,name=fuzzy,proto3,enum=snomed.SearchRequest_Fuzzy" json:"fuzzy,omitempty"`
	Hints                []int64             `protobuf:"varint,9,rep,packed,name=hints,proto3" json:"hints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{29}
}
func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (dst *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(dst, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func (m *SearchRequest) GetIsA() []int64 {
	if m != nil {
		return m.IsA
	}
	return nil
}

func (m *SearchRequest) GetDirectParents() []int64 {
	if m != nil {
		return m.DirectParents
	}
	return nil
}

func (m *SearchRequest) GetConceptRefsets() []int64 {
	if m != nil {
		return m.ConceptRefsets
	}
	return nil
}

func (m *SearchRequest) GetDescriptionRefsets() []int64 {
	if m != nil {
		return m.DescriptionRefsets
	}
	return nil
}

func (m *SearchRequest) GetMaximumHits() int32 {
	if m != nil {
		return m.MaximumHits
	}
	return 0
}

func (m *SearchRequest) GetIncludeInactive() bool {
	if m != nil {
		return m.IncludeInactive
	}
	return false
}

func (m *SearchRequest) GetFuzzy() SearchRequest_Fuzzy {
	if m != nil {
		return m.Fuzzy
	}
	return SearchRequest_FALLBACK_FUZZY
}

func (m *SearchRequest) GetHints() []int64 {
	if m != nil {
		return m.Hints
	}
	return nil
}

// SearchResponse provides an optimised search response, sufficient for display purposes.
type SearchResponse struct {
	Items                []*SearchResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{30}
}
func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (dst *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(dst, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetItems() []*SearchResponse_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type SearchResponse_Item struct {
	Term                 string   `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	ConceptId            int64    `protobuf:"varint,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	PreferredTerm        string   `protobuf:"bytes,3,opt,name=preferred_term,json=preferredTerm,proto3" json:"preferred_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponse_Item) Reset()         { *m = SearchResponse_Item{} }
func (m *SearchResponse_Item) String() string { return proto.CompactTextString(m) }
func (*SearchResponse_Item) ProtoMessage()    {}
func (*SearchResponse_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{30, 0}
}
func (m *SearchResponse_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse_Item.Unmarshal(m, b)
}
func (m *SearchResponse_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse_Item.Marshal(b, m, deterministic)
}
func (dst *SearchResponse_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse_Item.Merge(dst, src)
}
func (m *SearchResponse_Item) XXX_Size() int {
	return xxx_messageInfo_SearchResponse_Item.Size(m)
}
func (m *SearchResponse_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse_Item.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse_Item proto.InternalMessageInfo

func (m *SearchResponse_Item) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *SearchResponse_Item) GetConceptId() int64 {
	if m != nil {
		return m.ConceptId
	}
	return 0
}

func (m *SearchResponse_Item) GetPreferredTerm() string {
	if m != nil {
		return m.PreferredTerm
	}
	return ""
}

// SearchFeedback provides feedback on a search.
type SearchFeedback struct {
	Request              *SearchRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response             *SearchResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	SelectedConcept      int64           `protobuf:"varint,3,opt,name=selected_concept,json=selectedConcept,proto3" json:"selected_concept,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchFeedback) Reset()         { *m = SearchFeedback{} }
func (m *SearchFeedback) String() string { return proto.CompactTextString(m) }
func (*SearchFeedback) ProtoMessage()    {}
func (*SearchFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{31}
}
func (m *SearchFeedback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchFeedback.Unmarshal(m, b)
}
func (m *SearchFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchFeedback.Marshal(b, m, deterministic)
}
func (dst *SearchFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchFeedback.Merge(dst, src)
}
func (m *SearchFeedback) XXX_Size() int {
	return xxx_messageInfo_SearchFeedback.Size(m)
}
func (m *SearchFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_SearchFeedback proto.InternalMessageInfo

func (m *SearchFeedback) GetRequest() *SearchRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SearchFeedback) GetResponse() *SearchResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SearchFeedback) GetSelectedConcept() int64 {
	if m != nil {
		return m.SelectedConcept
	}
	return 0
}

type SynonymRequest struct {
	S                    string              `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	IsA                  []int64             `protobuf:"varint,2,rep,packed,name=is_a,json=isA,proto3" json:"is_a,omitempty"`
	MaximumHits          int32               `protobuf:"varint,3,opt,name=maximum_hits,json=maximumHits,proto3" json:"maximum_hits,omitempty"`
	IncludeInactive      bool                `protobuf:"varint,4,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	Fuzzy                SearchRequest_Fuzzy `protobuf:"varint,5,opt,name=fuzzy,proto3,enum=snomed.SearchRequest_Fuzzy" json:"fuzzy,omitempty"`
	IncludeChildren      bool                `protobuf:"varint,6,opt,name=include_children,json=includeChildren,proto3" json:"include_children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SynonymRequest) Reset()         { *m = SynonymRequest{} }
func (m *SynonymRequest) String() string { return proto.CompactTextString(m) }
func (*SynonymRequest) ProtoMessage()    {}
func (*SynonymRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{32}
}
func (m *SynonymRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SynonymRequest.Unmarshal(m, b)
}
func (m *SynonymRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SynonymRequest.Marshal(b, m, deterministic)
}
func (dst *SynonymRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SynonymRequest.Merge(dst, src)
}
func (m *SynonymRequest) XXX_Size() int {
	return xxx_messageInfo_SynonymRequest.Size(m)
}
func (m *SynonymRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SynonymRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SynonymRequest proto.InternalMessageInfo

func (m *SynonymRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func (m *SynonymRequest) GetIsA() []int64 {
	if m != nil {
		return m.IsA
	}
	return nil
}

func (m *SynonymRequest) GetMaximumHits() int32 {
	if m != nil {
		return m.MaximumHits
	}
	return 0
}

func (m *SynonymRequest) GetIncludeInactive() bool {
	if m != nil {
		return m.IncludeInactive
	}
	return false
}

func (m *SynonymRequest) GetFuzzy() SearchRequest_Fuzzy {
	if m != nil {
		return m.Fuzzy
	}
	return SearchRequest_FALLBACK_FUZZY
}

func (m *SynonymRequest) GetIncludeChildren() bool {
	if m != nil {
		return m.IncludeChildren
	}
	return false
}

type SynonymResponseItem struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SynonymResponseItem) Reset()         { *m = SynonymResponseItem{} }
func (m *SynonymResponseItem) String() string { return proto.CompactTextString(m) }
func (*SynonymResponseItem) ProtoMessage()    {}
func (*SynonymResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_snomed_7b0bd258513f7426, []int{33}
}
func (m *SynonymResponseItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SynonymResponseItem.Unmarshal(m, b)
}
func (m *SynonymResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SynonymResponseItem.Marshal(b, m, deterministic)
}
func (dst *SynonymResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SynonymResponseItem.Merge(dst, src)
}
func (m *SynonymResponseItem) XXX_Size() int {
	return xxx_messageInfo_SynonymResponseItem.Size(m)
}
func (m *SynonymResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SynonymResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_SynonymResponseItem proto.InternalMessageInfo

func (m *SynonymResponseItem) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func init() {
	proto.RegisterType((*Concept)(nil), "snomed.Concept")
	proto.RegisterType((*Description)(nil), "snomed.Description")
	proto.RegisterType((*Relationship)(nil), "snomed.Relationship")
	proto.RegisterType((*ReferenceSetItem)(nil), "snomed.ReferenceSetItem")
	proto.RegisterType((*RefSetDescriptorReferenceSet)(nil), "snomed.RefSetDescriptorReferenceSet")
	proto.RegisterType((*SimpleReferenceSet)(nil), "snomed.SimpleReferenceSet")
	proto.RegisterType((*LanguageReferenceSet)(nil), "snomed.LanguageReferenceSet")
	proto.RegisterType((*SimpleMapReferenceSet)(nil), "snomed.SimpleMapReferenceSet")
	proto.RegisterType((*ComplexMapReferenceSet)(nil), "snomed.ComplexMapReferenceSet")
	proto.RegisterType((*AttributeValueReferenceSet)(nil), "snomed.AttributeValueReferenceSet")
	proto.RegisterType((*AssociationReferenceSet)(nil), "snomed.AssociationReferenceSet")
	proto.RegisterType((*ExtendedConcept)(nil), "snomed.ExtendedConcept")
	proto.RegisterType((*ConceptDescriptions)(nil), "snomed.ConceptDescriptions")
	proto.RegisterType((*ExtendedDescription)(nil), "snomed.ExtendedDescription")
	proto.RegisterType((*ConceptReference)(nil), "snomed.ConceptReference")
	proto.RegisterType((*Expression)(nil), "snomed.Expression")
	proto.RegisterType((*Expression_Clause)(nil), "snomed.Expression.Clause")
	proto.RegisterType((*Expression_RefinementGroup)(nil), "snomed.Expression.RefinementGroup")
	proto.RegisterType((*Expression_Refinement)(nil), "snomed.Expression.Refinement")
	proto.RegisterType((*ExpressionConstraint)(nil), "snomed.ExpressionConstraint")
	proto.RegisterType((*ExpressionConstraint_Refined)(nil), "snomed.ExpressionConstraint.Refined")
	proto.RegisterType((*ExpressionConstraint_Compound)(nil), "snomed.ExpressionConstraint.Compound")
	proto.RegisterType((*ExpressionConstraint_Dotted)(nil), "snomed.ExpressionConstraint.Dotted")
	proto.RegisterType((*ExpressionConstraint_FocusConcept)(nil), "snomed.ExpressionConstraint.FocusConcept")
	proto.RegisterType((*ExpressionConstraint_Refinement)(nil), "snomed.ExpressionConstraint.Refinement")
	proto.RegisterType((*ExpressionConstraint_ConjunctionRefinementSet)(nil), "snomed.ExpressionConstraint.ConjunctionRefinementSet")
	proto.RegisterType((*ExpressionConstraint_DisjunctionRefinementSet)(nil), "snomed.ExpressionConstraint.DisjunctionRefinementSet")
	proto.RegisterType((*ExpressionConstraint_Subrefinement)(nil), "snomed.ExpressionConstraint.Subrefinement")
	proto.RegisterType((*ExpressionConstraint_AttributeGroup)(nil), "snomed.ExpressionConstraint.AttributeGroup")
	proto.RegisterType((*ExpressionConstraint_AttributeSet)(nil), "snomed.ExpressionConstraint.AttributeSet")
	proto.RegisterType((*ExpressionConstraint_ConjunctionAttributeSet)(nil), "snomed.ExpressionConstraint.ConjunctionAttributeSet")
	proto.RegisterType((*ExpressionConstraint_DisjunctionAttributeSet)(nil), "snomed.ExpressionConstraint.DisjunctionAttributeSet")
	proto.RegisterType((*ExpressionConstraint_SubattributeSet)(nil), "snomed.ExpressionConstraint.SubattributeSet")
	proto.RegisterType((*ExpressionConstraint_Subexpression)(nil), "snomed.ExpressionConstraint.Subexpression")
	proto.RegisterType((*ExpressionConstraint_Attribute)(nil), "snomed.ExpressionConstraint.Attribute")
	proto.RegisterType((*ExpressionConstraint_Cardinality)(nil), "snomed.ExpressionConstraint.Cardinality")
	proto.RegisterType((*SubsumptionRequest)(nil), "snomed.SubsumptionRequest")
	proto.RegisterType((*SubsumptionResponse)(nil), "snomed.SubsumptionResponse")
	proto.RegisterType((*RefinementRequest)(nil), "snomed.RefinementRequest")
	proto.RegisterType((*RefinementResponse)(nil), "snomed.RefinementResponse")
	proto.RegisterType((*RefinementResponse_Refinement)(nil), "snomed.RefinementResponse.Refinement")
	proto.RegisterType((*TranslateFromRequest)(nil), "snomed.TranslateFromRequest")
	proto.RegisterType((*TranslateFromResponse)(nil), "snomed.TranslateFromResponse")
	proto.RegisterType((*TranslateFromResponse_Item)(nil), "snomed.TranslateFromResponse.Item")
	proto.RegisterType((*CrossMapRequest)(nil), "snomed.CrossMapRequest")
	proto.RegisterType((*MapRequest)(nil), "snomed.MapRequest")
	proto.RegisterType((*MapResponse)(nil), "snomed.MapResponse")
	proto.RegisterType((*ParseRequest)(nil), "snomed.ParseRequest")
	proto.RegisterType((*ExtractRequest)(nil), "snomed.ExtractRequest")
	proto.RegisterType((*ExtractResponse)(nil), "snomed.ExtractResponse")
	proto.RegisterType((*ExtractResponse_Entity)(nil), "snomed.ExtractResponse.Entity")
	proto.RegisterType((*SearchRequest)(nil), "snomed.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "snomed.SearchResponse")
	proto.RegisterType((*SearchResponse_Item)(nil), "snomed.SearchResponse.Item")
	proto.RegisterType((*SearchFeedback)(nil), "snomed.SearchFeedback")
	proto.RegisterType((*SynonymRequest)(nil), "snomed.SynonymRequest")
	proto.RegisterType((*SynonymResponseItem)(nil), "snomed.SynonymResponseItem")
	proto.RegisterEnum("snomed.Expression_DefinitionStatus", Expression_DefinitionStatus_name, Expression_DefinitionStatus_value)
	proto.RegisterEnum("snomed.ExpressionConstraint_Constraint", ExpressionConstraint_Constraint_name, ExpressionConstraint_Constraint_value)
	proto.RegisterEnum("snomed.ExpressionConstraint_ComparisonOperator", ExpressionConstraint_ComparisonOperator_name, ExpressionConstraint_ComparisonOperator_value)
	proto.RegisterEnum("snomed.ExpressionConstraint_Logical", ExpressionConstraint_Logical_name, ExpressionConstraint_Logical_value)
	proto.RegisterEnum("snomed.SubsumptionResponse_Result", SubsumptionResponse_Result_name, SubsumptionResponse_Result_value)
	proto.RegisterEnum("snomed.MapRequest_Parents", MapRequest_Parents_name, MapRequest_Parents_value)
	proto.RegisterEnum("snomed.SearchRequest_Fuzzy", SearchRequest_Fuzzy_name, SearchRequest_Fuzzy_value)
}

func init() { proto.RegisterFile("snomed.proto", fileDescriptor_snomed_7b0bd258513f7426) }

var fileDescriptor_snomed_7b0bd258513f7426 = []byte{
	// 3436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4b, 0x6c, 0x24, 0x49,
	0x5a, 0x76, 0x66, 0xbd, 0xff, 0x7a, 0xb8, 0x1c, 0x76, 0xbb, 0x6b, 0x6a, 0xa6, 0xb7, 0xbd, 0xd9,
	0xd3, 0x4c, 0xcf, 0x2e, 0xb8, 0x19, 0x6f, 0xcf, 0x2c, 0x1a, 0x86, 0x9e, 0x2d, 0x97, 0xcb, 0xed,
	0xda, 0x71, 0xdb, 0xde, 0xac, 0xea, 0x9e, 0xed, 0x96, 0x50, 0x92, 0x95, 0x19, 0xb6, 0x93, 0xcd,
	0x47, 0x4d, 0x46, 0x56, 0xd3, 0xde, 0x3b, 0x08, 0x09, 0x21, 0x21, 0x71, 0x45, 0x88, 0x03, 0x70,
	0x82, 0x03, 0x02, 0x24, 0x90, 0xe0, 0x84, 0x90, 0x90, 0x38, 0xa3, 0x3d, 0x20, 0x38, 0x23, 0xae,
	0x9c, 0xb8, 0xa1, 0x78, 0x65, 0x46, 0x96, 0xab, 0xfc, 0xd8, 0x87, 0xd8, 0x5b, 0xc5, 0xff, 0xca,
	0x3f, 0xbe, 0xf8, 0xff, 0x3f, 0xe2, 0x8f, 0x28, 0x68, 0x90, 0x30, 0x0a, 0xb0, 0xbb, 0x3d, 0x8d,
	0xa3, 0x24, 0x42, 0x65, 0x3e, 0xea, 0xde, 0x3f, 0x8b, 0xa2, 0x33, 0x1f, 0x3f, 0x66, 0xd4, 0xc9,
	0xec, 0xf4, 0x71, 0xe2, 0x05, 0x98, 0x24, 0x76, 0x30, 0xe5, 0x82, 0xc6, 0x3f, 0x69, 0x50, 0xe9,
	0x47, 0xa1, 0x83, 0xa7, 0x09, 0x6a, 0x81, 0xee, 0xb9, 0x1d, 0x6d, 0x4b, 0x7b, 0x54, 0x30, 0x75,
	0xcf, 0x45, 0x3d, 0x68, 0xe1, 0xd3, 0x53, 0xec, 0x24, 0xde, 0x1b, 0x6c, 0x51, 0xc5, 0x8e, 0xbe,
	0xa5, 0x3d, 0xaa, 0xef, 0x74, 0xb7, 0xb9, 0xd5, 0x6d, 0x69, 0x75, 0x7b, 0x2c, 0xad, 0x9a, 0xcd,
	0x54, 0x83, 0xd2, 0xd0, 0x26, 0x94, 0x6d, 0x36, 0xea, 0x14, 0xb6, 0xb4, 0x47, 0x55, 0x53, 0x8c,
	0xd0, 0xbb, 0x50, 0x0b, 0x22, 0x77, 0xe6, 0x63, 0xcb, 0x73, 0x3b, 0x45, 0xf6, 0xc5, 0x2a, 0x27,
	0x0c, 0x5d, 0xf4, 0xcb, 0xb0, 0xe1, 0xe2, 0x53, 0x2f, 0xf4, 0x12, 0x2f, 0x0a, 0x2d, 0x92, 0xd8,
	0xc9, 0x8c, 0x50, 0xb9, 0x12, 0x93, 0x43, 0x19, 0x6f, 0xc4, 0x58, 0x43, 0xd7, 0xf8, 0x6b, 0x1d,
	0xea, 0x7b, 0x98, 0x38, 0xb1, 0x37, 0xa5, 0xf4, 0x9f, 0x9b, 0x99, 0xdc, 0x03, 0x70, 0x38, 0xb8,
	0x99, 0xff, 0x35, 0x41, 0x19, 0xba, 0xe8, 0x01, 0x34, 0x7d, 0x3b, 0x3c, 0x9b, 0xd9, 0x67, 0xd8,
	0x72, 0x22, 0x17, 0x77, 0xca, 0x5b, 0xda, 0xa3, 0x9a, 0xd9, 0x90, 0xc4, 0x7e, 0xe4, 0x62, 0x74,
	0x17, 0x2a, 0xc9, 0xc5, 0x94, 0x99, 0xaf, 0x30, 0x03, 0x65, 0x3a, 0x1c, 0xba, 0x08, 0x41, 0x31,
	0xc1, 0x71, 0xd0, 0xa9, 0x32, 0x25, 0xf6, 0x1b, 0x7d, 0x13, 0xd6, 0x1c, 0x9b, 0x60, 0x8b, 0x78,
	0x67, 0xa1, 0x77, 0xea, 0x39, 0x76, 0xe8, 0xe0, 0x4e, 0x8d, 0xa9, 0xb5, 0x29, 0x63, 0xa4, 0xd0,
	0x8d, 0xff, 0xd5, 0xa1, 0x61, 0x62, 0xdf, 0xa6, 0x90, 0x91, 0x73, 0x6f, 0xfa, 0x73, 0x03, 0xdb,
	0xbb, 0x50, 0x23, 0xd1, 0x2c, 0x76, 0x70, 0x86, 0x5a, 0x95, 0x13, 0x86, 0x2e, 0x7a, 0x08, 0x2d,
	0x17, 0x93, 0xc4, 0x0b, 0x99, 0xdf, 0x54, 0xa2, 0xcc, 0x24, 0x9a, 0x0a, 0x75, 0xe8, 0xa2, 0x5f,
	0x02, 0x14, 0x2b, 0x73, 0xb3, 0xce, 0xe2, 0x68, 0x36, 0x15, 0x08, 0xae, 0xa9, 0x9c, 0x67, 0x94,
	0xa1, 0xa2, 0x5c, 0xcd, 0xa1, 0xfc, 0x04, 0x36, 0x9d, 0x73, 0x3b, 0xb6, 0x9d, 0x04, 0xc7, 0x1e,
	0x49, 0x3c, 0xc7, 0x92, 0x72, 0x1c, 0xd6, 0x8d, 0x3c, 0x77, 0xcc, 0xb5, 0xee, 0x43, 0x3d, 0x88,
	0x5c, 0xef, 0xd4, 0xc3, 0x31, 0x15, 0x05, 0x26, 0x0a, 0x92, 0x34, 0x74, 0x8d, 0x7f, 0x2b, 0x41,
	0xdb, 0xc4, 0xa7, 0x38, 0xc6, 0xa1, 0x83, 0x47, 0x38, 0x19, 0x26, 0x38, 0x50, 0xf0, 0xaf, 0xfd,
	0x7f, 0xe3, 0x1f, 0xe3, 0x53, 0x82, 0x95, 0xa8, 0xad, 0x72, 0xc2, 0xd0, 0x45, 0x9f, 0xc0, 0xdd,
	0x58, 0x3a, 0xee, 0x5a, 0x4e, 0x14, 0x4c, 0xa3, 0x10, 0x87, 0x49, 0xb6, 0x10, 0x77, 0x32, 0x76,
	0x5f, 0x72, 0x87, 0x2e, 0x1a, 0xc1, 0x9a, 0x30, 0xea, 0x8a, 0x4c, 0x8d, 0x62, 0xb6, 0x1e, 0xf5,
	0x9d, 0xf7, 0xb7, 0x45, 0xf1, 0x32, 0xf1, 0xe9, 0x08, 0x27, 0x7b, 0x29, 0x5f, 0x45, 0xe8, 0x60,
	0xc5, 0x6c, 0x73, 0x03, 0x19, 0x1f, 0x3d, 0x81, 0x32, 0xf1, 0x82, 0xa9, 0x8f, 0xd9, 0xaa, 0x51,
	0x64, 0x84, 0xa5, 0x11, 0xa3, 0xce, 0xe9, 0x0b, 0x59, 0xf4, 0x29, 0x54, 0x65, 0x8a, 0xb1, 0x55,
	0xac, 0xef, 0xbc, 0x27, 0xf5, 0x0e, 0x05, 0x7d, 0x4e, 0x33, 0x95, 0x47, 0x4f, 0x01, 0xb8, 0x15,
	0x2b, 0xb0, 0xa7, 0x6c, 0x61, 0xeb, 0x3b, 0xf7, 0xf2, 0x5f, 0x7d, 0x6e, 0x4f, 0xe7, 0xd4, 0x6b,
	0x44, 0x32, 0x50, 0x0f, 0xea, 0x14, 0x33, 0x1f, 0xbf, 0x65, 0x06, 0xea, 0xcc, 0xc0, 0xd7, 0xa4,
	0x81, 0x3e, 0x67, 0x5d, 0xb6, 0x00, 0x4e, 0xca, 0x41, 0xcf, 0x61, 0xd5, 0x4e, 0x92, 0xd8, 0x9b,
	0xcc, 0x12, 0x6c, 0xbd, 0xb1, 0xfd, 0x19, 0xee, 0x34, 0x98, 0x19, 0x43, 0x9a, 0xe9, 0x49, 0xf6,
	0x4b, 0xca, 0x9d, 0x33, 0xd5, 0xb2, 0x73, 0x5c, 0xd4, 0x87, 0xba, 0x4d, 0x48, 0xe4, 0x78, 0x2c,
	0x25, 0x3a, 0x4d, 0x66, 0xea, 0x7e, 0x6a, 0x2a, 0x63, 0xcd, 0xd9, 0x51, 0xb5, 0x76, 0xcb, 0x50,
	0x9c, 0x44, 0xee, 0x85, 0xf1, 0x97, 0x1a, 0xbc, 0x77, 0xd5, 0x2a, 0xa2, 0x5f, 0x81, 0x4e, 0xe6,
	0xbc, 0x9b, 0xd5, 0x6c, 0x2b, 0xad, 0x3c, 0x9b, 0x29, 0x5f, 0x29, 0xe9, 0x43, 0x17, 0x7d, 0x03,
	0xd6, 0x32, 0x4d, 0x99, 0x84, 0x3a, 0x53, 0xc9, 0xf0, 0x10, 0xf9, 0xf7, 0x81, 0x0a, 0x51, 0x14,
	0xbb, 0x38, 0x66, 0xf1, 0xdf, 0x54, 0x26, 0x7f, 0x4c, 0xa9, 0xc6, 0x06, 0xa0, 0xcb, 0xa1, 0x62,
	0xf4, 0x60, 0x63, 0x51, 0x20, 0xa0, 0x0f, 0xa1, 0x6d, 0x3b, 0xb4, 0x78, 0xdb, 0x13, 0xcf, 0xf7,
	0x92, 0x8b, 0xcc, 0xe9, 0xd5, 0x1c, 0x7d, 0xe8, 0x1a, 0x9f, 0xc0, 0x9d, 0x85, 0xd1, 0x40, 0xf7,
	0x84, 0xc0, 0x9e, 0x5a, 0x89, 0x1d, 0x9f, 0xe1, 0x44, 0x24, 0x7b, 0x2d, 0xb0, 0xa7, 0x63, 0x46,
	0x30, 0xfe, 0x50, 0x87, 0xcd, 0xc5, 0x51, 0xc0, 0x72, 0xd6, 0x96, 0x95, 0x4c, 0x13, 0x39, 0x6b,
	0x8b, 0x02, 0xf6, 0x75, 0x68, 0x50, 0xe6, 0x34, 0xf6, 0xa2, 0xd8, 0x4b, 0x2e, 0x04, 0x30, 0xf5,
	0xc0, 0x9e, 0x9e, 0x08, 0x12, 0x7a, 0x07, 0xa8, 0xb8, 0x15, 0xcf, 0x7c, 0x5e, 0x0d, 0x6a, 0x66,
	0x25, 0xb0, 0xa7, 0xe6, 0xcc, 0xc7, 0xd2, 0x29, 0xdb, 0x7d, 0xe3, 0x39, 0x98, 0xd5, 0x03, 0xee,
	0x54, 0x8f, 0x11, 0xe6, 0x7c, 0x2e, 0xcd, 0xf9, 0x8c, 0xb6, 0x68, 0x4c, 0xc7, 0xb2, 0xa8, 0x8a,
	0x32, 0xa0, 0x92, 0xa4, 0xeb, 0x13, 0x3f, 0x72, 0x7e, 0x20, 0x8a, 0x30, 0xf5, 0x65, 0x97, 0x8e,
	0xa5, 0xeb, 0x8e, 0x9d, 0xe0, 0xb3, 0x28, 0xbe, 0x10, 0x05, 0x98, 0xba, 0xde, 0x17, 0x24, 0xe3,
	0xdb, 0xd0, 0x5d, 0x1e, 0xd3, 0x74, 0x62, 0x2c, 0x0d, 0xb2, 0xe5, 0xa8, 0xb0, 0xf1, 0xd0, 0x35,
	0x86, 0x70, 0x77, 0x49, 0x04, 0xa3, 0x6d, 0x58, 0xe7, 0x13, 0xca, 0x17, 0x31, 0x6e, 0x60, 0x8d,
	0xb3, 0x94, 0x02, 0x66, 0xfc, 0xa3, 0x0e, 0xab, 0x83, 0xb7, 0x09, 0x0e, 0x5d, 0x5a, 0xd8, 0xf8,
	0x91, 0xe9, 0x43, 0xa8, 0x88, 0xed, 0x9c, 0xe9, 0xd5, 0x77, 0x56, 0xb3, 0x4c, 0x66, 0x64, 0x53,
	0xf2, 0xd1, 0xa7, 0xd0, 0x54, 0xb7, 0x1d, 0xd2, 0xd1, 0xb7, 0x0a, 0x8f, 0xea, 0x3b, 0x1b, 0x59,
	0xed, 0xcb, 0x98, 0x66, 0x5e, 0x14, 0x1d, 0xc0, 0x9d, 0x29, 0xab, 0xaa, 0x31, 0x76, 0xd5, 0xa4,
	0x61, 0xcb, 0x58, 0xdf, 0x59, 0x97, 0x36, 0x94, 0x84, 0x31, 0x37, 0x52, 0x0d, 0xf5, 0x64, 0xf4,
	0x3e, 0xb4, 0x6c, 0xdf, 0xb7, 0xa6, 0x76, 0xcc, 0xa7, 0x4b, 0x3a, 0xc5, 0xad, 0xc2, 0xa3, 0x82,
	0xd9, 0xb0, 0x7d, 0xff, 0x84, 0x11, 0x87, 0x2e, 0xa1, 0xa9, 0xe6, 0x7a, 0x31, 0x76, 0x12, 0x55,
	0xb0, 0xc4, 0x04, 0x57, 0x39, 0x23, 0x93, 0xfd, 0x00, 0x56, 0xe5, 0x19, 0x87, 0x97, 0x67, 0xd2,
	0x29, 0x33, 0xc9, 0x96, 0x20, 0x9b, 0x9c, 0x6a, 0xfc, 0xbd, 0x0e, 0xeb, 0x02, 0x15, 0xc5, 0x23,
	0x72, 0x1b, 0x0c, 0x97, 0xe2, 0xa0, 0xdf, 0x16, 0x87, 0x01, 0x6c, 0x9c, 0xce, 0x7c, 0xff, 0xc2,
	0x22, 0x53, 0xec, 0xd0, 0x4d, 0xd9, 0xb5, 0x42, 0x3b, 0xc0, 0x57, 0x01, 0x8a, 0x98, 0xc2, 0x48,
	0xca, 0x1f, 0xd9, 0x01, 0x46, 0x8f, 0xa1, 0x4a, 0x2e, 0xc2, 0x28, 0xbc, 0x08, 0x38, 0x90, 0x4b,
	0x54, 0x53, 0x21, 0xf4, 0x31, 0xd4, 0xb3, 0xf3, 0x2b, 0xc7, 0x74, 0x89, 0x8e, 0x2a, 0x67, 0xfc,
	0x8f, 0x0e, 0xeb, 0x32, 0xf6, 0xd4, 0x69, 0x30, 0x73, 0x19, 0x0c, 0xda, 0x72, 0xef, 0x55, 0x39,
	0x15, 0xf2, 0xc2, 0x8f, 0x0b, 0x79, 0xf1, 0x27, 0x0f, 0xbd, 0xd2, 0x4d, 0x43, 0xaf, 0x7c, 0xe3,
	0xd0, 0xab, 0x2c, 0x0a, 0x3d, 0xf4, 0x18, 0xd6, 0xd5, 0xad, 0x46, 0x0a, 0x57, 0x99, 0x30, 0x52,
	0x58, 0x42, 0xe1, 0xbb, 0xc5, 0xaa, 0xde, 0x2e, 0x18, 0x03, 0x68, 0xf7, 0x53, 0x43, 0xbc, 0x70,
	0xcc, 0x1d, 0xe9, 0xb5, 0xf9, 0x23, 0xbd, 0x3c, 0x94, 0xeb, 0xd9, 0xa1, 0xdc, 0xf8, 0xe7, 0x32,
	0xc0, 0xe0, 0xed, 0x34, 0xc6, 0x84, 0x50, 0x1c, 0x4e, 0x60, 0xed, 0x52, 0x7b, 0xc3, 0x0c, 0xb5,
	0x76, 0x1e, 0x48, 0x34, 0x33, 0xf1, 0xed, 0xbd, 0xb9, 0x76, 0xc7, 0x6c, 0xcf, 0x37, 0x40, 0xe8,
	0x23, 0x28, 0x3b, 0xbe, 0x3d, 0x23, 0xf2, 0x7c, 0xf8, 0xce, 0x02, 0x33, 0x7d, 0x26, 0x60, 0x0a,
	0xc1, 0xee, 0xbf, 0x6b, 0x50, 0xe6, 0x24, 0xf4, 0x39, 0xb4, 0x4e, 0x23, 0x67, 0x46, 0x2c, 0x31,
	0x0b, 0xea, 0x0c, 0x8d, 0xca, 0xce, 0x7c, 0x4c, 0x48, 0x0c, 0xcc, 0x26, 0x93, 0x17, 0x64, 0x82,
	0x3e, 0x87, 0x7a, 0x4c, 0x5d, 0xc2, 0x01, 0x0e, 0x13, 0x59, 0xd7, 0xee, 0x2d, 0xf0, 0xc1, 0x4c,
	0xa5, 0x4c, 0x55, 0x03, 0x1d, 0xb3, 0xa3, 0xa1, 0x18, 0xf2, 0xfd, 0x8d, 0x74, 0x0a, 0xcc, 0x8c,
	0x71, 0xa5, 0x19, 0xb6, 0xf5, 0xb1, 0x63, 0xa1, 0x4a, 0x20, 0x5d, 0x13, 0x56, 0xe7, 0x84, 0xe6,
	0x9d, 0xd4, 0x6e, 0xeb, 0x64, 0xf7, 0x5f, 0x74, 0x80, 0x8c, 0x87, 0x9e, 0xd1, 0xfe, 0x22, 0xf5,
	0x39, 0x5f, 0xc0, 0x96, 0x23, 0xa7, 0xcc, 0x53, 0x6e, 0x21, 0x9f, 0x43, 0x53, 0x06, 0x14, 0x3f,
	0xcb, 0xe9, 0x57, 0xdb, 0x38, 0x58, 0x31, 0x1b, 0x42, 0x81, 0x9f, 0xdf, 0x9e, 0x42, 0x83, 0x2f,
	0xaa, 0xd0, 0x2f, 0x5c, 0x13, 0x03, 0xf4, 0xe8, 0xc6, 0x15, 0xb8, 0xfe, 0x03, 0x68, 0x90, 0x24,
	0xf6, 0xc2, 0x33, 0xa1, 0xcf, 0x76, 0x7f, 0x2a, 0xc4, 0xa9, 0x5c, 0xe8, 0x1e, 0xd4, 0xbc, 0x50,
	0x7a, 0xc8, 0x5a, 0x02, 0x7a, 0x2a, 0xf6, 0xc2, 0x24, 0xb5, 0xe1, 0x46, 0xb3, 0x89, 0x2f, 0x7d,
	0xa0, 0x47, 0x00, 0x8d, 0xda, 0xe0, 0x54, 0x26, 0xb4, 0x5b, 0x81, 0x12, 0xe3, 0x1a, 0x1f, 0x43,
	0x7b, 0x3e, 0xaa, 0xd1, 0x1a, 0x34, 0x07, 0xdf, 0x7b, 0x31, 0x7c, 0xd9, 0x3b, 0x1c, 0x1c, 0x8d,
	0xad, 0xf1, 0x71, 0x7b, 0x05, 0xb5, 0x00, 0x46, 0x2f, 0x76, 0xc7, 0xaf, 0x4e, 0x06, 0xd6, 0xf1,
	0x7e, 0x5b, 0x33, 0xfe, 0xf6, 0x1e, 0x6c, 0x64, 0xb3, 0xe9, 0x47, 0x21, 0x49, 0x62, 0xdb, 0x0b,
	0x13, 0xf4, 0x1d, 0xa8, 0x70, 0x5c, 0x5d, 0xb1, 0x00, 0xef, 0x5f, 0x9e, 0x7c, 0x26, 0x2e, 0x56,
	0xd8, 0x3d, 0x58, 0x31, 0xa5, 0x1a, 0xea, 0x43, 0x95, 0x1d, 0x02, 0x66, 0xa1, 0x2b, 0xf0, 0x7f,
	0x78, 0xa5, 0x89, 0xbe, 0x10, 0xa6, 0x20, 0x48, 0x45, 0xf4, 0x6b, 0x50, 0x76, 0xa3, 0x24, 0xc1,
	0xae, 0x58, 0x82, 0x07, 0x57, 0x9a, 0xd8, 0x63, 0xa2, 0xb4, 0x2b, 0xe1, 0x4a, 0xc8, 0x84, 0x26,
	0x99, 0x4d, 0x70, 0x2a, 0x2b, 0x2a, 0xec, 0x37, 0xae, 0xb4, 0x32, 0x52, 0x35, 0x0e, 0x56, 0xcc,
	0xbc, 0x89, 0xee, 0x9f, 0x6a, 0x50, 0x11, 0xd3, 0x45, 0x27, 0xf3, 0xf6, 0xb5, 0xdb, 0xda, 0x9f,
	0xb3, 0x8e, 0x9e, 0x01, 0x64, 0xf1, 0x2c, 0x70, 0xfb, 0xe0, 0x06, 0xd0, 0xb3, 0xe4, 0x52, 0x54,
	0xbb, 0xff, 0xa9, 0x41, 0x55, 0x42, 0xfa, 0x33, 0xf0, 0xf3, 0x29, 0x54, 0xfc, 0xe8, 0xcc, 0x73,
	0x6c, 0x9f, 0x39, 0xd9, 0xba, 0x26, 0x3e, 0x0e, 0xb9, 0xac, 0x29, 0x95, 0xd0, 0x77, 0xa0, 0x44,
	0x0b, 0xb9, 0xac, 0x49, 0xb7, 0xf1, 0x84, 0x2b, 0x76, 0xff, 0x58, 0x83, 0x32, 0x5f, 0xf0, 0x9f,
	0xc1, 0xf4, 0x76, 0xd3, 0xb8, 0xd3, 0x6f, 0xed, 0x9f, 0xd0, 0xec, 0x7e, 0x05, 0x8d, 0x7d, 0xa5,
	0xa8, 0xa3, 0x01, 0xac, 0x29, 0x5b, 0x2b, 0xaf, 0x3c, 0xd7, 0x56, 0xb7, 0xb6, 0x33, 0xbf, 0x5b,
	0x76, 0xa1, 0xfa, 0x5b, 0x9e, 0xef, 0x3a, 0x76, 0xcc, 0xf3, 0xaa, 0x6a, 0xa6, 0xe3, 0xee, 0x8f,
	0xf2, 0x05, 0x95, 0xe3, 0xa2, 0xc4, 0xd3, 0x0d, 0x71, 0xc9, 0x34, 0xcc, 0xbc, 0x01, 0x34, 0x83,
	0xae, 0x13, 0x85, 0xbf, 0x39, 0x0b, 0x1d, 0xb9, 0xeb, 0xcb, 0x72, 0x4d, 0xb0, 0x0c, 0xd7, 0x8f,
	0xaf, 0x49, 0xf3, 0x54, 0x3d, 0xf3, 0x94, 0x77, 0xbf, 0x1d, 0x67, 0x09, 0x8f, 0x7e, 0xd6, 0xf5,
	0xc8, 0xb2, 0xcf, 0x16, 0x6e, 0xf0, 0xd9, 0xbd, 0x4c, 0xfd, 0xd2, 0x67, 0xdd, 0x25, 0xbc, 0xdd,
	0x5a, 0x1a, 0xe4, 0xdd, 0xef, 0x43, 0x67, 0x99, 0xe7, 0xe8, 0x33, 0x28, 0xd8, 0xa1, 0x2b, 0xf6,
	0xbf, 0xdb, 0x80, 0x4b, 0xd5, 0xba, 0x2f, 0xa1, 0xb3, 0xcc, 0x39, 0xf4, 0x29, 0xe8, 0x51, 0xfc,
	0x63, 0x18, 0xd6, 0xa3, 0xb8, 0xfb, 0xfb, 0x3a, 0x34, 0x73, 0x54, 0x1a, 0x0e, 0x59, 0x07, 0x4f,
	0xb0, 0x0c, 0x87, 0x0f, 0xaf, 0x34, 0x9c, 0xf6, 0x88, 0x1c, 0xac, 0x86, 0xad, 0x8c, 0xd1, 0x4b,
	0xf5, 0x4e, 0x80, 0x37, 0xd1, 0x3c, 0x06, 0xbe, 0x79, 0x33, 0x9b, 0xec, 0x1c, 0x91, 0xbb, 0x3f,
	0xe1, 0x27, 0x8b, 0x61, 0xae, 0x0a, 0x16, 0x6e, 0x55, 0x05, 0x0f, 0x56, 0xd4, 0x3a, 0x98, 0xee,
	0x90, 0xdd, 0xbf, 0xd0, 0xa0, 0x95, 0xff, 0x30, 0xfa, 0x2e, 0xd4, 0x69, 0xda, 0x78, 0xa1, 0xed,
	0xd3, 0xfe, 0x9e, 0xc3, 0xf1, 0xe8, 0xea, 0xf0, 0xcd, 0xe4, 0x4d, 0x55, 0x19, 0x1d, 0xcd, 0x83,
	0xab, 0xdf, 0x12, 0xdc, 0x3c, 0xb4, 0xdd, 0x3f, 0xd7, 0xa1, 0xa1, 0xb2, 0xd1, 0x97, 0xd0, 0x26,
	0xb3, 0xc9, 0xa2, 0x05, 0xfc, 0xc5, 0xeb, 0x22, 0x43, 0x35, 0x6c, 0xae, 0x92, 0x3c, 0x01, 0x7d,
	0x1f, 0xea, 0x4a, 0xe2, 0x09, 0xbf, 0x9f, 0xdc, 0x34, 0x89, 0xe7, 0xe2, 0x43, 0x35, 0x45, 0x2d,
	0x2b, 0xb9, 0x25, 0xd6, 0xf1, 0xc9, 0x4d, 0xf3, 0x74, 0xde, 0xb2, 0x62, 0x4a, 0xcd, 0xcc, 0x57,
	0x70, 0x77, 0x89, 0x3b, 0xe8, 0xa9, 0x9a, 0x98, 0xb7, 0x43, 0x89, 0xa5, 0xe6, 0x97, 0x70, 0x77,
	0x89, 0x3f, 0xe8, 0x33, 0x25, 0x33, 0x6f, 0x67, 0x99, 0xe6, 0xe6, 0xdf, 0x68, 0xb0, 0x3a, 0x47,
	0x47, 0xfb, 0x50, 0x4b, 0xc7, 0x62, 0x61, 0x7f, 0xe1, 0x66, 0xc1, 0x73, 0xb0, 0x62, 0x66, 0xaa,
	0x97, 0xb3, 0x5c, 0xff, 0x09, 0xb3, 0x3c, 0x4b, 0xa1, 0x3f, 0xe0, 0x25, 0x25, 0x7f, 0x5c, 0x71,
	0x52, 0x2b, 0xa2, 0xe3, 0xfa, 0xe0, 0xba, 0xd0, 0x11, 0x3f, 0x4d, 0x45, 0x95, 0xdd, 0x66, 0xe1,
	0x60, 0x82, 0x63, 0x2b, 0x3a, 0x95, 0xdb, 0x1a, 0x27, 0x1c, 0x9f, 0xd2, 0x29, 0xe5, 0xda, 0x29,
	0x11, 0x49, 0x57, 0x4f, 0x49, 0xdd, 0x7b, 0xe9, 0x94, 0xd4, 0x06, 0x0b, 0x3d, 0x05, 0xb8, 0x74,
	0x2a, 0x7c, 0xef, 0x2a, 0x73, 0xb4, 0xaa, 0x64, 0x1a, 0x19, 0x24, 0x3f, 0x2a, 0x40, 0x2d, 0x05,
	0xef, 0xa7, 0x5a, 0x50, 0x3a, 0xf4, 0x04, 0xfe, 0x06, 0xc7, 0xa2, 0x05, 0xad, 0x9a, 0x72, 0x88,
	0x9e, 0x42, 0x51, 0xb9, 0x58, 0xb9, 0xcd, 0xd1, 0x84, 0xe9, 0xa1, 0x2f, 0xa0, 0x1a, 0x4d, 0x71,
	0x6c, 0x27, 0x51, 0xcc, 0xa6, 0xde, 0xda, 0x79, 0x7c, 0xed, 0xc9, 0xdc, 0x8e, 0x3d, 0x12, 0x85,
	0xc7, 0x42, 0xcd, 0x4c, 0x0d, 0xa0, 0x5f, 0x87, 0xf5, 0xdc, 0xd1, 0x49, 0xe9, 0x67, 0x6e, 0x7b,
	0xd0, 0x46, 0x39, 0x43, 0xbc, 0x0b, 0x7a, 0x08, 0x4d, 0x2f, 0x4c, 0xf0, 0x19, 0x8e, 0x95, 0x36,
	0x88, 0x36, 0x4a, 0x0d, 0x41, 0x5e, 0xdc, 0x2c, 0x55, 0x16, 0x34, 0x4b, 0x97, 0xba, 0xb2, 0xea,
	0x82, 0xae, 0x2c, 0x5b, 0xd9, 0x2f, 0xa1, 0xae, 0xac, 0x0d, 0x7a, 0x00, 0xcd, 0xc0, 0x0b, 0xbd,
	0x60, 0x16, 0x08, 0x6d, 0x7e, 0x4f, 0xd1, 0x10, 0x44, 0xf9, 0x85, 0x66, 0x60, 0xbf, 0x55, 0x84,
	0x74, 0x21, 0xc4, 0x89, 0x4c, 0xc8, 0xf8, 0x3d, 0x0d, 0x40, 0xe9, 0xb4, 0xaa, 0x50, 0x1c, 0x0d,
	0x0e, 0xf7, 0xdb, 0x2b, 0xa8, 0x01, 0xd5, 0xfe, 0xc1, 0xf0, 0x70, 0x8f, 0xb5, 0x66, 0xe8, 0x1d,
	0xb8, 0xb3, 0x37, 0x18, 0xf5, 0x07, 0x47, 0x7b, 0xbd, 0xa3, 0xb1, 0x75, 0x6c, 0x5a, 0x54, 0x8a,
	0xb2, 0x74, 0xda, 0xd8, 0xa9, 0xac, 0xfd, 0x76, 0x01, 0x35, 0xa1, 0x76, 0xd2, 0x33, 0x07, 0x7c,
	0x58, 0x44, 0x77, 0x61, 0xbd, 0x77, 0xd4, 0x1f, 0x8c, 0xc6, 0xc7, 0xa6, 0xaa, 0x5a, 0x42, 0xab,
	0x50, 0xcf, 0x18, 0xfb, 0xed, 0xb2, 0xf1, 0x3b, 0x1a, 0xa0, 0xcb, 0x0b, 0x8c, 0x00, 0xca, 0x83,
	0xef, 0xbd, 0xe8, 0x1d, 0x8e, 0x78, 0xd3, 0x78, 0x74, 0x3c, 0xb6, 0xc4, 0x58, 0xa3, 0xc6, 0x0f,
	0x07, 0xa3, 0x91, 0x35, 0x3e, 0xe8, 0x1d, 0x51, 0xeb, 0x82, 0xa1, 0x53, 0x27, 0x52, 0x46, 0xbb,
	0x80, 0xba, 0xb0, 0xf9, 0xcc, 0x1c, 0xf4, 0xc6, 0x03, 0x73, 0x5e, 0xb4, 0x88, 0xda, 0xd0, 0x50,
	0x79, 0xed, 0x92, 0xf1, 0x00, 0x2a, 0xa2, 0x4b, 0x40, 0x15, 0x28, 0xf4, 0x8e, 0xf6, 0xda, 0x2b,
	0xa8, 0x0c, 0xfa, 0xb1, 0xd9, 0xd6, 0x28, 0xe1, 0xe8, 0x78, 0xdc, 0xd6, 0x77, 0xcb, 0x50, 0x4c,
	0x2e, 0xa6, 0xd8, 0x78, 0x0d, 0x68, 0x34, 0x9b, 0x90, 0x59, 0x20, 0xae, 0x98, 0xbe, 0x9a, 0x61,
	0x92, 0xa0, 0x4d, 0x28, 0x93, 0x0b, 0x92, 0xe0, 0x40, 0xbc, 0x01, 0x88, 0x11, 0xba, 0x03, 0x65,
	0x27, 0x72, 0xb1, 0x65, 0x8b, 0xf5, 0x28, 0xd1, 0x51, 0x2f, 0x25, 0x4f, 0x58, 0x26, 0x09, 0xf2,
	0xae, 0xf1, 0x47, 0x1a, 0xac, 0xe7, 0x8c, 0x93, 0x69, 0x14, 0x12, 0x8c, 0x3e, 0x85, 0x72, 0x8c,
	0xc9, 0xcc, 0x97, 0x75, 0x2e, 0xbd, 0x47, 0x59, 0x20, 0xbc, 0x6d, 0x32, 0x49, 0x53, 0x68, 0x18,
	0x43, 0x28, 0x73, 0x0a, 0x05, 0x33, 0x6b, 0xca, 0xf9, 0xa2, 0x8f, 0x5e, 0xec, 0x8e, 0x5e, 0x3c,
	0x1f, 0x50, 0x68, 0x57, 0xa1, 0x2e, 0x46, 0x7b, 0xd6, 0xee, 0xab, 0xb6, 0x4e, 0x71, 0xa2, 0xd8,
	0x4b, 0x62, 0xbb, 0x60, 0xbc, 0x80, 0x35, 0xa5, 0xe5, 0x13, 0x33, 0xbf, 0xe6, 0x0a, 0xed, 0xeb,
	0xd0, 0x70, 0xce, 0x23, 0xcf, 0xc1, 0x96, 0xef, 0x05, 0x1e, 0xdf, 0x12, 0x4a, 0x66, 0x9d, 0xd3,
	0x0e, 0x29, 0xc9, 0xf8, 0x07, 0x1d, 0x90, 0x6a, 0x57, 0x4c, 0xfa, 0x16, 0x37, 0xc9, 0xcf, 0x16,
	0xdd, 0x59, 0x3d, 0x54, 0xde, 0x21, 0xe7, 0x6c, 0x2f, 0xbd, 0x16, 0xfa, 0x2b, 0x2d, 0xd7, 0xc5,
	0x7c, 0x72, 0x79, 0x63, 0x5c, 0xde, 0x2f, 0x29, 0x1b, 0xe1, 0xb7, 0x01, 0xe2, 0x28, 0xba, 0xe1,
	0x15, 0x90, 0x59, 0xa3, 0xb2, 0x3c, 0x8b, 0x77, 0xa0, 0xc2, 0x91, 0x91, 0xdd, 0xe9, 0x72, 0x2d,
	0x29, 0x68, 0xf8, 0xb0, 0x31, 0x8e, 0xed, 0x90, 0xf8, 0x76, 0x82, 0xf7, 0xe3, 0x28, 0x90, 0x0b,
	0x93, 0x7b, 0xf7, 0xd5, 0xe6, 0xde, 0x7d, 0x1b, 0xa0, 0x11, 0x71, 0xad, 0xa9, 0x11, 0xf4, 0x21,
	0xb4, 0xbd, 0xd0, 0xf1, 0x67, 0x2e, 0xb6, 0xbc, 0x30, 0xf7, 0xc2, 0xbc, 0x2a, 0xe8, 0x43, 0x41,
	0x36, 0xfe, 0x5b, 0x87, 0x3b, 0x73, 0x9f, 0x13, 0xeb, 0xb5, 0x0f, 0x8d, 0x44, 0x30, 0xd8, 0x6d,
	0xb8, 0x96, 0xbf, 0xf2, 0x5b, 0xa8, 0xb4, 0x3d, 0x4c, 0x70, 0x60, 0xe6, 0xf4, 0xba, 0xbf, 0xab,
	0x43, 0x91, 0x3d, 0xa0, 0xef, 0xb3, 0x4b, 0x39, 0x3e, 0x5d, 0x8b, 0xcd, 0x43, 0xe6, 0x97, 0x82,
	0xcb, 0xfc, 0xb3, 0x3b, 0xbb, 0x3f, 0xcc, 0x3f, 0xc4, 0x2b, 0x81, 0xa4, 0x5f, 0x13, 0x48, 0x77,
	0xa1, 0x42, 0xec, 0x00, 0x5b, 0x36, 0xc7, 0xbf, 0x60, 0x96, 0xe9, 0xb0, 0x47, 0xd0, 0x13, 0xd8,
	0x9c, 0x46, 0x84, 0x78, 0x13, 0xff, 0xc2, 0xc2, 0x5f, 0xcd, 0xbc, 0x37, 0xb6, 0x4f, 0x7b, 0xc0,
	0x24, 0x12, 0x2f, 0x2e, 0x1b, 0x92, 0x3b, 0x48, 0x99, 0xe3, 0x88, 0xe6, 0x06, 0xf1, 0x02, 0xcf,
	0xb7, 0x63, 0x2a, 0xc9, 0x2f, 0xc8, 0x6b, 0x82, 0x32, 0x8e, 0xd0, 0x7d, 0x1a, 0xb6, 0x53, 0xdf,
	0x76, 0xb0, 0x6b, 0x4d, 0x2e, 0xc4, 0xbd, 0x38, 0x48, 0xd2, 0xee, 0x85, 0xf1, 0x1c, 0x56, 0xfb,
	0x71, 0x44, 0x08, 0x7b, 0x3b, 0xbc, 0x51, 0xba, 0xe5, 0x16, 0x5d, 0xcf, 0x2f, 0xba, 0xf1, 0xaf,
	0x1a, 0xc0, 0x4f, 0xc7, 0x14, 0x65, 0x8a, 0xe7, 0x36, 0xcf, 0x15, 0x50, 0x55, 0x39, 0x81, 0xfd,
	0xcb, 0xa2, 0xc2, 0xaf, 0xfb, 0x89, 0xd8, 0xe4, 0xd3, 0x87, 0xfc, 0xec, 0xeb, 0xdb, 0xfc, 0xe2,
	0x9f, 0x98, 0x52, 0xd4, 0xd8, 0x86, 0x8a, 0xa0, 0xd1, 0xca, 0xb4, 0xdf, 0x3b, 0x3c, 0xdc, 0xed,
	0xf5, 0xbf, 0x68, 0xaf, 0xd0, 0x0d, 0xa1, 0x77, 0xf8, 0x65, 0xef, 0x15, 0xad, 0x52, 0x35, 0x28,
	0x1d, 0x0d, 0x5e, 0x0e, 0xcc, 0xb6, 0x6e, 0x7c, 0x01, 0x75, 0x66, 0x4e, 0x84, 0xdf, 0x67, 0x0b,
	0xc3, 0x6f, 0x79, 0xfe, 0xe4, 0xa4, 0x8d, 0xf7, 0xa0, 0x71, 0x62, 0xc7, 0x04, 0x4b, 0x6c, 0x58,
	0x7e, 0x68, 0x22, 0x3f, 0x8c, 0x27, 0xd0, 0x1a, 0xbc, 0x4d, 0x62, 0xdb, 0x49, 0x16, 0xf2, 0xd1,
	0x06, 0x94, 0xce, 0x3d, 0x59, 0x79, 0x0a, 0x26, 0x1f, 0x18, 0x7f, 0xc7, 0x9f, 0x18, 0xb9, 0x5a,
	0x5a, 0xc9, 0xab, 0x38, 0x4c, 0xbc, 0xc4, 0xc3, 0xd2, 0xc3, 0xaf, 0x65, 0x07, 0x95, 0x9c, 0xe8,
	0xf6, 0x80, 0xca, 0x5d, 0x98, 0xa9, 0x7c, 0xf7, 0xbf, 0x34, 0x28, 0x73, 0x22, 0x7f, 0x98, 0x78,
	0x2b, 0x1f, 0x9c, 0xd9, 0x6f, 0xea, 0x04, 0x71, 0xa2, 0x98, 0xd7, 0x1b, 0xcd, 0xe4, 0x03, 0x7a,
	0x96, 0x0b, 0xf1, 0x99, 0x2d, 0xef, 0x31, 0xab, 0xa6, 0x1c, 0xa2, 0x27, 0x50, 0x4d, 0xdf, 0x08,
	0x8a, 0xd7, 0x80, 0x95, 0x4a, 0xa2, 0x2d, 0xa8, 0x67, 0x07, 0x25, 0xfe, 0xe8, 0x53, 0x33, 0x55,
	0x12, 0x0d, 0xab, 0x09, 0x26, 0x89, 0x15, 0xd8, 0x89, 0x73, 0x2e, 0x9e, 0x8f, 0x6b, 0x94, 0xf2,
	0x9c, 0x12, 0xe8, 0x41, 0xe5, 0x0c, 0x87, 0x38, 0xf6, 0x1c, 0x21, 0xc1, 0x1f, 0x90, 0x1b, 0x82,
	0xc8, 0x84, 0x8c, 0xdf, 0x2e, 0x40, 0x73, 0x84, 0xed, 0xd8, 0x39, 0x5f, 0x0c, 0xf8, 0x1a, 0x14,
	0x3d, 0xc2, 0x36, 0x55, 0x8a, 0x77, 0xc1, 0x23, 0x3d, 0xf6, 0x4f, 0x22, 0xf5, 0xa9, 0x49, 0x66,
	0x70, 0x53, 0x7d, 0x67, 0x5a, 0xf8, 0xca, 0x54, 0xbc, 0xcd, 0x2b, 0x53, 0x69, 0xd9, 0x2b, 0x13,
	0x7f, 0xf8, 0xe6, 0x27, 0xb0, 0x73, 0x8f, 0xbd, 0x9b, 0xb2, 0x9d, 0x4e, 0xd0, 0x0e, 0xbc, 0x64,
	0x71, 0x9d, 0xad, 0x2c, 0xac, 0xb3, 0xe8, 0x23, 0x28, 0x9d, 0xce, 0x7e, 0xf8, 0x43, 0xfe, 0x7e,
	0xde, 0xda, 0x79, 0x37, 0xdd, 0xf1, 0x55, 0x54, 0xb6, 0xf7, 0xa9, 0x88, 0xc9, 0x25, 0xb3, 0x28,
	0xac, 0xa9, 0x51, 0xf8, 0xab, 0x50, 0x62, 0x52, 0x08, 0x41, 0x4b, 0x26, 0x95, 0xb5, 0xff, 0xe2,
	0xf5, 0xeb, 0x57, 0xed, 0x15, 0xba, 0xc7, 0xf3, 0xd4, 0x12, 0x14, 0x8d, 0xa6, 0xde, 0xd1, 0xb1,
	0x18, 0xe9, 0xc6, 0x9f, 0x69, 0xd0, 0x92, 0x5f, 0x14, 0x11, 0xfc, 0x11, 0x94, 0x68, 0x1d, 0x96,
	0xe1, 0x7b, 0xc9, 0x31, 0xb5, 0xb0, 0x73, 0xc9, 0xee, 0x6f, 0x88, 0x82, 0x2e, 0x9f, 0xd3, 0x34,
	0xe5, 0x3f, 0x6e, 0xf9, 0x22, 0xa4, 0xcf, 0x17, 0xa1, 0x87, 0xd0, 0xca, 0x1e, 0x2c, 0x99, 0x32,
	0xff, 0xaf, 0x43, 0x33, 0xa5, 0x8e, 0x71, 0x1c, 0x18, 0x7f, 0x92, 0xfa, 0xb9, 0x8f, 0xb1, 0x3b,
	0xb1, 0x9d, 0x1f, 0xa0, 0xc7, 0xb4, 0x89, 0x61, 0x28, 0x89, 0x2d, 0xe3, 0xce, 0x42, 0x08, 0x4d,
	0x29, 0x85, 0x76, 0xa0, 0x1a, 0x0b, 0xef, 0xc5, 0x3e, 0xb1, 0xb9, 0x78, 0x6e, 0x66, 0x2a, 0x47,
	0x17, 0x94, 0x60, 0x1f, 0x3b, 0x09, 0xfb, 0xf3, 0x54, 0xd6, 0x21, 0x16, 0xcc, 0x55, 0x49, 0x17,
	0xb9, 0x64, 0xfc, 0x07, 0x75, 0x91, 0x3f, 0x1c, 0xdf, 0x38, 0xa6, 0xe7, 0x43, 0xaa, 0x70, 0xb3,
	0x90, 0x2a, 0x5e, 0x13, 0x52, 0xa5, 0x1b, 0x87, 0x94, 0x62, 0xdd, 0x39, 0xf7, 0x7c, 0x37, 0xc6,
	0xfc, 0x0f, 0x21, 0x99, 0xf5, 0xbe, 0x20, 0x1b, 0x0f, 0x60, 0x3d, 0x9d, 0x1e, 0x47, 0x87, 0xad,
	0x79, 0x6e, 0x8e, 0xbb, 0xdf, 0x82, 0xfb, 0x4e, 0x14, 0x6c, 0x63, 0xdf, 0x8d, 0xbd, 0xb7, 0xdb,
	0x74, 0x3d, 0xbd, 0x30, 0xf2, 0xa3, 0xb3, 0x0b, 0xe1, 0x8b, 0x93, 0xec, 0x96, 0x4f, 0xe2, 0x28,
	0x89, 0xc8, 0x89, 0xf6, 0x5a, 0xfc, 0xed, 0x75, 0x52, 0x66, 0x7f, 0x8c, 0xfb, 0xd6, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xb8, 0x86, 0xf9, 0x50, 0x15, 0x2b, 0x00, 0x00,
}
